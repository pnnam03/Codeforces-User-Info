{"title": ["F. Swimmers in the Pool"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Each person swims along the following route: they start at point $$$0$$$ and swim to point $$$l$$$ with constant speed (which is equal to $$$v_i$$$ units per second for the $$$i$$$-th swimmer). After reaching the point $$$l$$$, the swimmer instantly (in negligible time) turns back and starts swimming to the point $$$0$$$ with the same constant speed. After returning to the point $$$0$$$, the swimmer starts swimming to the point $$$l$$$, and so on."], ["Let's say that some ", "real", " moment of time is a ", "meeting moment", " if there are ", "at least two", " swimmers that are in the same point of the pool at that moment of time (that point may be $$$0$$$ or $$$l$$$ as well as any other real point inside the pool)."], ["The pool will be open for $$$t$$$ seconds. You have to calculate the number of meeting moments while the pool is open. Since the answer may be very large, print it modulo $$$10^9 + 7$$$."], []], "input_specification": [["The first line contains two integers $$$l$$$ and $$$t$$$ ($$$1 \\le l, t \\le 10^9$$$) — the length of the pool and the duration of the process (in seconds)."], ["The second line contains the single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of swimmers."], ["The third line contains $$$n$$$ integers $$$v_1, v_2, \\dots, v_n$$$ ($$$1 \\le v_i \\le 2 \\cdot 10^5$$$), where $$$v_i$$$ is the speed of the $$$i$$$-th swimmer. All $$$v_i$$$ are ", "pairwise distinct", "."]], "output_specification": [["Print one integer — the number of meeting moments (including moment $$$t$$$ if needed and ", "excluding moment $$$0$$$", "), taken modulo $$$10^9 + 7$$$."]], "sample_test_input": ["9 18\n2\n1 2\n"], "sample_test_output": ["3\n"], "note": [["In the first example, there are three meeting moments:"]]}
{"title": ["F. Late For Work (submissions are not allowed)"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Debajyoti has a very important meeting to attend and he is already very late. Harsh, his driver, needs to take Debajyoti to the destination for the meeting as fast as possible."], ["Harsh needs to pick up Debajyoti from his home and take him to the destination so that Debajyoti can attend the meeting in time. A straight road with $$$n$$$ traffic lights connects the home and the destination for the interview. The traffic lights are numbered in order from $$$1$$$ to $$$n$$$."], ["Each traffic light cycles after $$$t$$$ seconds. The $$$i$$$-th traffic light is $$$\\color{green}{\\text{green}}$$$ (in which case Harsh can cross the traffic light) for the first $$$g_i$$$ seconds, and $$$\\color{red}{\\text{red}}$$$ (in which case Harsh must wait for the light to turn $$$\\color{green}{\\text{green}}$$$) for the remaining $$$(t−g_i)$$$ seconds, after which the pattern repeats. Each light's cycle repeats indefinitely and initially, the $$$i$$$-th light is $$$c_i$$$ seconds into its cycle (a light with $$$c_i=0$$$ has just turned $$$\\color{green}{\\text{green}}$$$). In the case that Harsh arrives at a light at the same time it changes colour, he will obey the new colour. ", "Formally", ", the $$$i$$$-th traffic light is $$$\\color{green}{\\text{green}}$$$ from $$$[0,g_i)$$$ and $$$\\color{red}{\\text{red}}$$$ from $$$[g_i,t)$$$ (after which it repeats the cycle). The $$$i$$$-th traffic light is initially at the $$$c_i$$$-th second of its cycle."], ["From the $$$i$$$-th traffic light, ", "exactly", " $$$d_i$$$ seconds are required to travel to the next traffic light (that is to the $$$(i+1)$$$-th light). Debajyoti's home is located just before the first light and Debajyoti drops for the interview as soon as he passes the $$$n$$$-th light. In other words, no time is required to reach the first light from Debajyoti's home or to reach the interview centre from the $$$n$$$-th light."], ["Harsh does not know how much longer it will take for Debajyoti to get ready. While waiting, he wonders what is the minimum possible amount of time he will spend driving provided he starts the moment Debajyoti arrives, which can be anywhere between $$$0$$$ to $$$\\infty$$$ seconds from now. Can you tell Harsh the minimum possible amount of time he needs to spend on the road?"], ["Please note that Harsh can only start or stop driving at integer moments of time."], []], "input_specification": [["The first line of input will contain two integers, $$$n$$$ and $$$t$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$2 \\le t \\le 10^9$$$) denoting the number of traffic lights and the cycle length of the traffic lights respectively."], ["$$$n$$$ lines of input follow. The $$$i$$$-th line will contain two integers $$$g_i$$$ and $$$c_i$$$ ($$$1 \\le g_i < t$$$, $$$0 \\le c_i < t$$$) describing the $$$i$$$-th traffic light."], ["The following line of input contains $$$n−1$$$ integers $$$d_1, d_2, \\ldots, d_{n-1}$$$ ($$$0 \\le d_i \\le 10^9$$$) — the time taken to travel from the $$$i$$$-th to the $$$(i+1)$$$-th traffic light."]], "output_specification": [["Output a single integer — the minimum possible amount of time Harsh will spend driving."]], "sample_test_input": ["5 10\n4 2\n7 3\n3 6\n5 2\n8 0\n1 2 3 4\n"], "sample_test_output": ["11\n"], "note": [["In the first example, Harsh can do the following:"], []]}
{"title": ["F. Edge Queries"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["You need to answer $$$q$$$ queries."], ["For each query, you will be given node $$$a$$$ and node $$$b$$$. Out of all the edges that belong to any simple path from $$$a$$$ to $$$b$$$, count the number of edges such that if you remove that edge, $$$a$$$ and $$$b$$$ are reachable from each other."]], "input_specification": [["The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le m \\le \\min$$$($$$2 \\cdot 10^5$$$, $$$(n \\cdot (n-1))/2$$$)) — the total number of nodes and edges in the graph, respectively."], ["The next $$$m$$$ lines contain two integers $$$u$$$ and $$$v$$$ ($$$1 \\le$$$ $$$u$$$, $$$v$$$ $$$\\le n$$$, $$$u \\neq v$$$) — describing an edge, implying that nodes $$$u$$$ and $$$v$$$ are connected to each other."], ["It is guaranteed that there is at most one edge between any pair of vertices in the graph and the given graph is connected."], ["The next line contains a single integer $$$q$$$ ($$$1 \\le q \\le 2 \\cdot 10^5$$$) — the number of queries."], ["Then $$$q$$$ lines follow, each representing a query. Each query contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le$$$ $$$a$$$, $$$b$$$ $$$\\le n$$$)."]], "output_specification": [["For each query, output a single integer — answer to the query."]], "sample_test_input": ["10 11\n1 2\n2 3\n3 4\n4 5\n5 3\n2 7\n7 9\n9 10\n10 6\n6 7\n1 8\n5\n1 4\n5 10\n3 5\n2 8\n7 10\n"], "sample_test_output": ["3\n7\n3\n0\n4\n"], "note": [["The graph in the first sample is : "], [], ["The first query is $$$(1, 4)$$$. There are $$$5$$$ total edges that belong to any simple path from $$$1$$$ to $$$4$$$. Edges $$$(3, 4), (4, 5), (5, 3)$$$ will be counted in the answer to the query."], ["The fourth query is $$$(2, 8)$$$. There is only one simple path from $$$2$$$ to $$$8$$$, thus none of the edges will be counted in the answer to the query."]]}
{"title": ["G2. Subsequence Addition (Hard Version)"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Initially, array $$$a$$$ contains just the number $$$1$$$. You can perform several operations in order to change the array. In an operation, you can select some subsequence$$$^{\\dagger}$$$ of $$$a$$$ and add into $$$a$$$ an element equal to the sum of all elements of the subsequence. "], ["You are given a final array $$$c$$$. Check if $$$c$$$ can be obtained from the initial array $$$a$$$ by performing some number (possibly 0) of operations on the initial array."], ["$$$^{\\dagger}$$$ A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly zero, but not all) elements. In other words, select $$$k$$$ ($$$1 \\leq k \\leq |a|$$$) distinct indices $$$i_1, i_2, \\dots, i_k$$$ and insert anywhere into $$$a$$$ a new element with the value equal to $$$a_{i_1} + a_{i_2} + \\dots + a_{i_k}$$$."], []], "input_specification": [["The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of the test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)  — the number of elements the final array $$$c$$$ should have."], ["The second line of each test case contains $$$n$$$ space-separated integers $$$c_i$$$ ($$$1 \\leq c_i \\leq 2 \\cdot 10^5$$$)  — the elements of the final array $$$c$$$ that should be obtained from the initial array $$$a$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case, output \"", "YES", "\" (without quotes) if such a sequence of operations exists, and \"", "NO", "\" (without quotes) otherwise."], ["You can output the answer in any case (for example, the strings \"", "yEs", "\", \"", "yes", "\", \"", "Yes", "\" and \"", "YES", "\" will be recognized as a positive answer)."]], "sample_test_input": ["6", "1", "1", "1", "2", "5", "5 1 3 2 1", "5", "7 1 5 2 1", "3", "1 1 1", "5", "1 1 4 2 1"], "sample_test_output": ["YES\nNO\nYES\nNO\nYES\nYES\n"], "note": [["For the first test case, the initial array $$$a$$$ is already equal to $$$[1]$$$, so the answer is \"", "YES", "\"."], ["For the second test case, performing any amount of operations will change $$$a$$$ to an array of size at least two which doesn't only have the element $$$2$$$, thus obtaining the array $$$[2]$$$ is impossible and the answer is \"", "NO", "\"."], ["For the third test case, we can perform the following operations in order to obtain the final given array $$$c$$$:"]]}
{"title": ["C. Helping the Nature"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There are $$$n$$$ trees growing near the path, the current levels of moisture of each tree are denoted by the array $$$a_1, a_2, \\dots, a_n$$$. Leon has learned three abilities which will help him to dry and water the soil."], [], ["Leon wants to know the minimum number of actions he needs to perform to make the moisture of each tree equal to $$$0$$$."]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$)  — the number of test cases. The description of $$$t$$$ test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 200\\,000$$$)."], ["The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-10^9 \\leq a_i \\leq 10^9$$$) — the initial levels of trees moisture. "], ["It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$200\\,000$$$."]], "output_specification": [["For each test case output a single integer — the minimum number of actions. It can be shown that the answer exists."]], "sample_test_input": ["4\n3\n-2 -2 -2\n3\n10 4 7\n4\n4 -4 4 -4\n5\n1 -2 3 -4 5\n"], "sample_test_output": ["2\n13\n36\n33\n"], "note": [["In the first test case it's enough to apply the operation of adding $$$1$$$ to the whole array $$$2$$$ times. "], ["In the second test case you can apply the operation of decreasing $$$4$$$ times on the prefix of length $$$3$$$ and get an array $$$6, 0, 3$$$. "], ["After that apply the operation of decreasing $$$6$$$ times on the prefix of length $$$1$$$ and $$$3$$$ times on the suffix of length $$$1$$$. In total, the number of actions will be $$$4 + 6 + 3 = 13$$$. It can be shown that it's impossible to perform less actions to get the required array, so the answer is $$$13$$$. "]]}
{"title": ["F. Good Pairs "], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A pair $$$(l,r)$$$ is ", "good", " if there exists a sequence of indices $$$i_1, i_2, \\dots, i_m$$$ such that "], [], ["Find the number of pairs $$$(l,r)$$$ ($$$1 \\leq l \\leq r \\leq n$$$) that are ", "good", "."]], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) — the number of test cases. The description of the test cases follows."], ["The first line of each test case contains two space-separated integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 5 \\cdot 10^5$$$; $$$0 \\leq k \\leq 10^5$$$) — the length of the array $$$a$$$ and the integer $$$k$$$."], ["The second line of each test case contains $$$n$$$ space-separated integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1 \\leq a_i \\leq 10^5$$$) — representing the array $$$a$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5 \\cdot 10^5$$$."]], "output_specification": [["For each test case, print the number of ", "good", " pairs."]], "sample_test_input": ["4", "3 0", "1 1 1", "4 2", "4 8 6 8", "6 4", "7 2 5 8 3 8", "20 23", "110 57 98 14 20 1 60 82 108 37 82 73 8 46 38 35 106 115 58 112"], "sample_test_output": ["6\n9\n18\n92\n"], "note": [["In the first test case, ", "good", " pairs are $$$(1,1)$$$, $$$(1,2)$$$, $$$(1,3)$$$, $$$(2,2)$$$, $$$(2,3)$$$, and $$$(3,3)$$$."], ["In the second test case, ", "good", " pairs are $$$(1,1)$$$, $$$(1,3)$$$, $$$(1,4)$$$, $$$(2,2)$$$, $$$(2,3)$$$, $$$(2,4)$$$, $$$(3,3)$$$, $$$(3,4)$$$ and $$$(4,4)$$$. Pair $$$(1,4)$$$ is ", "good", " because there exists a sequence of indices $$$1, 3, 4$$$ which satisfy the given conditions."]]}
{"title": ["D. GCD Queries "], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There is a secret permutation $$$p$$$ of $$$[0,1,2,\\ldots,n-1]$$$. Your task is to find $$$2$$$ indices $$$x$$$ and $$$y$$$ ($$$1 \\leq x, y \\leq n$$$, possibly $$$x=y$$$) such that $$$p_x=0$$$ or $$$p_y=0$$$. In order to find it, you are allowed to ask ", "at most", " $$$2n$$$ queries."], ["In one query, you give two integers $$$i$$$ and $$$j$$$ ($$$1 \\leq i, j \\leq n$$$, $$$i \\neq j$$$) and receive the value of $$$\\gcd(p_i,p_j)^\\dagger$$$."], ["Note that the permutation $$$p$$$ is fixed ", "before", " any queries are made and does not depend on the queries."], ["$$$^\\dagger$$$ $$$\\gcd(x, y)$$$ denotes the ", "greatest common divisor (GCD)", " of integers $$$x$$$ and $$$y$$$. Note that $$$\\gcd(x,0)=\\gcd(0,x)=x$$$ for all positive integers $$$x$$$."], []], "input_specification": [["Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$). The description of the test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^4$$$)."], ["After reading the integer $$$n$$$ for each test case, you should begin the interaction."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^4$$$."]], "output_specification": [], "sample_test_input": ["2\n2\n\n1\n\n1\n5\n\n2\n\n4\n\n1\n"], "sample_test_output": ["\n\n? 1 2\n\n! 1 2\n\n\n? 1 2\n\n? 2 3\n\n! 3 3\n\n"], "note": [["In the first test, the interaction proceeds as follows."], [], ["Note that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction."]]}
{"title": ["E. Serega the Pirate"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A puzzle is a table of $$$n$$$ rows and $$$m$$$ columns, whose cells contain each number from $$$1$$$ to $$$n \\cdot m$$$ exactly once."], ["To solve a puzzle, you have to find a sequence of cells in the table, such that any two consecutive cells are adjacent by the side in the table. The sequence can have arbitrary length and should visit each cell one or more times. For a cell containing the number $$$i$$$, denote the position of the first occurrence of this cell in the sequence as $$$t_i$$$. The sequence solves the puzzle, if $$$t_1 < t_2 < \\dots < t_{nm}$$$. In other words, the cell with number $$$x$$$ should be first visited before the cell with number $$$x + 1$$$ for each $$$x$$$."], ["Let's call a puzzle solvable, if there exists at least one suitable sequence."], ["In one move Serega can choose two arbitrary cells in the table (not necessarily adjacent by the side) and swap their numbers. He would like to know the minimum number of moves to make his puzzle solvable, but he is too impatient. Thus, please tell if the minimum number of moves is $$$0$$$, $$$1$$$, or at least $$$2$$$. In the case, where $$$1$$$ move is required, please also find the number of suitable cell pairs to swap."], []], "input_specification": [["In the first line there are two whole positive numbers $$$n, m$$$ ($$$1 \\leq n\\cdot m \\leq 400\\,000$$$) — table dimensions."], ["In the next $$$n$$$ lines there are $$$m$$$ integer numbers $$$a_{i1}, a_{i2}, \\dots, a_{im}$$$ ($$$1 \\le a_{ij} \\le nm$$$). "], ["It is guaranteed that every number from $$$1$$$ to $$$nm$$$ occurs exactly once in the table."]], "output_specification": [["Let $$$a$$$ be the minimum number of moves to make the puzzle solvable."], ["If $$$a = 0$$$, print $$$0$$$."], ["If $$$a = 1$$$, print $$$1$$$ and the number of valid swaps."], ["If $$$a \\ge 2$$$, print $$$2$$$. "]], "sample_test_input": ["3 3\n2 1 3\n6 7 4\n9 8 5\n"], "sample_test_output": ["0\n"], "note": [["In the first example the sequence $$$(1, 2), (1, 1), (1, 2), (1, 3), (2, 3), (3, 3)$$$, $$$(2, 3), (1, 3), (1, 2), (1, 1), (2, 1), (2, 2), (3, 2), (3, 1)$$$ solves the puzzle, so the answer is $$$0$$$."], ["The puzzle in the second example can't be solved, but it's solvable after any of three swaps of cells with values $$$(1, 5), (1, 6), (2, 6)$$$. "], ["The puzzle from the third example requires at least two swaps, so the answer is $$$2$$$."]]}
{"title": ["E. Tree Sum"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You are given a positive integer $$$n$$$. There are $$$n^{n-2} \\cdot 2^{n-1}$$$ distinct$$$^\\dagger$$$ edge-weighted trees with $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$ such that each edge is either $$$1$$$ or $$$-1$$$. Your task is to find the sum of $$$d(1,n)^\\ddagger$$$ of all such trees that are good. Since the answer can be quite large, you only need to find it modulo $$$998\\,244\\,353$$$."], ["$$$^\\dagger$$$ Two trees are considered to be distinct if either: "], [], ["Note that by ", "Cayley's formula", ", the number of trees on $$$n$$$ labeled vertices is $$$n^{n-2}$$$. Since we have $$$n-1$$$ edges, there are $$$2^{n-1}$$$ possible assignment of weights(weight can either be $$$1$$$ or $$$-1$$$). That is why total number of distinct edge-weighted tree is $$$n^{n-2} \\cdot 2^{n-1}$$$."], ["$$$^\\ddagger$$$ $$$d(u,v)$$$ denotes the sum of the weight of all edges on the unique simple path from $$$u$$$ to $$$v$$$."]], "input_specification": [["The first and only line of input contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 5 \\cdot 10^5$$$)."]], "output_specification": [["The only line of output should contain a single integer, the required answer, modulo $$$998\\,244\\,353$$$."]], "sample_test_input": ["2\n"], "sample_test_output": ["998244352\n"], "note": [["In the first test case, there is only $$$1$$$ distinct ", "good", " tree. The value of $$$d(1,2)$$$ for that tree is $$$-1$$$, which is $$$998\\,244\\,352$$$ under modulo $$$998\\,244\\,353$$$."], ["In the second test case, the value of $$$d(1,1)$$$ for any tree is $$$0$$$, so the answer is $$$0$$$."], ["In the third test case, there are $$$16$$$ distinct ", "good", " trees. The value of $$$d(1,4)$$$ is: "], []]}
{"title": ["F. Puzzle"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["More formally, let's number rows $$$1$$$ to $$$2$$$ from top to bottom, and columns $$$1$$$ to $$$n$$$ from left to right. Also, let's denote a cell in row $$$x$$$ and column $$$y$$$ as $$$(x, y)$$$. We consider cells $$$(x_1, y_1)$$$ and $$$(x_2, y_2)$$$ neighboring if $$$|x_1 - x_2| + |y_1 - y_2| = 1$$$."], ["Alice doesn't like the way in which the cells are currently arranged, so she came up with her own arrangement, with which she wants to gift the puzzle to Ibragim. Since you are her smartest friend, she asked you to help her find the minimal possible number of operations in which she can get the desired arrangement. Find this number, or determine that it's not possible to get the new arrangement."], []], "input_specification": [["The first line contains an integer $$$n$$$ ($$$1 \\leq n \\leq 200\\,000$$$) — the number of columns in the puzzle."], ["Following two lines describe the current arrangement on the puzzle. Each line contains $$$n$$$ integers, every one of which is either $$$0$$$ or $$$1$$$."], ["The last two lines describe Alice's desired arrangement in the same format."]], "output_specification": [["If it is possible to get the desired arrangement, print the minimal possible number of steps, otherwise print $$$-1$$$."]], "sample_test_input": ["5\n0 1 0 1 0\n1 1 0 0 1\n1 0 1 0 1\n0 0 1 1 0\n"], "sample_test_output": ["5\n"], "note": [["In the first example the following sequence of swaps will suffice: "], [], ["It can be shown that $$$5$$$ is the minimal possible answer in this case."]]}
{"title": ["G. Unequal Adjacent Elements"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Find any permutation $$$p$$$ of $$$[1,2,\\dots,n]$$$ such that:"], [], ["Or report that no such permutation exists."]], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) — the number of test cases. The description of the test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$3 \\leq n \\leq 3 \\cdot 10^5$$$) — the length of the array $$$a$$$."], ["The second line of each test case contains $$$n$$$ space-separated integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — representing the array $$$a$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$."]], "output_specification": [["For each test case, output \"", "NO", "\" if no such permutation exists, otherwise output \"", "YES", "\" in the first line and print the permutation $$$p$$$ in the next line."], ["In case there are multiple permutations, print any one of them."], ["You can output \"", "YES", "\" and \"", "NO", "\" in any case (for example, the strings \"", "yEs", "\", \"", "yes", "\", \"", "Yes", "\" and \"", "YES", "\" will be recognized as a positive response)."]], "sample_test_input": ["4", "3", "1 2 1", "4", "1 2 3 4", "3", "1 1 1", "7", "1 2 1 1 3 1 4"], "sample_test_output": ["YES\n1 2 3\nYES\n3 1 4 2\nNO\nYES\n1 2 3 5 4 7 6\n"], "note": [["In the first test case, $$$p=[1,2,3]$$$ is the only permutation of $$$[1,2,3]$$$ that satisfy the given constraints."], ["In the second test case, $$$[1,3,2,4]$$$, $$$[2,1,4,3]$$$ and some other permutations are also acceptable."], ["In the third test case, it can be proved that there does not exist any permutation of $$$[1,2,3]$$$ satisfying the given constraints."]]}
{"title": ["D. River Locks"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The locks system is built in a way to immediately transfer all water exceeding the volume of the lock $$$i$$$ to the lock $$$i + 1$$$. If the lock $$$i + 1$$$ is also full, water will be transferred further. Water exceeding the volume of the last lock pours out to the river. "], [], ["Note that the volume of the $$$i$$$-th lock may be greater than the volume of the $$$i + 1$$$-th lock."], ["To make all locks work, you need to completely fill each one of them. The mayor of Divanovo is interested in $$$q$$$ independent queries. For each query, suppose that initially all locks are empty and all pipes are closed. Then, some pipes are opened simultaneously. For the $$$j$$$-th query the mayor asks you to calculate the minimum number of pipes to open so that all locks are filled no later than after $$$t_j$$$ seconds."], ["Please help the mayor to solve this tricky problem and answer his queries. "]], "input_specification": [["The first lines contains one integer $$$n$$$ ($$$1 \\le n \\le 200\\,000$$$) — the number of locks. "], ["The second lines contains $$$n$$$ integers $$$v_1, v_2, \\dots, v_n$$$ ($$$1 \\le v_i \\le 10^9$$$)) — volumes of the locks. "], ["The third line contains one integer $$$q$$$ ($$$1 \\le q \\le 200\\,000$$$) — the number of queries. "], ["Each of the next $$$q$$$ lines contains one integer $$$t_j$$$ ($$$1 \\le t_j \\le 10^9$$$) — the number of seconds you have to fill all the locks in the query $$$j$$$. "]], "output_specification": [["Print $$$q$$$ integers. The $$$j$$$-th of them should be equal to the minimum number of pipes to turn on so that after $$$t_j$$$ seconds all of the locks are filled. If it is impossible to fill all of the locks in given time, print $$$-1$$$. "]], "sample_test_input": ["5\n4 1 5 4 1\n6\n1\n6\n2\n3\n4\n5\n"], "sample_test_output": ["-1\n3\n-1\n-1\n4\n3\n"], "note": [["There are $$$6$$$ queries in the first example test. "], ["In the queries $$$1, 3, 4$$$ the answer is $$$-1$$$. We need to wait $$$4$$$ seconds to fill the first lock even if we open all the pipes. "], ["In the sixth query we can open pipes in locks $$$1$$$, $$$3$$$, and $$$4$$$. After $$$4$$$ seconds the locks $$$1$$$ and $$$4$$$ are full. In the following $$$1$$$ second $$$1$$$ liter of water is transferred to the locks $$$2$$$ and $$$5$$$. The lock $$$3$$$ is filled by its own pipe. "], ["Similarly, in the second query one can open pipes in locks $$$1$$$, $$$3$$$, and $$$4$$$."], ["In the fifth query one can open pipes $$$1, 2, 3, 4$$$. "]]}
{"title": ["A. Cookies"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains the only integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") — the number of cookie bags Anna and Maria have. The second line contains ", "n", " integers ", "a", "i", " (", "1 ≤ ", "a", "i", " ≤ 100", ") — the number of cookies in the ", "i", "-th bag."]], "output_specification": [["Print in the only line the only number — the sought number of ways. If there are no such ways print 0."]], "sample_test_input": ["1", "1"], "sample_test_output": ["1"], "note": [["In the first sample Olga should take the only bag so that the twins ended up with the even number of cookies."], ["In the second sample Olga can take any of five bags with two cookies or any of three bags with four cookies — ", "5 + 3 = 8", " ways in total."], ["In the third sample, no matter which bag with two cookies Olga chooses, the twins are left with ", "2 * 9 + 99 = 117", " cookies. Thus, Olga has only one option: to take the bag with ", "99", " cookies."]]}
{"title": ["A. Hexagonal numbers"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The only line of input contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ")."]], "output_specification": [["Output the ", "n", "-th hexagonal number."]], "sample_test_input": ["2"], "sample_test_output": ["6"], "note": []}
{"title": ["C. Games with Rectangle"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Nobody wins the game — Anna and Maria simply play until they have done ", "k", " moves in total. Count the number of different ways to play this game."], []], "input_specification": [["The first and only line contains three integers: ", "n", ", ", "m", ", ", "k", " (", "1 ≤ ", "n", ", ", "m", ", ", "k", " ≤ 1000", ")."]], "output_specification": [["Print the single number — the number of the ways to play the game. As this number can be very big, print the value modulo ", "1000000007", " (", "10", "9", " + 7", ")."]], "sample_test_input": ["3 3 1"], "sample_test_output": ["1"], "note": [["Two ways to play the game are considered different if the final pictures are different. In other words, if one way contains a rectangle that is not contained in the other way."], ["In the first sample Anna, who performs her first and only move, has only one possible action plan — insert a ", "1 × 1", " square inside the given ", "3 × 3", " square."], ["In the second sample Anna has as much as 9 variants: 4 ways to paint a ", "1 × 1", " square, 2 ways to insert a ", "1 × 2", " rectangle vertically, 2 more ways to insert it horizontally and one more way is to insert a ", "2 × 2", " square."]]}
{"title": ["D. Numbers"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains an integer ", "n", " — how many numbers Anna had (", "3 ≤ ", "n", " ≤ 10", "5", "). The next line contains those numbers, separated by a space. All numbers are integers and belong to the range from ", "1", " to ", "10", "9", "."]], "output_specification": [["Print the single line \"", "YES", "\" (without the quotes), if Anna could have completed the task correctly using all those numbers (", "using all of them is necessary", "). If Anna couldn't have fulfilled the task, no matter how hard she would try, print \"", "NO", "\" (without the quotes)."]], "sample_test_input": ["4", "1 2 3 2"], "sample_test_output": ["YES"], "note": []}
{"title": ["B. Students and Shoelaces"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["To restore order, Anna and Maria do the following. First, for each student Anna finds out what other students he is tied to. If a student is tied to exactly one other student, Anna reprimands him. Then Maria gathers in a single group ", "all", " the students who have been just reprimanded. She kicks them out from the club. This group of students immediately leaves the club. These students takes with them the laces that used to tie them. Then again for every student Anna finds out how many other students he is tied to and so on. And they do so until Anna can reprimand at least one student."], ["Determine how many groups of students will be kicked out of the club."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " — the initial number of students and laces (", "). The students are numbered from ", "1", " to ", "n", ", and the laces are numbered from ", "1", " to ", "m", ". Next ", "m", " lines each contain two integers ", "a", " and ", "b", " — the numbers of students tied by the ", "i", "-th lace (", "1 ≤ ", "a", ", ", "b", " ≤ ", "n", ", ", "a", " ≠ ", "b", "). It is guaranteed that no two students are tied with more than one lace. No lace ties a student to himself."]], "output_specification": [["Print the single number — the number of groups of students that will be kicked out from the club."]], "sample_test_input": ["3 3", "1 2", "2 3", "3 1"], "sample_test_output": ["0"], "note": [["In the first sample Anna and Maria won't kick out any group of students — in the initial position every student is tied to two other students and Anna won't be able to reprimand anyone."], ["In the second sample four students are tied in a chain and two more are running by themselves. First Anna and Maria kick out the two students from both ends of the chain (1 and 4), then — two other students from the chain (2 and 3). At that the students who are running by themselves will stay in the club."], ["In the third sample Anna and Maria will momentarily kick out all students except for the fourth one and the process stops at that point. The correct answer is one."]]}
{"title": ["E. Birthday"], "time_limit": ["time limit per test", "4 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Anna has many guests and she wants everyone to get at least one banana piece. That's why she told Maria to make the total number of banana pieces maximum. It's not a problem if some banana pieces end up on the same cake piece — the key is to make the maximum number of banana pieces. Determine what result Maria will achieve."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "k", " — the number of banana circles and the number of cuts Maria should perform (", "1 ≤ ", "n", " ≤ 1000", ", ", "1 ≤ ", "k", " ≤ 10", "5", "). Next ", "n", " lines contain the positions and sizes of the banana circles (all banana circles are round). On the cake the Cartesian coordinate system is defined. Each line contains three integers ", "x", ", ", "y", " and ", "r", " — the coordinates of the center of the corresponding banana piece and its radius (", " - 1000 ≤ ", "x", ", ", "y", " ≤ 1000", ", ", "1 ≤ ", "r", " ≤ 1000", ")."], ["It is guaranteed that the banana circles do not intersect, do not touch each other and do not overlap with each other."], ["Pretest 10 is big test with ", "n", " = ", "k", " = 1000", "."]], "output_specification": [["Print the only integer — the largest number of banana pieces that Maria can get after she performs the ", "k", " straight-line cuts."], ["Please do not use the ", "%lld", " specificator to read or write 64-bit integers in C++. It is preferred to use the ", "cin", ", ", "cout", " streams or the ", "%I64d", " specificator."]], "sample_test_input": ["1 1", "0 0 1"], "sample_test_output": ["2"], "note": []}
{"title": ["B. String"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["String ", "x", " is lexicographically less than string ", "y", ", if either ", "x", " is a prefix of ", "y", " (and ", "x", " ≠ ", "y", "), or there exists such ", "i", " (", "1 ≤ ", "i", " ≤ ", "min", "(|", "x", "|, |", "y", "|)", "), that ", "x", "i", " < ", "y", "i", ", and for any ", "j", " (", "1 ≤ ", "j", " < ", "i", ") ", "x", "j", " = ", "y", "j", ". Here ", "|", "a", "|", " denotes the length of the string ", "a", ". The lexicographic comparison of strings is implemented by operator < in modern programming languages​​."], ["The teacher gave Anna and Maria homework. She gave them a string of length ", "n", ". They should write out all substrings of the given string, including the whole initial string, and the equal substrings (for example, one should write out the following substrings from the string \"", "aab", "\": \"", "a", "\", \"", "a", "\", \"", "aa", "\", \"", "ab", "\", \"", "aab", "\", \"", "b", "\"). The resulting strings should be sorted in the lexicographical order. The cunning teacher doesn't want to check all these strings. That's why she said to find only the ", "k", "-th string from the list. Help Anna and Maria do the homework."], []], "input_specification": [["The first line contains a non-empty string that only consists of small Latin letters (\"", "a", "\"-\"", "z", "\"), whose length does not exceed ", "10", "5", ". The second line contains the only integer ", "k", " (", "1 ≤ ", "k", " ≤ 10", "5", ")."]], "output_specification": [["Print the string Anna and Maria need — the ", "k", "-th (in the lexicographical order) substring of the given string. If the total number of substrings is less than ", "k", ", print a string saying \"", "No such line.", "\" (without the quotes)."]], "sample_test_input": ["aa", "2"], "sample_test_output": ["a"], "note": [["In the second sample before string \"", "bc", "\" follow strings \"", "a", "\", \"", "ab", "\", \"", "abc", "\", \"", "b", "\"."]]}
{"title": ["A. Statues"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Anna is present on the board as a figurant (she stands still and never moves), and Maria has been actively involved in the game. Her goal is — to come to Anna's square. Maria and statues move in turn, Maria moves first. During one move Maria can go to any adjacent on the side or diagonal cell in which there is no statue, or she can stay in the cell where she is. The statues during their move must go one square down simultaneously, and those statues that were in the bottom row fall from the board and are no longer appeared."], ["At that moment, when one of the statues is in the cell in which the Maria is, the statues are declared winners. At the moment when Maria comes into the cell where Anna has been waiting, Maria is declared the winner."], ["Obviously, nothing depends on the statues, so it all depends on Maria. Determine who will win, if Maria does not make a strategic error."], []], "input_specification": [["You are given the ", "8", " strings whose length equals ", "8", ", describing the initial position on the board. The first line represents the top row of the board, the next one — for the second from the top, and so on, the last line represents the bottom row. Each character string matches a single cell board in the appropriate row, and the characters are in the same manner as that of the corresponding cell. If the cell is empty, the corresponding character is \"", ".", "\". If a cell has Maria, then it is represented by character \"", "M", "\". If a cell has Anna, it is represented by the character \"", "A", "\". If a cell has a statue, then the cell is represented by character \"", "S", "\"."], ["It is guaranteed that the last character of the first row is always \"", "A", "\", the first character of the last line is always \"", "M", "\". The remaining characters are \"", ".", "\" or \"", "S", "\"."]], "output_specification": [["If Maria wins, print string \"", "WIN", "\". If the statues win, print string \"", "LOSE", "\"."]], "sample_test_input": [".......A", "........", "........", "........", "........", "........", "........", "M......."], "sample_test_output": ["WIN"], "note": []}
{"title": ["B. Gnikool Ssalg"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The only line of input contains a string between ", "1", " and ", "100", " characters long. Each character of the string has ASCII-code between ", "33", " (exclamation mark) and ", "126", " (tilde), inclusive."]], "output_specification": [["Output the characters of this string in reverse order."]], "sample_test_input": ["secrofedoc"], "sample_test_output": ["codeforces"], "note": []}
{"title": ["C. Decimal sum"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of the input contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") — the size of the array. Next ", "n", " lines contain the elements of the array, one per line. Each element is an integer between ", "1", " and ", "100", ", inclusive."]], "output_specification": [["Output the sum of the elements of the array."]], "sample_test_input": ["5", "1", "2", "3", "4", "5"], "sample_test_output": ["15"], "note": []}
{"title": ["D. Exponentiation"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["Input data contains numbers ", "a", ", ", "b", " and ", "c", ", one number per line. Each number is an integer between ", "1", " and ", "100", ", inclusive."]], "output_specification": [["Output ", "a", "b", " mod ", "c", "."]], "sample_test_input": ["2", "5", "40"], "sample_test_output": ["32"], "note": []}
{"title": ["D. Frames"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Let's define a rectangle's frame as the set of squares ", "inside", " the rectangle that share at least one side with its border."], ["A little later Vasya found a sheet of paper of exactly the same size and couldn't guess whether it is the same sheet of paper or a different one. So, he asked you to check whether the sheet of paper he had found contains two painted frames and nothing besides them."], ["Please note that the frames painted by Vasya can arbitrarily intersect, overlap or even completely coincide."], ["The coordinates on the sheet of paper are introduced in such a way that the ", "X", " axis goes from top to bottom, the ", "x", " coordinates of the squares' numbers take values from ", "1", " to ", "n", " and the ", "Y", " axis goes from the left to the right and the ", "y", " coordinates of the squares' numbers take values from ", "1", " to ", "m", "."], []], "input_specification": [["The first input line contains two integers ", "n", " and ", "m", " (", "3 ≤ ", "n", ", ", "m", " ≤ 1000", ") — the sizes of the sheet of paper Vasya found. Next ", "n", " lines, each consisting of ", "m", " symbols \"", ".", "\" (dot) and \"", "#", "\" (number sign), describe the found sheet of paper. The symbol \"", "#", "\" represents a hatched square and the symbol \"", ".", "\" represents a non-hatched square."]], "output_specification": [["In the first line print the single word \"", "YES", "\" or \"", "NO", "\", meaning whether it is true that the found sheet of paper has two frames painted on it. If the answer is positive, then print in the second line ", "4", " integers: the coordinates of the upper left and lower right corners of the first frame. In the third line print ", "4", " integers: the coordinates of the upper left and the lower right corners of the second frame. If there are multiple answers, print any of them."]], "sample_test_input": ["4 5", "#####", "#.#.#", "###.#", "#####"], "sample_test_output": ["YES", "1 1 3 3", "1 1 4 5"], "note": [["In the first sample there are two frames on the picture. The first one is:"], [], ["The second one is:"]]}
{"title": ["A. A + B"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["Two lines of input data contain integers ", "A", " and ", "B", " (", "1 ≤ ", "A", ", ", "B", " ≤ 10", "5", ")."]], "output_specification": [["Output ", "A", " + ", "B", " without leading zeros."]], "sample_test_input": ["12", "3"], "sample_test_output": ["15"], "note": [["The code provided in the post about the round doesn't solve the task."]]}
{"title": ["B. Binary notation"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The only line of input data contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "6", ")."]], "output_specification": [["Output the binary notation of ", "n", " (without any leading zeros)."]], "sample_test_input": ["5"], "sample_test_output": ["101"], "note": [["In the first example ", "5 = 1 * 2", "2", " + 0 * 2", "1", " + 1 * 2", "0", "."]]}
{"title": ["E. Garden"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For each garden square we know number ", "a", "i", "j", " that represents the number of flowers that grow in the square with coordinates ", "(", "i", ", ", "j", ")", ". When a square is covered with concrete, all flowers that grow in the square die."], ["Vasya wants to cover some squares with concrete so that the following conditions were fulfilled: "], [], ["As Vasya has a rather large garden, he asks you to help him."]], "input_specification": [["The first input line contains three integers ", "n", ", ", "m", " and ", "k", " (", "1 ≤ ", "n", ", ", "m", " ≤ 100", ", ", "n", "·", "m", " ≤ 200", ", ", "1 ≤ ", "k", " ≤ ", "min", "(", "n", "·", "m", ", 7", ")) — the garden's sizes and the number of the important squares. Each of the next ", "n", " lines contains ", "m", " numbers ", "a", "i", "j", " (", "1 ≤ ", "a", "i", "j", " ≤ 1000", ") — the numbers of flowers in the squares. Next ", "k", " lines contain coordinates of important squares written as \"", "x", " ", "y", "\" (without quotes) (", "1 ≤ ", "x", " ≤ ", "n", ", ", "1 ≤ ", "y", " ≤ ", "m", "). The numbers written on one line are separated by spaces. It is guaranteed that all ", "k", " important squares have different coordinates."]], "output_specification": [["In the first line print the single integer — the minimum number of plants that die during the road construction. Then print ", "n", " lines each containing ", "m", " characters — the garden's plan. In this plan use character \"", "X", "\" (uppercase Latin letter X) to represent a concrete-covered square and use character \".\" (dot) for a square that isn't covered with concrete. If there are multiple solutions, print any of them."]], "sample_test_input": ["3 3 2", "1 2 3", "1 2 3", "1 2 3", "1 2", "3 3"], "sample_test_output": ["9", ".X.", ".X.", ".XX"], "note": []}
{"title": ["C. Caesar Cipher"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You are given the original message and the encryption key ", "k", ". Output the resulting cipher."], []], "input_specification": [["The first line of input contains the original message — a sequence uppercase Latin letters («", "A", "»-«", "Z", "»). The length of the message is from ", "1", " to ", "10", ", inclusive."], ["The second line contains an integer ", "k", " (", "0 ≤ ", "k", " ≤ 25", ")."]], "output_specification": [["Output the result of encryption."]], "sample_test_input": ["CODEFORCES", "5"], "sample_test_output": ["HTIJKTWHJX"], "note": []}
{"title": ["D. Lucky Segments"], "time_limit": ["time limit per test", "4 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petya has ", "n", " number segments ", "[", "l", "1", "; ", "r", "1", "]", ", ", "[", "l", "2", "; ", "r", "2", "]", ", ..., ", "[", "l", "n", "; ", "r", "n", "]", ". During one move Petya can take any segment (let it be segment number ", "i", ") and replace it with segment ", "[", "l", "i", " + 1; ", "r", "i", " + 1]", " or ", "[", "l", "i", " - 1; ", "r", "i", " - 1]", ". In other words, during one move Petya can shift any segment to the left or to the right by a unit distance. Petya calls a number ", "full", " if it belongs to each segment. That is, number ", "x", " is full if for any ", "i", " ", "(1 ≤ ", "i", " ≤ ", "n", ")", " the condition ", "l", "i", " ≤ ", "x", " ≤ ", "r", "i", " is fulfilled."], ["Petya makes no more than ", "k", " moves. After that he counts the quantity of full lucky numbers. Find the maximal quantity that he can get."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 10", "5", ", ", "1 ≤ ", "k", " ≤ 10", "18", ")", " — the number of segments and the maximum number of moves. Next ", "n", " lines contain pairs of integers ", "l", "i", " and ", "r", "i", " ", "(1 ≤ ", "l", "i", " ≤ ", "r", "i", " ≤ 10", "18", ")", "."], ["Please do not use the ", "%lld", " specificator to read or write 64-bit integers in С++. It is preferred to use the ", "%I64d", " specificator."]], "output_specification": [["Print on the single line the single number — the answer to the problem."]], "sample_test_input": ["4 7", "1 4", "6 9", "4 7", "3 5"], "sample_test_output": ["1"], "note": [["In the first sample Petya shifts the second segment by two units to the left (it turns into ", "[4; 7]", "), after that number ", "4", " becomes full."], ["In the second sample Petya shifts the first segment by two units to the right (it turns into ", "[42; 47]", "), and shifts the second segment by three units to the left (it turns into ", "[44; 71]", "), after that numbers ", "44", " and ", "47", " become full."]]}
{"title": ["E. Lucky Array"], "time_limit": ["time limit per test", "4 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petya has an array consisting of ", "n", " numbers. He wants to perform ", "m", " operations of two types: "], [], ["Petya has a list of all operations. The operations are such that after all additions the array won't have numbers that would exceed ", "10", "4", ". Help Petya write a program that would perform these operations."]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 10", "5", ") — the number of numbers in the array and the number of operations correspondingly. The second line contains ", "n", " positive integers, none of which exceeds ", "10", "4", " — those are the array numbers. Next ", "m", " lines contain operations, one per line. They correspond to the description given in the statement."], ["It is guaranteed that after all operations are fulfilled each number in the array will not exceed ", "10", "4", "."]], "output_specification": [["For each operation of the second type print the single number on the single line — the number of lucky numbers in the corresponding interval."]], "sample_test_input": ["3 6", "2 3 4", "count 1 3", "count 1 2", "add 1 3 2", "count 1 3", "add 2 3 3", "count 1 3"], "sample_test_output": ["1", "0", "1", "1"], "note": [["In the first sample after the first addition the array will look in the following manner:"], ["4 5 6"], ["After the second addition:"], ["4 8 9"], ["The second sample after the first addition:"], ["7 7 7 7"], ["After the second addition:"], ["7 47 47 7"]]}
{"title": ["A. Lucky Sum"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Let ", "next", "(", "x", ")", " be the minimum lucky number which is larger than or equals ", "x", ". Petya is interested what is the value of the expression ", "next", "(", "l", ") + ", "next", "(", "l", " + 1) + ... + ", "next", "(", "r", " - 1) + ", "next", "(", "r", ")", ". Help him solve this problem."], []], "input_specification": [["The single line contains two integers ", "l", " and ", "r", " (", "1 ≤ ", "l", " ≤ ", "r", " ≤ 10", "9", ") — the left and right interval limits."]], "output_specification": [["In the single line print the only number — the sum ", "next", "(", "l", ") + ", "next", "(", "l", " + 1) + ... + ", "next", "(", "r", " - 1) + ", "next", "(", "r", ")", "."], ["Please do not use the ", "%lld", " specificator to read or write 64-bit integers in C++. It is preferred to use the ", "cin", ", ", "cout", " streams or the ", "%I64d", " specificator."]], "sample_test_input": ["2 7"], "sample_test_output": ["33"], "note": [["In the first sample: ", "next", "(2) + ", "next", "(3) + ", "next", "(4) + ", "next", "(5) + ", "next", "(6) + ", "next", "(7) = 4 + 4 + 4 + 7 + 7 + 7 = 33"], ["In the second sample: ", "next", "(7) = 7"]]}
{"title": ["I. Luck is in Numbers"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [[], ["You have seen such digits on electronic clocks: seven segments are used to show digits. Each segment can either be colored or not. The colored segments form a digit. Vasya regards the digits as written in this very way and takes the right half of the ticket and puts it one the left one, so that the first digit coincides with the ", "n", " + 1", "-th one, the second digit coincides with the ", "n", " + 2", "-th one, ..., the ", "n", "-th digit coincides with the ", "2", "n", "-th one. For each pair of digits, put one on another, he counts the number of segments colored in both digits and summarizes the resulting numbers. The resulting value is called the ", "degree of luckiness", " of a ticket. For example, the degree of luckiness of ticket 03 equals four and the degree of luckiness of ticket 2345 equals six."], ["You are given the number of a ticket containing ", "2", "n", " digits. Your task is to find among the tickets whose number exceeds the number of this ticket but also consists of ", "2", "n", " digits such ticket, whose degree of luckiness exceeds the degrees of luckiness of the given ticket. Moreover, if there are several such tickets, you should only choose the one with the smallest number."]], "input_specification": [["The first line contains the number of the ticket that consists of ", "k", " characters (", "k", " = 2", "n", ", 1 ≤ ", "n", " ≤ 10", "5", "). "]], "output_specification": [["Print the number of the sought ticket or \"-1\" (without the quotes) if no such ticket exists."]], "sample_test_input": ["13"], "sample_test_output": ["20"], "note": []}
{"title": ["J. Minimum Sum"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [[], ["You should find two vectors from the set and determine which of their coordinates should be multiplied by ", "-1", " so that the absolute value of the sum of the resulting vectors was minimally possible. More formally, you should choose two vectors ", "v", "i", ", ", "v", "j", " (", "1 ≤ ", "i", ", ", "j", " ≤ ", "n", ", ", "i", " ≠ ", "j", ") and two numbers ", "k", "1", ", ", "k", "2", " (", "1 ≤ ", "k", "1", ", ", "k", "2", " ≤ 4", "), so that the value of the expression ", "|", "v", "i", "k", "1", " + ", "v", "j", "k", "2", "|", " were minimum."]], "input_specification": [["The first line contains a single integer ", "n", " (", "2 ≤ ", "n", " ≤ 10", "5", "). Then ", "n", " lines contain vectors as pairs of integers \"", "x", "i", " ", "y", "i", "\" (", " - 10000 ≤ ", "x", "i", ", ", "y", "i", " ≤ 10000", "), one pair per line."]], "output_specification": [["Print on the first line four space-separated numbers \"", "i", " ", "k", "1", " ", "j", " ", "k", "2", "\" — the answer to the problem. If there are several variants the absolute value of whose sums is minimum, you can print any of them. "]], "sample_test_input": ["5", "-7 -3", "9 0", "-8 6", "7 -8", "4 -5"], "sample_test_output": ["3 2 4 2"], "note": [["A sum of two vectors ", "v", " = (", "x", "v", ", ", "y", "v", ")", " and ", "u", " = (", "x", "u", ", ", "y", "u", ")", " is vector ", "s", " = ", "v", " + ", "u", " = (", "x", "v", " + ", "x", "u", ", ", "y", "v", " + ", "y", "u", ")", "."], ["An absolute value of vector ", "v", " = (", "x", ", ", "y", ")", " is number ", ". "], ["In the second sample there are several valid answers, such as:"], ["(3 1 4 2), (3 1 4 4), (3 4 4 1), (3 4 4 3), (4 1 3 2), (4 1 3 4), (4 2 3 1)."]]}
{"title": ["G. Boom"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [["There are ", "n", " teams playing the game. Each team has two players. The purpose of the game is to explain the words to the teammate without using any words that contain the same root or that sound similarly. "], ["Player ", "j", " from team ", "i", " ", "(1 ≤ ", "i", " ≤ ", "n", ", 1 ≤ ", "j", " ≤ 2)", " is characterized by two numbers: ", "a", "ij", " and ", "b", "ij", ". The numbers correspondingly represent the skill of explaining and the skill of understanding this particular player has. "], ["Besides, ", "m", " cards are used for the game. Each card has a word written on it. The card number ", "k", " ", "(1 ≤ ", "k", " ≤ ", "m", ")", " is characterized by number ", "c", "k", " — the complexity of the word it contains."], ["Before the game starts the cards are put in a deck and shuffled. Then the teams play in turns like that: the 1-st player of the 1-st team, the 1-st player of the 2-nd team, ... , the 1-st player of the ", "n", "-th team, the 2-nd player of the 1-st team, ... , the 2-nd player of the ", "n", "-th team, the 1-st player of the 1-st team and so on."], ["Each turn continues for ", "t", " seconds. It goes like that: Initially the time for each turn is ", "t", ". While the time left to a player is more than 0, a player takes a card from the top of the deck and starts explaining the word it has to his teammate. The time needed for the ", "j", "-th player of the ", "i", "-th team to explain the word from the card ", "k", " to his teammate (the ", "q", "-th player of the ", "i", "-th team) equals ", "max", "(1, ", "c", "k", " - (", "a", "ij", " + ", "b", "iq", ") - ", "d", "ik", ")", " (if ", "j", " = 1, ", " then ", "q", " = 2, ", " else ", "q", " = 1", "). The value ", "d", "ik", " is the number of seconds the ", "i", "-th team has already spent explaining the word ", "k", " during the previous turns. Initially, all ", "d", "ik", " equal 0. If a team manages to guess the word before the end of the turn, then the time given above is substracted from the duration of the turn, the card containing the guessed word leaves the game, the team wins one point and the game continues. If the team doesn't manage to guess the word, then the card is put at the bottom of the deck, ", "d", "ik", " increases on the amount of time of the turn, spent on explaining the word. Thus, when this team gets the very same word, they start explaining it not from the beginning, but from the point where they stopped. The game ends when words from all ", "m", " cards are guessed correctly."], ["You are given ", "n", " teams and a deck of ", "m", " cards. You should determine for each team, how many points it will have by the end of the game and which words the team will have guessed."], []], "input_specification": [["The first line contains two integers ", "n", ", ", "t", " ", "(1 ≤ ", "n", ", ", "t", " ≤ 100)", ", which correspondingly denote the number of teams and a turn's duration."], ["Next ", "n", " lines of the input file contain four integers each: ", "a", "i", "1", ", ", "b", "i", "1", ", ", "a", "i", "2", ", ", "b", "i", "2", " ", "(1 ≤ ", "a", "ij", ", ", "b", "ij", " ≤ 100)", " — the skills of the first and the second player of the ", "i", "-th team. The teams are given in the order in which they play."], ["The next line of the input file contains integer ", "m", " ", "(1 ≤ ", "m", " ≤ 100)", " the number of cards."], ["Next ", "2", "m", " lines contain the cards' descriptions. Two lines describe each card. The first line of the description contains the word that consists of no more than 20 characters. The words only contain small Latin letters. The second line of the description contains an integer ", "c", "k", " (", "1 ≤ ", "c", "k", " ≤ 100", ") — the complexity of the word written on the ", "k", "-th card. The cards are listed in the order in which the lie in the deck from top to bottom. The words on all cards are different."]], "output_specification": [["Print ", "n", " lines. On the ", "i", "-th line first print number ", "s", "i", " the number of points the ", "i", "-th team wins. Then print ", "s", "i", " space-separated words — the words from the cards guessed by team ", "i", " in the order in which they were guessed."]], "sample_test_input": ["2 2", "1 1 1 1", "1 1 1 1", "3", "home", "1", "car", "1", "brother", "1"], "sample_test_output": ["2 home car ", "1 brother "], "note": []}
{"title": ["H. Brevity is Soul of Wit"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [["We can list many simple words consisting of many letters: \"information\", \"technologies\", \"university\", \"construction\", \"conservatoire\", \"refrigerator\", \"stopwatch\", \"windowsill\", \"electricity\", \"government\" and so on. Of course, we can continue listing those words ad infinitum. "], ["Fortunately, the solution for that problem has been found. To make our speech clear and brief, we should replace the initial words with those that resemble them but are much shorter. This idea hasn't been brought into life yet, that's why you are chosen to improve the situation. "], ["Let's consider the following formal model of transforming words: we shall assume that one can use ", "n", " words in a chat. For each words we shall introduce a notion of its shorter variant. We shall define ", "shorter variant", " of an arbitrary word ", "s", " as such word ", "t", ", that meets the following conditions:"], [], ["In other words, the word ", "t", " consists at least of one and at most of four characters that occur in the same order in the word ", "s", ". Note that those characters do not necessarily follow in ", "s", " immediately one after another. You are allowed not to shorten the initial word if its length does not exceed four characters."], ["You are given a list of ", "n", " different words. Your task is to find a set of their shortened variants. The shortened variants of all words from the list should be different."]], "input_specification": [["The first line of the input file contains the only integer ", "n", " ", "(1 ≤ ", "n", " ≤ 200)", ". Then ", "n", " lines contain a set of different non-empty words that consist of lowercase Latin letters. The length of each word does not exceed ", "10", " characters."]], "output_specification": [["If the solution exists, print in the output file exactly ", "n", " lines, where the ", "i", "-th line represents the shortened variant of the ", "i", "-th word from the initial set. If there are several variants to solve the problem, print any of them. If there is no solution, print ", "-1", "."]], "sample_test_input": ["6", "privet", "spasibo", "codeforces", "java", "marmelad", "normalno"], "sample_test_output": ["pret", "sps", "cdfs", "java", "mama", "norm"], "note": []}
{"title": ["F. Spiders"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [["A spider consists of ", "k", " beads tied together by ", "k", " - 1", " threads. Each thread connects two different beads, at that any pair of beads that make up a spider is either directly connected by a thread, or is connected via some chain of threads and beads."], ["Petya may glue spiders together directly gluing their beads. The length of each thread equals 1. The sizes of the beads can be neglected. That's why we can consider that gluing spiders happens by identifying some of the beads (see the picture). Besides, the construction resulting from the gluing process should also represent a spider, that is, it should have the given features. "], ["After Petya glues all spiders together, he measures the length of the resulting toy. The distance between a pair of beads is identified as the total length of the threads that connect these two beads. The length of the resulting construction is the largest distance between all pairs of beads. Petya wants to make the spider whose length is as much as possible."], [], []], "input_specification": [["The first input file line contains one integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") — the number of spiders. Next ", "n", " lines contain the descriptions of each spider: integer ", "n", "i", " (", "2 ≤ ", "n", "i", " ≤ 100", ") — the number of beads, then ", "n", "i", " - 1", " pairs of numbers denoting the numbers of the beads connected by threads. The beads that make up each spider are numbered from 1 to ", "n", "i", "."]], "output_specification": [["Print a single number — the length of the required construction."]], "sample_test_input": ["1", "3 1 2 2 3"], "sample_test_output": ["2"], "note": []}
{"title": ["E. Bertown roads"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["As there were more and more cars in the city, traffic jams started to pose real problems. To deal with them the government decided to make the traffic one-directional on all the roads, thus easing down the traffic. Your task is to determine whether there is a way to make the traffic one-directional so that there still is the possibility to get from any junction to any other one. If the answer is positive, you should also find one of the possible ways to orient the roads."], []], "input_specification": [["The first line contains two space-separated integers ", "n", " and ", "m", " (", "2 ≤ ", "n", " ≤ 10", "5", ", ", "n", " - 1 ≤ ", "m", " ≤ 3·10", "5", ") which represent the number of junctions and the roads in the town correspondingly. Then follow ", "m", " lines, each containing two numbers which describe the roads in the city. Each road is determined by two integers ", "a", "i", " and ", "b", "i", " (", "1 ≤ ", "a", "i", ", ", "b", "i", " ≤ ", "n", ", ", "a", "i", " ≠ ", "b", "i", ") — the numbers of junctions it connects."], ["It is guaranteed that one can get from any junction to any other one along the existing bidirectional roads. Each road connects different junctions, there is no more than one road between each pair of junctions."]], "output_specification": [["If there's no solution, print the single number ", "0", ". Otherwise, print ", "m", " lines each containing two integers ", "p", "i", " and ", "q", "i", " — each road's orientation. That is the traffic flow will move along a one-directional road from junction ", "p", "i", " to junction ", "q", "i", ". You can print the roads in any order. If there are several solutions to that problem, print any of them."]], "sample_test_input": ["6 8", "1 2", "2 3", "1 3", "4 5", "4 6", "5 6", "2 4", "3 5"], "sample_test_output": ["1 2", "2 3", "3 1", "4 5", "5 6", "6 4", "4 2", "3 5"], "note": []}
{"title": ["B. Very Interesting Game"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["If a number obtained by the concatenation (joining together) of strings ", "s", "1", " and ", "s", "2", " is divisible by ", "mod", ", then the second player wins. Otherwise the first player wins. You are given numbers ", "a", ", ", "b", ", ", "mod", ". Your task is to determine who wins if both players play in the optimal manner. If the first player wins, you are also required to find the lexicographically minimum winning move."], []], "input_specification": [["The first line contains three integers ", "a", ", ", "b", ", ", "mod", " (", "0 ≤ ", "a", ", ", "b", " ≤ 10", "9", ", ", "1 ≤ ", "mod", " ≤ 10", "7", ")."]], "output_specification": [["If the first player wins, print \"", "1", "\" and the lexicographically minimum string ", "s", "1", " he has to write to win. If the second player wins, print the single number \"", "2", "\"."]], "sample_test_input": ["1 10 7"], "sample_test_output": ["2"], "note": [["The lexical comparison of strings is performed by the < operator in modern programming languages. String ", "x", " is lexicographically less than string ", "y", " if exists such ", "i", " (", "1 ≤ ", "i", " ≤ 9", "), that ", "x", "i", " < ", "y", "i", ", and for any ", "j", " (", "1 ≤ ", "j", " < ", "i", ") ", "x", "j", " = ", "y", "j", ". These strings always have length 9."]]}
{"title": ["D. Caesar's Legions"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Note that all ", "n", "1", " + ", "n", "2", " warriors should be present at each arrangement. All footmen are considered indistinguishable among themselves. Similarly, all horsemen are considered indistinguishable among themselves."], []], "input_specification": [["The only line contains four space-separated integers ", "n", "1", ", ", "n", "2", ", ", "k", "1", ", ", "k", "2", " (", "1 ≤ ", "n", "1", ", ", "n", "2", " ≤ 100, 1 ≤ ", "k", "1", ", ", "k", "2", " ≤ 10", ") which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly."]], "output_specification": [["Print the number of beautiful arrangements of the army modulo ", "100000000", " ", "(10", "8", ")", ". That is, print the number of such ways to line up the soldiers, that no more than ", "k", "1", " footmen stand successively, and no more than ", "k", "2", " horsemen stand successively."]], "sample_test_input": ["2 1 1 10"], "sample_test_output": ["1"], "note": [["Let's mark a footman as ", "1", ", and a horseman as ", "2", "."], ["In the first sample the only beautiful line-up is: ", "121"], ["In the second sample 5 beautiful line-ups exist: ", "12122", ", ", "12212", ", ", "21212", ", ", "21221", ", ", "22121"]]}
{"title": ["C. Plumber"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["In each cell he will draw a pipe segment. He can only draw four types of segments numbered from ", "1", " to ", "4", ", illustrated as follows:"], [], ["Each pipe segment has two ends, illustrated by the arrows in the picture above. For example, segment ", "1", " has ends at top and left side of it."], ["Little John considers the piping system to be leaking if there is at least one pipe segment inside the grid whose end is not connected to another pipe's end or to the border of the grid. The image below shows an example of leaking and non-leaking systems of size ", "1 × 2", "."], [], ["Now, you will be given the grid that has been partially filled by Little John. Each cell will either contain one of the four segments above, or be empty. Find the number of possible different non-leaking final systems after Little John finishes filling ", "all", " of the empty cells with pipe segments. Print this number modulo ", "1000003", " (", "10", "6", " + 3", ")."]], "input_specification": [["The first line will contain two single-space separated integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", ", ", "n", "·", "m", " ≤ 5·10", "5", ") — the number of rows and columns respectively. Then ", "n", " lines follow, each contains exactly ", "m", " characters — the description of the grid. Each character describes a cell and is either one of these: "]], "output_specification": [["Print a single integer denoting the number of possible final non-leaking pipe systems modulo ", "1000003", " (", "10", "6", " + 3", "). If there are no such configurations, print ", "0", "."]], "sample_test_input": ["2 2", "13", ".."], "sample_test_output": ["2"], "note": [["For the first example, the initial configuration of the grid is as follows. "], [], ["The only two possible final non-leaking pipe configurations are as follows:"], []]}
{"title": ["E. Linear Kingdom Races"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Linear Kingdom has ", "n", " consecutive roads spanning from left to right. The roads are numbered from ", "1", " to ", "n", " from left to right, thus the roads follow in the order of their numbers' increasing. There will be several races that may be held on these roads. Each race will use a ", "consecutive", " subset of these roads. Also, each race will pay some amount of money to you if this race is held. No races overlap in time, so some roads can be used in several races."], ["Unfortunately, some of the roads are in a bad condition and they need repair. Each road has repair costs associated with it, you are required to pay this cost to repair the road. A race can only take place if all the roads used in the race are renovated. Your task is to repair such roads (possibly all or none) that will maximize your profit. Your profit is defined as the total money you get from the races that are held minus the total money you spent to repair the roads. Note that you may decide not to repair any road and gain zero profit."], ["Print the maximum profit you can gain."], []], "input_specification": [["The first line contains two single-space separated integers, ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 2·10", "5", "), denoting the number of roads and the number of races, respectively."], ["Then ", "n", " lines follow, each line will contain a single non-negative integer not exceeding ", "10", "9", " denoting the cost to repair a road. The costs are given in order from road ", "1", " to road ", "n", "."], ["Finally, ", "m", " lines follow. Each line is single-space-separated triplets of integers. Each triplet will be given as ", "lb", ", ", "ub", ", and ", "p", " (", "1 ≤ ", "lb", " ≤ ", "ub", " ≤ ", "n", ", 1 ≤ ", "p", " ≤ 10", "9", "), which means that the race these three integers describe will use all the roads from ", "lb", " to ", "ub", ", inclusive, and if it's held you get ", "p", "."]], "output_specification": [["Print a single integer denoting the maximum possible profit you can gain."], ["Please, do not use the ", "%lld", " specificator to read or write 64-bit integers in C++. It is recommended to use ", "cin", ", ", "cout", " stream (also you may use ", "%I64d", " specificator)."]], "sample_test_input": ["7 4", "3", "2", "3", "2", "1", "2", "3", "1 2 5", "2 3 5", "3 5 3", "7 7 5"], "sample_test_output": ["4"], "note": [["In the first sample the optimal solution is to repair roads ", "1", ", ", "2", ", ", "3", ", and ", "7", ". Three races will take place which nets you ", "15", ". The road repair costs ", "11", ", hence your profit is ", "4", "."]]}
{"title": ["D. Unambiguous Arithmetic Expression"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], []], "input_specification": [["The first line is a ", "non-empty", " string consisting of digits ('0'-'9') and characters '-', '+', '*', and/or '/'. Its length will not exceed ", "2000", ". The line doesn't contain any spaces."]], "output_specification": [["Print a single integer representing the number of different unambiguous arithmetic expressions modulo ", "1000003", " (", "10", "6", " + 3", ") such that if all its brackets are removed, it becomes equal to the input string (character-by-character)."]], "sample_test_input": ["1+2*3"], "sample_test_output": ["2"], "note": [["For the first example, the two possible unambiguous arithmetic expressions are:"], []]}
{"title": ["B. Lawnmower"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["You have a land-mower with you to mow all the weeds. Initially, you are standing with your lawnmower at the top-left corner of the garden. That is, at cell ", "(1, 1)", ". At any moment of time you are facing a certain direction — either left or right. And initially, you face right.", " ", " ", " "], ["In one move you can do either one of these:"], ["1) Move one cell in the direction that you are facing.", " "], [], [], [], [], ["You are not allowed to leave the garden. Weeds will be mowed if you and your lawnmower are standing at the cell containing the weeds (your direction doesn't matter). This action isn't counted as a move."], ["What is the minimum number of moves required to mow all the weeds?"], [], [], [], []], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 150", ") — the number of rows and columns respectively. Then follow ", "n", " lines containing ", "m", " characters each — the content of the grid. \"", "G", "\" means that this cell contains grass. \"", "W", "\" means that this cell contains weeds. "], ["It is guaranteed that the top-left corner of the grid will contain grass."]], "output_specification": [["Print a single number — the minimum number of moves required to mow all the weeds."]], "sample_test_input": ["4 5", "GWGGW", "GGWGG", "GWGGG", "WGGGG"], "sample_test_output": ["11"], "note": [["For the first example, this is the picture of the initial state of the grid:"], []]}
{"title": ["A. Petya and Strings"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["Each of the first two lines contains a bought string. The strings' lengths range from ", "1", " to ", "100", " inclusive. It is guaranteed that the strings are of the same length and also consist of uppercase and lowercase Latin letters."]], "output_specification": [["If the first string is less than the second one, print \"-1\". If the second string is less than the first one, print \"1\". If the strings are equal, print \"0\". Note that the letters' case is not taken into consideration when the strings are compared."]], "sample_test_input": ["aaaa", "aaaA"], "sample_test_output": ["0"], "note": [["If you want more formal information about the lexicographical order (also known as the \"", "dictionary order", "\" or \"", "alphabetical order", "\"), you can visit the following site:"]]}
{"title": ["A. Partial Teacher"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["He looks at the first two students and gives more toffees to the student having higher marks than the other one. If they have the same marks they get the same number of toffees. The same procedure is followed for each pair of adjacent students starting from the first one to the last one."], ["It is given that each student receives at least one toffee. You have to find the number of toffees given to each student by the teacher such that the total number of toffees is minimum."], []], "input_specification": [["The first line of input contains the number of students ", "n", " (", "2 ≤ ", "n", " ≤ 1000", "). The second line gives (", "n", " - 1", ") characters consisting of \"", "L", "\", \"", "R", "\" and \"", "=", "\". For each pair of adjacent students \"", "L", "\" means that the left student has higher marks, \"", "R", "\" means that the right student has higher marks and \"", "=", "\" means that both have equal marks. "]], "output_specification": [["Output consists of ", "n", " integers separated by a space representing the number of toffees each student receives in the queue starting from the first one to the last one."]], "sample_test_input": ["5", "LRLR"], "sample_test_output": ["2 1 2 1 2"], "note": []}
{"title": ["A. Tram"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Your task is to calculate the tram's minimum capacity such that the number of people inside the tram at any time never exceeds this capacity. Note that at each stop all exiting passengers exit ", "before", " any entering passenger enters the tram."], []], "input_specification": [["The first line contains a single number ", "n", " (", "2 ≤ ", "n", " ≤ 1000", ") — the number of the tram's stops. "], ["Then ", "n", " lines follow, each contains two integers ", "a", "i", " and ", "b", "i", " (", "0 ≤ ", "a", "i", ", ", "b", "i", " ≤ 1000", ") — the number of passengers that exits the tram at the ", "i", "-th stop, and the number of passengers that enter the tram at the ", "i", "-th stop. The stops are given from the first to the last stop in the order of tram's movement."]], "output_specification": [["Print a single integer denoting the minimum possible capacity of the tram (0 is allowed)."]], "sample_test_input": ["4", "0 3", "2 5", "4 2", "4 0"], "sample_test_output": ["6"], "note": [["For the first example, a capacity of 6 is sufficient: "], []]}
{"title": ["E. Petya and Post"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The total number of stations equals to ", "n", ". One can fuel the car at the ", "i", "-th station with no more than ", "a", "i", " liters of gasoline. Besides, one can fuel the car no more than once at each station. Also, the distance between the ", "1", "-st and the ", "2", "-nd station is ", "b", "1", " kilometers, the distance between the ", "2", "-nd and the ", "3", "-rd one is ", "b", "2", " kilometers, ..., between the ", "(", "n", " - 1)", "-th and the ", "n", "-th ones the distance is ", "b", "n", " - 1", " kilometers and between the ", "n", "-th and the ", "1", "-st one the distance is ", "b", "n", " kilometers. Petya's uncle's high-tech car uses only one liter of gasoline per kilometer. It is known that the stations are located so that the sum of all ", "a", "i", " is equal to the sum of all ", "b", "i", ". The ", "i", "-th gas station and ", "i", "-th post office are very close, so the distance between them is ", "0", " kilometers."], ["Thus, it becomes clear that if we start from some post offices, then it is not always possible to drive one round along a circular road. The uncle faces the following problem: to what stations can he go in the morning to be able to ride exactly one circle along the circular road and visit all the post offices that are on it?"], ["Petya, who used to attend programming classes, has volunteered to help his uncle, but his knowledge turned out to be not enough, so he asks you to help him write the program that will solve the posed problem."], []], "input_specification": [["The first line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", "). The second line contains ", "n", " integers ", "a", "i", " — amount of gasoline on the ", "i", "-th station. The third line contains ", "n", " integers ", "b", "1", ", ", "b", "2", ", ..., ", "b", "n", ". They are the distances between the ", "1", "-st and the ", "2", "-nd gas stations, between the ", "2", "-nd and the ", "3", "-rd ones, ..., between the ", "n", "-th and the ", "1", "-st ones, respectively. The sum of all ", "b", "i", " equals to the sum of all ", "a", "i", " and is no more than ", "10", "9", ". Each of the numbers ", "a", "i", ", ", "b", "i", " is no less than ", "1", " and no more than ", "10", "9", "."]], "output_specification": [["Print on the first line the number ", "k", " — the number of possible post offices, from which the car can drive one circle along a circular road. Print on the second line ", "k", " numbers in the ascending order — the numbers of offices, from which the car can start."]], "sample_test_input": ["4", "1 7 2 3", "8 1 1 3"], "sample_test_output": ["2", "2 4"], "note": []}
{"title": ["B. Restoration of the Permutation"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For example, if ", "n", " = 5", ", a possible ", "A", " is ", "{5, 1, 4, 2, 3}", ". For ", "k", " = 2", ", ", "B", " is given by ", "{1, 2, 1, 0, 0}", ". But if ", "k", " = 3", ", then ", "B", " = {1, 1, 0, 0, 0}", "."], ["For two sequences ", "X", " = {", "x", "1", ", ", "x", "2", ", ..., ", "x", "n", "}", " and ", "Y", " = {", "y", "1", ", ", "y", "2", ", ..., ", "y", "n", "}", ", let ", "i", "-th elements be the first elements such that ", "x", "i", " ≠ ", "y", "i", ". If ", "x", "i", " < ", "y", "i", ", then ", "X", " is lexicographically smaller than ", "Y", ", while if ", "x", "i", " > ", "y", "i", ", then ", "X", " is lexicographically greater than ", "Y", "."], ["Given ", "n", ", ", "k", " and ", "B", ", you need to determine the lexicographically smallest ", "A", "."], []], "input_specification": [["The first line contains two space separated integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 1000", ", ", "1 ≤ ", "k", " ≤ ", "n", "). On the second line are ", "n", " integers specifying the values of ", "B", " = {", "b", "1", ", ", "b", "2", ", ..., ", "b", "n", "}", "."]], "output_specification": [["Print on a single line ", "n", " integers of ", "A", " = {", "a", "1", ", ", "a", "2", ", ..., ", "a", "n", "}", " such that ", "A", " is lexicographically minimal. It is guaranteed that the solution exists."]], "sample_test_input": ["5 2", "1 2 1 0 0"], "sample_test_output": ["4 1 5 2 3 "], "note": []}
{"title": ["C. Sequence of Balls"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["Your teacher now places time constraints on each operation, meaning that an operation can only be performed in certain time. So, the first operation takes time ", "t", "i", ", the second one takes ", "t", "d", ", the third one takes ", "t", "r", " and the fourth one takes ", "t", "e", ". Also, it is given that ", "2·", "t", "e", " ≥ ", "t", "i", " + ", "t", "d", "."], ["Find the minimal time to convert the sequence ", "A", " to the sequence ", "B", "."]], "input_specification": [["The first line contains four space-separated integers ", "t", "i", ", ", "t", "d", ", ", "t", "r", ", ", "t", "e", " (", "0 < ", "t", "i", ", ", "t", "d", ", ", "t", "r", ", ", "t", "e", " ≤ 100", "). The following two lines contain sequences ", "A", " and ", "B", " on separate lines. The length of each line is between 1 and 4000 characters inclusive."]], "output_specification": [["Print a single integer representing minimum time to convert ", "A", " into ", "B", "."]], "sample_test_input": ["1 1 1 1", "youshouldnot", "thoushaltnot"], "sample_test_output": ["5"], "note": [["In the second sample, you could delete the ball labeled 'a' from the first position and then insert another 'a' at the new second position with total time 6. However exchanging the balls give total time 3."]]}
{"title": ["B. Petya and Square"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The task is to draw a broken line that would go along the grid lines and that would cut the square into two equal parts. The cutting line should not have any common points with the marked cell and the resulting two parts should be equal ", "up to rotation", "."], ["Petya wants to determine whether it is possible to cut the square in the required manner given the sizes of the square side and the coordinates of the marked cell. Help him."], []], "input_specification": [["The first line contains three space-separated integers ", "2", "n", ", ", "x", " and ", "y", " (", "2 ≤ 2", "n", " ≤ 100, 1 ≤ ", "x", ", ", "y", " ≤ 2", "n", "), representing the length of a square's side and the coordinates of the marked cell. It is guaranteed that ", "2", "n", " is even."], ["The coordinates of the marked cell are represented by a pair of numbers ", "x", " ", "y", ", where ", "x", " represents the number of the row and ", "y", " represents the number of the column. The rows and columns are numbered by consecutive integers from ", "1", " to ", "2", "n", ". The rows are numbered from top to bottom and the columns are numbered from the left to the right."]], "output_specification": [["If the square is possible to cut, print \"", "YES", "\", otherwise print \"", "NO", "\" (without the quotes)."]], "sample_test_input": ["4 1 1"], "sample_test_output": ["YES"], "note": [["A sample test from the statement and one of the possible ways of cutting the square are shown in the picture: "]]}
{"title": ["A. Irrational problem"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You are given function ", " (here ", " represents the operation of taking the remainder). His task is to count the number of integers ", "x", " in range ", "[", "a", ";", "b", "]", " with property ", "f", "(", "x", ") = ", "x", "."], ["It is a pity that Petya forgot the order in which the remainders should be taken and wrote down only 4 numbers. Each of 24 possible orders of taking the remainder has equal probability of being chosen. For example, if Petya has numbers 1, 2, 3, 4 then he can take remainders in that order or first take remainder modulo 4, then modulo 2, 3, 1. There also are 22 other permutations of these numbers that represent orders in which remainder can be taken. In this problem 4 numbers wrote down by Petya will be pairwise distinct."], ["Now it is impossible for Petya to complete the task given by teacher but just for fun he decided to find the number of integers ", " with property that probability that ", "f", "(", "x", ") = ", "x", " is not less than ", "31.4159265352718281828459045%", ". In other words, Petya will pick up the number ", "x", " if there exist at least ", "7", " permutations of numbers ", "p", "1", ", ", "p", "2", ", ", "p", "3", ", ", "p", "4", ", for which ", "f", "(", "x", ") = ", "x", "."], []], "input_specification": [["First line of the input will contain 6 integers, separated by spaces: ", "p", "1", ", ", "p", "2", ", ", "p", "3", ", ", "p", "4", ", ", "a", ", ", "b", " (", "1 ≤ ", "p", "1", ", ", "p", "2", ", ", "p", "3", ", ", "p", "4", " ≤ 1000, 0 ≤ ", "a", " ≤ ", "b", " ≤ 31415", "). "], ["It is guaranteed that numbers ", "p", "1", ", ", "p", "2", ", ", "p", "3", ", ", "p", "4", " will be pairwise distinct."]], "output_specification": [["Output the number of integers in the given range that have the given property."]], "sample_test_input": ["2 7 1 8 2 8"], "sample_test_output": ["0"], "note": []}
{"title": ["E. Save the City!"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Since the people of Aalam-Aara aren't very rich, they met up with a merchant from some rich town who agreed to sell them a land-plot which has already a straight line fence ", "AB", " along which a few points are set up where they can put up a watchtower. Your task is to help them find out the number of points on that fence where the tower can be put up, so that all the criminals can be watched from there. Only one watchtower can be set up. A criminal is watchable from the watchtower if the line of visibility from the watchtower to him doesn't cross the plot-edges at any point between him and the tower i.e. as shown in figure 1 below, points ", "X", ", ", "Y", ", ", "C", " and ", "A", " are visible from point ", "B", " but the points ", "E", " and ", "D", " are not."], [], []], "input_specification": [["The first line of the test case will consist of the number of vertices ", "n", " (", "3 ≤ ", "n", " ≤ 1000", ")."], ["Next ", "n", " lines will contain the coordinates of the vertices in the clockwise order of the polygon. On the ", "i", "-th line are integers ", "x", "i", " and ", "y", "i", " (", "0 ≤ ", "x", "i", ", ", "y", "i", " ≤ 10", "6", ") separated by a space."], ["The endpoints of the fence ", "AB", " are the first two points, ", "(", "x", "1", ", ", "y", "1", ")", " and ", "(", "x", "2", ", ", "y", "2", ")", "."]], "output_specification": [["Output consists of a single line containing the number of points where the watchtower can be set up."]], "sample_test_input": ["5", "4 8", "8 8", "9 4", "4 0", "0 4"], "sample_test_output": ["5"], "note": [["Figure 2 shows the first test case. All the points in the figure are watchable from any point on fence ", "AB", ". Since, ", "AB", " has ", "5", " integer coordinates, so answer is ", "5", "."], ["For case two, fence ", "CD", " and ", "DE", " are not completely visible, thus answer is ", "0", "."]]}
{"title": ["D. Optical Experiment"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There is a rectangular box having exactly ", "n", " holes on the opposite faces. All rays enter from the holes of the first side and exit from the holes of the other side of the box. Exactly one ray can enter or exit from each hole. The holes are in a straight line."], [], ["Professor Wangdu is showing his experiment to his students. He shows that there are cases, when all the rays are intersected by every other ray. A curious student asked the professor: \"Sir, there are some groups of rays such that all rays in that group intersect every other ray in that group. Can we determine the number of rays in the largest of such groups?\"."], ["Professor Wangdu now is in trouble and knowing your intellect he asks you to help him."]], "input_specification": [["The first line contains ", "n", " (", "1 ≤ ", "n", " ≤ 10", "6", "), the number of rays. The second line contains ", "n", " distinct integers. The ", "i", "-th integer ", "x", "i", " (", "1 ≤ ", "x", "i", " ≤ ", "n", ") shows that the ", "x", "i", "-th ray enters from the ", "i", "-th hole. Similarly, third line contains ", "n", " distinct integers. The ", "i", "-th integer ", "y", "i", " (", "1 ≤ ", "y", "i", " ≤ ", "n", ") shows that the ", "y", "i", "-th ray exits from the ", "i", "-th hole. All rays are numbered from ", "1", " to ", "n", ". "]], "output_specification": [["Output contains the only integer which is the number of rays in the largest group of rays all of which intersect each other."]], "sample_test_input": ["5", "1 4 5 2 3", "3 4 2 1 5"], "sample_test_output": ["3"], "note": [["For the first test case, the figure is shown above. The output of the first test case is 3, since the rays number 1, 4 and 3 are the ones which are intersected by each other one i.e. 1 is intersected by 4 and 3, 3 is intersected by 4 and 1, and 4 is intersected by 1 and 3. Hence every ray in this group is intersected by each other one. There does not exist any group containing more than 3 rays satisfying the above-mentioned constraint."]]}
{"title": ["B. Petr#"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The input file consists of three lines. The first line contains string ", "t", ". The second and the third lines contain the ", "s", "begin", " and ", "s", "end", " identificators, correspondingly. All three lines are non-empty strings consisting of lowercase Latin letters. The length of each string doesn't exceed 2000 characters."]], "output_specification": [["Output the only number — the amount of different substrings of ", "t", " that start with ", "s", "begin", " and end with ", "s", "end", "."]], "sample_test_input": ["round", "ro", "ou"], "sample_test_output": ["1"], "note": [["In the third sample there are four appropriate different substrings. They are: ", "ab", ", ", "abab", ", ", "ababab", ", ", "abababab", "."], ["In the fourth sample identificators intersect."]]}
{"title": ["B. Energy exchange"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers."], []], "input_specification": [["First line of the input contains two integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 10000, 0 ≤ ", "k", " ≤ 99", ") — number of accumulators and the percent of energy that is lost during transfers."], ["Next line contains ", "n", " integers ", "a", "1", ", ", "a", "2", ", ... , ", "a", "n", " — amounts of energy in the first, second, .., ", "n", "-th accumulator respectively (", "0 ≤ ", "a", "i", " ≤ 1000, 1 ≤ ", "i", " ≤ ", "n", ")."]], "output_specification": [["Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy."], ["The absolute or relative error in the answer should not exceed ", "10", " - 6", "."]], "sample_test_input": ["3 50", "4 2 1"], "sample_test_output": ["2.000000000"], "note": []}
{"title": ["A. Grammar Lessons"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["Statement", " is any sequence of the Petya's language, that satisfy both conditions:"], []], "input_specification": [["The first line contains one or more words consisting of lowercase Latin letters. The overall number of characters (including letters and spaces) does not exceed ", "10", "5", "."], ["It is guaranteed that any two consecutive words are separated by exactly one space and the input data do not contain any other spaces. It is possible that given words do not belong to the Petya's language."]], "output_specification": [["If some word of the given text does not belong to the Petya's language or if the text contains more that one sentence, print \"", "NO", "\" (without the quotes). Otherwise, print \"", "YES", "\" (without the quotes)."]], "sample_test_input": ["petr"], "sample_test_output": ["YES"], "note": []}
{"title": ["D. Museum"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["After the two friends had a little walk around the museum, they decided to split and watch the pieces of art each of them found interesting. They agreed to meet in one of the rooms at six p.m. However, they forgot one quite essential thing: they didn't specify the place to meet and when the time came, they started to rush about the museum looking for each other (they couldn't call each other as roaming made a call's cost skyrocket)."], ["Yet, even despite the whole rush, they couldn't get enough of the pieces of art, that's why each of them has the following strategy: each minute he make a decision where to go — with probability ", "p", "i", " he doesn't move to any other place during this minute (i.e. he stays in the room). With probability ", "1 - ", "p", "i", " he equiprobably choose one of the adjacent rooms and went there along the corridor. Here ", "i", " is the ordinal number of the current room. Building was expensive in ancient times, that's why each corridor connected two different rooms, and any two rooms had no more than one corridor between them. "], ["The boys act simultaneously. As the corridors are dark, it is impossible to meet there; however, one can walk along the corridors in both directions (besides, the two boys can be going through the same corridor simultaneously without meeting). The boys act like that until they meet each other. More formally, the two friends meet when at some moment of time both of them decided to appear in the same room."], ["For each room find the probability that the boys will meet there considering that at 6 p.m. they are positioned in rooms ", "a", " and ", "b", " correspondingly."], []], "input_specification": [["The first line contains four integers: ", "n", " ", "(1 ≤ ", "n", " ≤ 22)", ", representing the numbers of rooms; ", "m", " ", ", representing the number of corridors; ", "a", ", ", "b", " ", "(1 ≤ ", "a", ", ", "b", " ≤ ", "n", ")", ", representing the numbers of Petya's and Vasya's starting rooms correspondingly."], ["Next ", "m", " lines contain pairs of numbers — the numbers of rooms connected by a corridor. Next ", "n", " lines contain probabilities ", "p", "i", " ", "(0.01 ≤ ", "p", "i", " ≤ 0.99)", " with the accuracy of up to four digits after the decimal point — the probability to stay in room ", "i", "."], ["It is guaranteed that every room can be reached from every other room by corridors."]], "output_specification": [["In the only line print ", "n", " space-separated numbers, the ", "i", "-th number should represent the probability that the friends meet in the ", "i", "-th room with absolute or relative error of no more than ", "10", " - 6", "."]], "sample_test_input": ["2 1 1 2", "1 2", "0.5", "0.5"], "sample_test_output": ["0.5000000000 0.5000000000 "], "note": [["In the first sample the museum is symmetric. That means the probabilities to meet in rooms 1 and 2 are equal. And their sum equals to one. So, each probability equals ", "0.5", "."]]}
{"title": ["A. Cifera"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petya wanted to modernize the words we use for numbers and invented a word ", "petricium", " that represents number ", "k", ". Moreover, ", "petricium la petricium", " stands for number ", "k", "2", ", ", "petricium la petricium la petricium", " stands for ", "k", "3", " and so on. All numbers of this form are called ", "petriciumus cifera", ", and the number's importance is the number of articles ", "la", " in its title."], ["Petya's invention brought on a challenge that needed to be solved quickly: does some number ", "l", " belong to the set ", "petriciumus cifera", "? As Petya is a very busy schoolboy he needs to automate the process, he asked you to solve it."], []], "input_specification": [["The first input line contains integer number ", "k", ", the second line contains integer number ", "l", " (", "2 ≤ ", "k", ", ", "l", " ≤ 2", "31", " - 1", ")."]], "output_specification": [["You should print in the first line of the output \"", "YES", "\", if the number belongs to the set ", "petriciumus cifera", " and otherwise print \"", "NO", "\". If the number belongs to the set, then print on the seconds line the only number — the importance of number ", "l", "."]], "sample_test_input": ["5", "25"], "sample_test_output": ["YES", "1"], "note": []}
{"title": ["E. Sleeping"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Vasya lives in a strange country, where days have ", "h", " hours, and every hour has ", "m", " minutes. Clock shows time in decimal number system, in format ", "H:M", ", where the string ", "H", " always has a fixed length equal to the number of digits in the decimal representation of number ", "h", " - 1", ". To achieve this, leading zeros are added if necessary. The string ", "M", " has a similar format, and its length is always equal to the number of digits in the decimal representation of number ", "m", " - 1", ". For example, if ", "h", " = 17", ", ", "m", " = 1000", ", then time equal to 13 hours and 75 minutes will be displayed as \"", "13:075", "\"."], ["Vasya had been watching the clock from ", "h", "1", " hours ", "m", "1", " minutes to ", "h", "2", " hours ", "m", "2", " minutes inclusive, and then he fell asleep. Now he asks you to count how many times he saw the moment at which at least ", "k", " digits changed on the clock simultaneously."], ["For example, when switching 04:19 ", " → ", " 04:20 two digits change. When switching 23:59 ", " → ", " 00:00, four digits change."], ["Consider that Vasya has been watching the clock for strictly less than one day. Note that the last time Vasya saw on the clock before falling asleep was \"", "h2:m2", "\". That is, Vasya ", "didn't see", " the moment at which time \"", "h2:m2", "\" switched to the next value."], []], "input_specification": [["The first line of the input file contains three space-separated integers ", "h", ", ", "m", " and ", "k", " (", "2 ≤ ", "h", ", ", "m", " ≤ 10", "9", ", ", "1 ≤ ", "k", " ≤ 20", "). The second line contains space-separated integers ", "h", "1", ", ", "m", "1", " (", "0 ≤ ", "h", "1", " < ", "h", ", ", "0 ≤ ", "m", "1", " < ", "m", "). The third line contains space-separated integers ", "h", "2", ", ", "m", "2", " (", "0 ≤ ", "h", "2", " < ", "h", ", ", "0 ≤ ", "m", "2", " < ", "m", ")."]], "output_specification": [["Print a single number — the number of times Vasya saw the moment of changing at least ", "k", " digits simultaneously."], ["Please do not use the ", "%lld", " specificator to read or write 64-bit integers in C++. It is preferred to use the ", "cin", " stream (also you may use the ", "%I64d", " specificator)."]], "sample_test_input": ["5 5 2", "4 4", "2 1"], "sample_test_output": ["3"], "note": [["In the first example Vasya will see the following moments of time: 4:4 ", " 0:0 ", " → ", " 0:1 ", " → ", " 0:2 ", " → ", " 0:3 ", " → ", " 0:4 ", " 1:0 ", " → ", " 1:1 ", " → ", " 1:2 ", " → ", " 1:3 ", " → ", " 1:4 ", " 2:0 ", " → ", " 2:1 ", " → ", " 2:2 ", " → ", " 2:3 ", " → ", " 2:4. Double arrow (", ") marks the sought moments of time (in this example — when Vasya sees two numbers changing simultaneously)."], ["In the second example ", "k", " = 1", ". Any switching time can be accepted, since during switching of the clock at least one digit is changed. Total switching equals to ", "24·60 = 1440", ", but Vasya have not seen one of them — the switching of 23:59 ", " 00:00."], ["In the third example Vasya fell asleep immediately after he began to look at the clock, so he did not see any change."]]}
{"title": ["B. PFAST Inc."], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["To make this format of contests popular he organised his own tournament. To create the team he will prepare for the contest organised by the PFAST Inc. rules, he chose several volunteers (up to 16 people) and decided to compile a team from them. Petya understands perfectly that if a team has two people that don't get on well, then the team will perform poorly. Put together a team with as many players as possible given that all players should get on well with each other."], []], "input_specification": [["The first line contains two integer numbers ", "n", " (", "1 ≤ ", "n", " ≤ 16", ") — the number of volunteers, and ", "m", " (", ") — the number of pairs that do not get on. Next ", "n", " lines contain the volunteers' names (each name is a non-empty string consisting of no more than 10 uppercase and/or lowercase Latin letters). Next ", "m", " lines contain two names — the names of the volunteers who do not get on. The names in pair are separated with a single space. Each pair of volunteers who do not get on occurs exactly once. The strings are case-sensitive. All ", "n", " names are distinct."]], "output_specification": [["The first output line should contain the single number ", "k", " — the number of people in the sought team. Next ", "k", " lines should contain the names of the sought team's participants in the lexicographical order. If there are several variants to solve the problem, print any of them. Petya might not be a member of the sought team. "]], "sample_test_input": ["3 1", "Petya", "Vasya", "Masha", "Petya Vasya"], "sample_test_output": ["2", "Masha", "Petya"], "note": []}
{"title": ["A. Party"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["The company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager."], ["Today the company is going to arrange a party. This involves dividing all ", "n", " employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees ", "A", " and ", "B", " such that ", "A", " is the superior of ", "B", "."], ["What is the minimum number of groups that must be formed?"]], "input_specification": [["The first line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 2000", ") — the number of employees."], ["The next ", "n", " lines contain the integers ", "p", "i", " (", "1 ≤ ", "p", "i", " ≤ ", "n", " or ", "p", "i", " = ", "-1). Every ", "p", "i", " denotes the immediate manager for the ", "i", "-th employee. If ", "p", "i", " is -1, that means that the ", "i", "-th employee does not have an immediate manager. "], ["It is guaranteed, that no employee will be the immediate manager of him/herself (", "p", "i", " ≠ ", "i", "). Also, there will be no managerial cycles."]], "output_specification": [["Print a single integer denoting the minimum number of groups that will be formed in the party."]], "sample_test_input": ["5", "-1", "1", "2", "1", "-1"], "sample_test_output": ["3"], "note": [["For the first example, three groups are sufficient, for example: "]]}
{"title": ["A. Replacement"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["After the replacement Petya sorted the array by the numbers' non-decreasing. Now he wants to know for each position: what minimum number could occupy it after the replacement and the sorting."], []], "input_specification": [["The first line contains a single integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", "), which represents how many numbers the array has. The next line contains ", "n", " space-separated integers — the array's description. All elements of the array lie in the range from ", "1", " to ", "10", "9", ", inclusive."]], "output_specification": [["Print ", "n", " space-separated integers — the minimum possible values of each array element after one replacement and the sorting are performed."]], "sample_test_input": ["5", "1 2 3 4 5"], "sample_test_output": ["1 1 2 3 4"], "note": []}
{"title": ["E. Long sequence"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], []], "input_specification": [["Input contains a single integer ", "k", " (", "2 ≤ ", "k", " ≤ 50", ")."]], "output_specification": [["If there is no long sequence for a given ", "k", ", output \"-1\" (without quotes). Otherwise the first line of the output should contain ", "k", " integer numbers: ", "c", "1", ", ", "c", "2", ", ..., ", "c", "k", " (coefficients). The second line should contain first ", "k", " elements of the sequence: ", "a", "0", ", ", "a", "1", ", ..., ", "a", "k", " - 1", ". All of them (elements and coefficients) should be equal to 0 or 1, and at least one ", "c", "i", " has to be equal to 1."], ["If there are several solutions, output any."]], "sample_test_input": ["2"], "sample_test_output": ["1 1", "1 0"], "note": [["1. In the first sample: ", "c", "1", " = 1", ", ", "c", "2", " = 1", ", so ", "a", "n", " = ", "a", "n", " - 1", " + ", "a", "n", " - 2", "  (", "mod", " 2)", ". Thus the sequence will be:"], [], ["so its period equals ", "3 = 2", "2", " - 1", "."], ["2. In the second sample: ", "c", "1", " = 0", ", ", "c", "2", " = 1", ", ", "c", "3", " = 1", ", so ", "a", "n", " = ", "a", "n", " - 2", " + ", "a", "n", " - 3", "  (", "mod", " 2)", ". Thus our sequence is:"], []]}
{"title": ["C. Interesting Game"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Initially there is one pile consisting of ", "n", " stones on the table. During one move one pile should be taken and divided into an arbitrary number of piles consisting of ", "a", "1", " > ", "a", "2", " > ... > ", "a", "k", " > 0", " stones. The piles should meet the condition ", "a", "1", " - ", "a", "2", " = ", "a", "2", " - ", "a", "3", " = ... = ", "a", "k", " - 1", " - ", "a", "k", " = 1", ". Naturally, the number of piles ", "k", " should be no less than two."], ["The friends play in turns. The player who cannot make a move loses. Serozha makes the first move. Who will win if both players play in the optimal way?"], []], "input_specification": [["The single line contains a single integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", ")."]], "output_specification": [["If Serozha wins, print ", "k", ", which represents the minimal number of piles into which he can split the initial one during the first move in order to win the game."], ["If Gena wins, print \"-1\" (without the quotes)."]], "sample_test_input": ["3"], "sample_test_output": ["2"], "note": []}
{"title": ["E. Weak Subsequence"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["String ", "a", " with the length of ", "n", " is considered the weak subsequence of the string ", "s", " with the length of ", "m", ", if there exists such a set of indexes ", "1 ≤ ", "i", "1", " < ", "i", "2", " < ... < ", "i", "n", " ≤ ", "m", ", that has the following two properties: "], [], ["Petya got interested how many different strings are available for him to purchase in the shop. As the number of strings can be very large, please find it modulo ", "1000000007", " (", "10", "9", " + 7", "). If there are infinitely many such strings, print \"-1\"."]], "input_specification": [["The first line contains two integers ", "k", " (", "1 ≤ ", "k", " ≤ 10", "6", ") and ", "w", " (", "2 ≤ ", "w", " ≤ 10", "9", ") — the alphabet size and the required length of the maximum substring that also is the weak subsequence, correspondingly."]], "output_specification": [["Print a single number — the number of strings Petya can buy using the voucher, modulo ", "1000000007", " (", "10", "9", " + 7", "). If there are infinitely many such strings, print \"-1\" (without the quotes)."]], "sample_test_input": ["2 2"], "sample_test_output": ["10"], "note": [["In the first sample Petya can buy the following strings: aaa, aab, abab, abb, abba, baa, baab, baba, bba, bbb."]]}
{"title": ["B. Rectangle and Square"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["You are given 8 pairs of integers, a pair per line — the coordinates of the points Petya has. The absolute value of all coordinates does not exceed ", "10", "4", ". It is guaranteed that no two points coincide."]], "output_specification": [["Print in the first output line \"", "YES", "\" (without the quotes), if the desired partition exists. In the second line output 4 space-separated numbers — point indexes from the input, which lie at the vertexes of the square. The points are numbered starting from 1. The numbers can be printed in any order. In the third line print the indexes of points lying at the vertexes of a rectangle in the similar format. All printed numbers should be pairwise distinct."], ["If the required partition does not exist, the first line should contain the word \"", "NO", "\" (without the quotes), after which no output is needed."]], "sample_test_input": ["0 0", "10 11", "10 0", "0 11", "1 1", "2 2", "2 1", "1 2"], "sample_test_output": ["YES", "5 6 7 8", "1 2 3 4"], "note": [["Pay attention to the third example: the figures do not necessarily have to be parallel to the coordinate axes."]]}
{"title": ["A. Trains"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["When Vasya has some free time, he goes to one of his girlfriends. He descends into the subway at some time, waits the first train to come and rides on it to the end of the branch to the corresponding girl. However, the trains run with different frequencies: a train goes to Dasha's direction every ", "a", " minutes, but a train goes to Masha's direction every ", "b", " minutes. If two trains approach at the same time, Vasya goes toward the direction with the lower frequency of going trains, that is, to the girl, to whose directions the trains go less frequently (see the note to the third sample)."], ["We know that the trains begin to go simultaneously before Vasya appears. That is the train schedule is such that there exists a moment of time when the two trains arrive simultaneously."], ["Help Vasya count to which girlfriend he will go more often."], []], "input_specification": [["The first line contains two integers ", "a", " and ", "b", " (", "a", " ≠ ", "b", ", 1 ≤ ", "a", ", ", "b", " ≤ 10", "6", ")."]], "output_specification": [["Print \"", "Dasha", "\" if Vasya will go to Dasha more frequently, \"", "Masha", "\" if he will go to Masha more frequently, or \"", "Equal", "\" if he will go to both girlfriends with the same frequency."]], "sample_test_input": ["3 7"], "sample_test_output": ["Dasha"], "note": [["Let's take a look at the third sample. Let the trains start to go at the zero moment of time. It is clear that the moments of the trains' arrival will be periodic with period 6. That's why it is enough to show that if Vasya descends to the subway at a moment of time inside the interval ", "(0, 6]", ", he will go to both girls equally often. "], ["If he descends to the subway at a moment of time from 0 to 2, he leaves for Dasha on the train that arrives by the second minute."], ["If he descends to the subway at a moment of time from 2 to 3, he leaves for Masha on the train that arrives by the third minute."], ["If he descends to the subway at a moment of time from 3 to 4, he leaves for Dasha on the train that arrives by the fourth minute."], ["If he descends to the subway at a moment of time from 4 to 6, he waits for both trains to arrive by the sixth minute and goes to Masha as trains go less often in Masha's direction."], ["In sum Masha and Dasha get equal time — three minutes for each one, thus, Vasya will go to both girlfriends equally often."]]}
{"title": ["B. Vasya and Types"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There is a very powerful system of pointers on &K* — you can add an asterisk to the right of the existing type ", "X", " — that will result in new type ", "X", " * ", ". That is called pointer-definition operation. Also, there is the operation that does the opposite — to any type of ", "X", ", which is a pointer, you can add an ampersand — that will result in a type ", "&", "X", ", to which refers ", "X", ". That is called a dereference operation."], ["The &K* language has only two basic data types — ", "void", " and ", "errtype", ". Also, the language has operators ", "typedef", " and ", "typeof", "."], [], ["An attempt of dereferencing of the ", "void", " type will lead to an error: to a special data type ", "errtype", ". For ", "errtype", " the following equation holds true: ", "errtype*", " = ", "&errtype", " = ", "errtype", ". An attempt to use the data type that hasn't been defined before that will also lead to the ", "errtype", "."], ["Using ", "typedef", ", we can define one type several times. Of all the definitions only the last one is valid. However, all the types that have been defined earlier using this type do not change."], ["Let us also note that the dereference operation has the lower priority that the pointer operation, in other words ", "&", "T", " * ", " is always equal to ", "T", "."], ["Note, that the operators are executed consecutively one by one. If we have two operators \"", "typedef &void a", "\" and \"", "typedef a* b", "\", then at first ", "a", " becomes ", "errtype", ", and after that ", "b", " becomes ", "errtype* = errtype", ", but ", "not", " ", "&void* = void", " (see sample 2)."], ["Vasya does not yet fully understand this powerful technology, that's why he asked you to help him. Write a program that analyzes these operators. "]], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") — the number of operators. Then follow ", "n", " lines with operators. Each operator is of one of two types: either \"", "typedef ", "A", " ", "B", "\", or \"", "typeof ", "A", "\". In the first case the ", "B", " type differs from ", "void", " and ", "errtype", " types, and besides, doesn't have any asterisks and ampersands."], ["All the data type names are non-empty lines of no more than 20 lowercase Latin letters. The number of asterisks and ampersands separately in one type in any operator does not exceed 10, however if we bring some types to ", "void", " with several asterisks, their number may exceed 10."]], "output_specification": [["For every ", "typeof", " operator print on the single line the answer to that operator — the type that the given operator returned."]], "sample_test_input": ["5", "typedef void* ptv", "typeof ptv", "typedef &&ptv node", "typeof node", "typeof &ptv"], "sample_test_output": ["void*", "errtype", "void"], "note": [["Let's look at the second sample."], ["After the first two queries ", "typedef", " the ", "b", " type is equivalent to ", "void*", ", and ", "с", " — to ", "void**", "."], ["The next query ", "typedef", " redefines ", "b", " — it is now equal to ", "&b = &void* = void", ". At that, the ", "с", " type doesn't change."], ["After that the ", "с", " type is defined as ", "&&b* = &&void* = &void = errtype", ". It doesn't influence the ", "b", " type, that's why the next ", "typedef", " defines ", "c", " as ", "&void* = void", "."], ["Then the ", "b", " type is again redefined as ", "&void = errtype", ". "], ["Please note that the ", "c", " type in the next query is defined exactly as ", "errtype******* = errtype", ", and not ", "&void******* = void******", ". The same happens in the last ", "typedef", "."]]}
{"title": ["E. Contact"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Each column can be used to land more than one ship, for example, if there are two equal ships, we don't need to build 6 columns to land both ships, 3 will be enough. Petya wants to know what minimum number of columns will be enough to land all ships. "], []], "input_specification": [["Each of 4 lines will contain 6 integers ", "x", "1", " ", "y", "1", " ", "x", "2", " ", "y", "2", " ", "x", "3", " ", "y", "3", " (", "0 ≤ ", "x", "1", ", ", "y", "1", ", ", "x", "2", ", ", "y", "2", ", ", "x", "3", ", ", "y", "3", " ≤ 20", "), representing 3 points that describe the shape of each of 4 ships. It is guaranteed that 3 points in each line will represent a non-degenerate triangle."]], "output_specification": [["First line should contain minimum number of columns enough to land all spaceships."]], "sample_test_input": ["0 0 1 0 1 2", "0 0 0 2 2 2", "0 0 3 0 1 2", "0 0 3 0 2 2"], "sample_test_output": ["4"], "note": [["In the first test case columns can be put in these points: ", "(0, 0), (1, 0), (3, 0), (1, 2)", ". Note that the second ship can land using last 3 columns."], ["In the second test case following points can be chosen: ", "(0, 0), (0, 1), (1, 0), (0, 2), (2, 0), (0, 5), (5, 0), (0, 17), (17, 0)", ". It is impossible to use less than 9 columns."]]}
{"title": ["A. Young Physicist"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains a positive integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", "), then follow ", "n", " lines containing three integers each: the ", "x", "i", " coordinate, the ", "y", "i", " coordinate and the ", "z", "i", " coordinate of the force vector, applied to the body (", " - 100 ≤ ", "x", "i", ", ", "y", "i", ", ", "z", "i", " ≤ 100", ")."]], "output_specification": [["Print the word \"", "YES", "\" if the body is in equilibrium, or the word \"", "NO", "\" if it is not."]], "sample_test_input": ["3", "4 1 7", "-2 4 -1", "1 -5 -3"], "sample_test_output": ["NO"], "note": []}
{"title": ["A. Presents"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["If there's one thing Petya likes more that receiving gifts, that's watching others giving gifts to somebody else. Thus, he safely hid the laptop until the next New Year and made up his mind to watch his friends exchanging gifts while he does not participate in the process. He numbered all his friends with integers from ", "1", " to ", "n", ". Petya remembered that a friend number ", "i", " gave a gift to a friend number ", "p", "i", ". He also remembered that each of his friends received exactly one gift."], ["Now Petya wants to know for each friend ", "i", " the number of a friend who has given him a gift."], []], "input_specification": [["The first line contains one integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") — the quantity of friends Petya invited to the party. The second line contains ", "n", " space-separated integers: the ", "i", "-th number is ", "p", "i", " — the number of a friend who gave a gift to friend number ", "i", ". It is guaranteed that each friend received exactly one gift. It is possible that some friends do not share Petya's ideas of giving gifts to somebody else. Those friends gave the gifts to themselves."]], "output_specification": [["Print ", "n", " space-separated integers: the ", "i", "-th number should equal the number of the friend who gave a gift to friend number ", "i", "."]], "sample_test_input": ["4", "2 3 4 1"], "sample_test_output": ["4 1 2 3"], "note": []}
{"title": ["B. Bets"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["To begin with friends learned the rules: in the race there are ", "n", " sections of equal length and ", "m", " participants. The participants numbered from ", "1", " to ", "m", ". About each participant the following is known:"], [], ["The ", "i", "-th biathlete passes the sections from ", "l", "i", " to ", "r", "i", " inclusive. The competitor runs the whole way in ", "(", "r", "i", " - ", "l", "i", " + 1)·", "t", "i", " time units. It takes him exactly ", "t", "i", " time units to pass each section. In case of the athlete's victory on ", "k", " sections the man who has betted on him receives ", "k", "·", "c", "i", " roubles."], ["In each section the winner is determined ", "independently", " as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed."], ["We should also add that Nikita can bet on each section and on any contestant running in this section."], ["Help the friends find the maximum possible profit."]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 100", "). Then follow ", "m", " lines, each containing 4 integers ", "l", "i", ", ", "r", "i", ", ", "t", "i", ", ", "c", "i", " (", "1 ≤ ", "l", "i", " ≤ ", "r", "i", " ≤ ", "n", ", ", "1 ≤ ", "t", "i", ", ", "c", "i", " ≤ 1000", ")."]], "output_specification": [["Print a single integer, the maximal profit in roubles that the friends can get. In each of ", "n", " sections it is not allowed to place bets on more than one sportsman."]], "sample_test_input": ["4 4", "1 4 20 5", "1 3 21 10", "3 3 4 30", "3 4 4 20"], "sample_test_output": ["60"], "note": [["In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles."], ["In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles."]]}
{"title": ["C. Game"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["After the composing composite artifact, all the components disappear."], ["Kostya is the head of the alliance, so he has to remember, what artifacts has not only himself, but also his allies. You must identify by sequence of artifacts purchased by Kostya and his allies, how many and which artifacts has been collected by each of them. It is believed that initially no one has any artifacts. "], []], "input_specification": [["The first line has 4 natural numbers: ", "k", " (", "1 ≤ ", "k", " ≤ 100", ") — the number of Kostya's allies, ", "n", " (", "1 ≤ ", "n", " ≤ 50", ") — the number of basic artifacts, ", "m", " (", "0 ≤ ", "m", " ≤ 50", ") — the number of composite artifacts, ", "q", " (", "1 ≤ ", "q", " ≤ 500", ") — the number of his friends' purchases. The following ", "n", " lines contain the names of basic artifacts. After them ", "m", " lines contain the descriptions of composite artifacts in the following format:"], ["<Art. Name>: <Art. №1> <Art. №1 Number>, <Art. №2> <Art. №2 Number>, ... <Art. №X> <Art. №Х Number>"], ["All the numbers are natural numbers not exceeding 100 (", "1 ≤ ", "X", " ≤ ", "n", ")."], ["The names of all artifacts are different, they are composed of lowercase Latin letters, and the length of each name is from 1 to 100 characters inclusive. All the words in the format of the description of a composite artifact are separated by exactly one space. It is guaranteed that all components of the new artifact are different and have already been met in the input data as the names of basic artifacts. "], ["Next, each of the following ", "q", " lines is characterized by the number ", "a", "i", ", the number of a friend who has bought the artifact (", "1 ≤ ", "a", "i", " ≤ ", "k", "), and the name of the purchased basic artifact. Let's assume that the backpacks of the heroes are infinitely large and any artifact bought later can fit in there."], ["It is guaranteed that after the ", "i", "-th purchase no more than one opportunity to collect the composite artifact appears. If such an opportunity arose, the hero must take advantage of it."]], "output_specification": [["The output file should consist of ", "k", " blocks. The first line should contain number ", "b", "i", " — the number of different artifacts the ", "i", "-th ally has. Then the block should contain ", "b", "i", " lines with the names of these artifacts and the number of these artifacts. At that the lines should be printed in accordance with the lexicographical order of the names of the artifacts. In each block all the artifacts must be different, and all the numbers except the ", "b", "i", " should be positive."]], "sample_test_input": ["2 3 2 5", "desolator", "refresher", "perseverance", "vanguard: desolator 1, refresher 1", "maelstorm: perseverance 2", "1 desolator", "2 perseverance", "1 refresher", "2 desolator", "2 perseverance"], "sample_test_output": ["1", "vanguard 1", "2", "desolator 1", "maelstorm 1"], "note": []}
{"title": ["B. Permutation"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The sequence of ", "n", " integers is called a permutation if it contains all integers from ", "1", " to ", "n", " exactly once."], ["You are given an arbitrary sequence ", "a", "1", ", ", "a", "2", ", ..., ", "a", "n", " containing ", "n", " integers. Each integer is not less than ", "1", " and not greater than ", "5000", ". Determine what minimum number of elements Polycarpus needs to change to get a permutation (he should not delete or add numbers). In a single change he can modify any single sequence element (i. e. replace it with another integer)."], []], "input_specification": [["The first line of the input data contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 5000", ") which represents how many numbers are in the sequence. The second line contains a sequence of integers ", "a", "i", " (", "1 ≤ ", "a", "i", " ≤ 5000, 1 ≤ ", "i", " ≤ ", "n", ")."]], "output_specification": [["Print the only number — the minimum number of changes needed to get the permutation."]], "sample_test_input": ["3", "3 1 2"], "sample_test_output": ["0"], "note": [["The first sample contains the permutation, which is why no replacements are required."], ["In the second sample it is enough to replace the first element with the number 1 and that will make the sequence the needed permutation."], ["In the third sample we can replace the second element with number 4 and the fourth element with number 2."]]}
{"title": ["B. Ternary Logic"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["It turned out that the operation does exist (however, it is called ", "tor", ") and it works like this. Suppose that we need to calculate the value of the expression ", "a", " ", "tor", " ", "b", ". Both numbers ", "a", " and ", "b", " are written in the ternary notation one under the other one (", "b", " under ", "a", "). If they have a different number of digits, then leading zeroes are added to the shorter number until the lengths are the same. Then the numbers are summed together digit by digit. The result of summing each two digits is calculated modulo 3. Note that there is no carry between digits (i. e. during this operation the digits aren't transferred). For example: ", "14", "10", " ", "tor", " 50", "10", " = 0112", "3", " ", "tor", " 1212", "3", " = 1021", "3", " = 34", "10", "."], ["Petya wrote numbers ", "a", " and ", "c", " on a piece of paper. Help him find such number ", "b", ", that ", "a", " ", "tor", " ", "b", " = ", "c", ". If there are several such numbers, print the smallest one."], []], "input_specification": [["The first line contains two integers ", "a", " and ", "c", " (", "0 ≤ ", "a", ", ", "c", " ≤ 10", "9", "). Both numbers are written in decimal notation."]], "output_specification": [["Print the single integer ", "b", ", such that ", "a", " ", "tor", " ", "b", " = ", "c", ". If there are several possible numbers ", "b", ", print the smallest one. You should print the number in decimal notation."]], "sample_test_input": ["14 34"], "sample_test_output": ["50"], "note": []}
{"title": ["D. Beautiful Road"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Each of ", "n", " cities wanted to seize power. That's why sometimes one city gathered an army and sent it to campaign against another city."], ["Road making was difficult, so the country had few roads, exactly ", "n", " - 1", ". Also you could reach any city from any other city going on those roads."], ["Even during the war the Oriental people remain spiritually rich and appreciate the beauty of nature. And to keep the memory of this great crusade for the centuries to come, they planted one beautiful tree by the road on which the army spent most time. The Oriental people love nature, that's why if there were several such roads, then one tree was planted by each of them."], ["Recently, when the records of the war were found, it became clear that each city attacked each other one exactly once. There were exactly ", "n", "(", "n", " - 1)", " attacks in total. Everyone has been wondering what road after those wars became the most beautiful, that is, by which road they planted the largest number of beautiful trees."], []], "input_specification": [["The first line contains an integer ", "n", " (", "2 ≤ ", "n", " ≤ 10", "5", "), which represents the number of cities. Next ", "n", " - 1", " lines contain three integers each: the numbers of cities ", "a", "i", ", ", "b", "i", " (", "1 ≤ ", "a", "i", ", ", "b", "i", " ≤ ", "n", "), connected by the ", "i", "-th road and the number of days ", "d", "i", " the army spends to go on it (", "1 ≤ ", "d", "i", " ≤ 10", "9", "). The lengths of several roads may coincide."]], "output_specification": [["Print on the first line two integers — the number of beautiful trees on the most beautiful road and the number of the most beautiful roads. Print on the second line the list of the most beautiful roads in the sorted order by the numbers' increasing. The roads are numbered from ", "1", " to ", "n", " - 1", " in the order in which they are given in the input data."], ["Please, do not use ", "%lld", " specificator to write 64-bit integers in C++. It is preferred to use the ", "cout", " stream (also you may use the ", "%I64d", " specificator)."]], "sample_test_input": ["2", "2 1 5"], "sample_test_output": ["2 1", "1 "], "note": []}
{"title": ["B. Keyboard"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Vasya can press one or two keys with one hand. However, he can only press two keys if the Euclidean distance between the centers of the keys does not exceed ", "x", ". The keys are considered as squares with a side equal to 1. There are no empty spaces between neighbouring keys."], ["Vasya is a very lazy boy, that's why he tries to type with one hand as he eats chips with his other one. However, it is possible that some symbol can't be typed with one hand only, because the distance between it and the closest \"Shift\" key is strictly larger than ", "x", ". In this case he will have to use his other hand. Having typed the symbol, Vasya returns other hand back to the chips."], ["You are given Vasya's keyboard and the text. Count the minimum number of times Vasya will have to use the other hand."], []], "input_specification": [["The first line contains three integers ", "n", ", ", "m", ", ", "x", " (", "1 ≤ ", "n", ", ", "m", " ≤ 30, 1 ≤ ", "x", " ≤ 50", ")."], ["Next ", "n", " lines contain descriptions of all the keyboard keys. Each line contains the descriptions of exactly ", "m", " keys, without spaces. The letter keys are marked with the corresponding lowercase letters. The \"Shift\" keys are marked with the \"", "S", "\" symbol. "], ["Then follow the length of the text ", "q", " ", "(1 ≤ ", "q", " ≤ 5·10", "5", ")", ". The last line contains the text ", "T", ", which consists of ", "q", " symbols, which are uppercase and lowercase Latin letters."]], "output_specification": [["If Vasya can type the text, then print the minimum number of times he will have to use his other hand. Otherwise, print \"-1\" (without the quotes)."]], "sample_test_input": ["2 2 1", "ab", "cd", "1", "A"], "sample_test_output": ["-1"], "note": [["In the first sample the symbol \"", "A", "\" is impossible to print as there's no \"Shift\" key on the keyboard."], ["In the second sample the symbol \"", "e", "\" is impossible to print as there's no such key on the keyboard."], ["In the fourth sample the symbols \"", "T", "\", \"", "G", "\" are impossible to print with one hand. The other letters that are on the keyboard can be printed. Those symbols come up in the text twice, thus, the answer is 2."]]}
{"title": ["E. Subsegments"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains two positive integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 10", "5", ", 1 ≤ ", "k", " ≤ ", "n", ") — the number of array elements and the length of the segment. "], ["Then follow ", "n", " lines: the ", "i", "-th one contains a single number ", "a", "i", " (", " - 10", "9", " ≤ ", "a", "i", " ≤ 10", "9", "). "]], "output_specification": [["Print ", "n", "–", "k", " + 1", " numbers, one per line: on the ", "i", "-th line print of the maximum number of those numbers from the subarray ", "a", "i", " ", "a", "i", " + 1", " … ", "a", "i", " + ", "k", " - 1", " that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print \"", "Nothing", "\"."]], "sample_test_input": ["5 3", "1", "2", "2", "3", "3"], "sample_test_output": ["1", "3", "2"], "note": []}
{"title": ["A. Cookies"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["To stack the cookies the little walrus uses the following algorithm. He takes out of the repository the largest cookie which can fit in some place in the box and puts it there. Everything could be perfect but alas, in the repository the little walrus has infinitely many cookies of size ", "2", " and larger, and there are no cookies of size ", "1", ", therefore, empty cells will remain in the box. Fangy wants to know how many empty cells will be left in the end."]], "input_specification": [["The first line contains a single integer ", "n", " (", "0 ≤ ", "n", " ≤ 1000", ")."]], "output_specification": [["Print the single number, equal to the number of empty cells in the box. The answer should be printed modulo ", "10", "6", " + 3", "."]], "sample_test_input": ["3"], "sample_test_output": ["9"], "note": [["If the box possesses the base of ", "2", "3", " × 2", "3", " (as in the example), then the cookies will be put there in the following manner: "]]}
{"title": ["D. Dot"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["Help them to determine the winner."]], "input_specification": [["The first line of the input file contains 4 integers ", "x", ", ", "y", ", ", "n", ", ", "d", " (", " - 200 ≤ ", "x", ", ", "y", " ≤ 200, 1 ≤ ", "d", " ≤ 200, 1 ≤ ", "n", " ≤ 20", ") — the initial coordinates of the dot, the distance ", "d", " and the number of vectors. It is guaranteed that the initial dot is at the distance less than ", "d", " from the origin of the coordinates. The following ", "n", " lines each contain two non-negative numbers ", "x", "i", " and ", "y", "i", " (", "0 ≤ ", "x", "i", ", ", "y", "i", " ≤ 200", ") — the coordinates of the i-th vector. It is guaranteed that all the vectors are nonzero and different."]], "output_specification": [["You should print \"", "Anton", "\", if the winner is Anton in case of both players play the game optimally, and \"", "Dasha", "\" otherwise."]], "sample_test_input": ["0 0 2 3", "1 1", "1 2"], "sample_test_output": ["Anton"], "note": [["In the first test, Anton goes to the vector (1;2), and Dasha loses. In the second test Dasha with her first move shifts the dot so that its coordinates are (2;3), and Anton loses, as he has the only possible move — to reflect relatively to the line ", "y", " = ", "x", ". Dasha will respond to it with the same move and return the dot in position (2;3)."]]}
{"title": ["A. String Task"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["Vowels are letters \"A\", \"O\", \"Y\", \"E\", \"U\", \"I\", and the rest are consonants. The program's input is exactly one string, it should return the output as a single string, resulting after the program's processing the initial string."], ["Help Petya cope with this easy task."]], "input_specification": [["The first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from ", "1", " to ", "100", ", inclusive."]], "output_specification": [["Print the resulting string. It is guaranteed that this string is not empty."]], "sample_test_input": ["tour"], "sample_test_output": [".t.r"], "note": []}
{"title": ["E. Tree or not Tree"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You are also given ", "m", " queries represented as ", "(", "v", ", ", "u", ")", " — change the state of all edges on the shortest path from vertex ", "v", " to vertex ", "u", " in graph ", "G", ". If there are several such paths, the lexicographically minimal one is chosen. More formally, let us consider all shortest paths from vertex ", "v", " to vertex ", "u", " as the sequences of vertexes ", "v", ", ", "v", "1", ", ", "v", "2", ", ..., ", "u", ". Among such sequences we choose the lexicographically minimal one."], ["After each query you should tell how many connected components has the graph whose vertexes coincide with the vertexes of graph ", "G", " and edges coincide with the switched on edges of graph ", "G", "."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "3 ≤ ", "n", " ≤ 10", "5", ", ", "1 ≤ ", "m", " ≤ 10", "5", "). Then ", "n", " lines describe the graph edges as ", "a", " ", "b", " (", "1 ≤ ", "a", ", ", "b", " ≤ ", "n", "). Next ", "m", " lines contain the queries as ", "v", " ", "u", " (", "1 ≤ ", "v", ", ", "u", " ≤ ", "n", "). "], ["It is guaranteed that the graph is connected, does not have any self-loops or multiple edges."]], "output_specification": [["Print ", "m", " lines, each containing one integer — the query results."]], "sample_test_input": ["5 2", "2 1", "4 3", "2 4", "2 5", "4 1", "5 4", "1 5"], "sample_test_output": ["3", "3"], "note": [["Let's consider the first sample. We'll highlight the switched on edges blue on the image. "], []]}
{"title": ["C. History"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Everybody knows that the World history encompasses exactly ", "n", " events: the ", "i", "-th event had continued from the year ", "a", "i", " to the year ", "b", "i", " inclusive (", "a", "i", " < ", "b", "i", "). Polycarpus easily learned the dates when each of ", "n", " events started and ended (Polycarpus inherited excellent memory from his great-great-granddad). But the teacher gave him a more complicated task: Polycaprus should know when all events began and ended and he should also find out for each event whether it includes another event. Polycarpus' teacher thinks that an event ", "j", " includes an event ", "i", " if ", "a", "j", " < ", "a", "i", " and ", "b", "i", " < ", "b", "j", ". Your task is simpler: find the number of events that are included in some other event."], []], "input_specification": [["The first input line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", ") which represents the number of events. Next ", "n", " lines contain descriptions of the historical events, one event per line. The ", "i", " + 1", " line contains two integers ", "a", "i", " and ", "b", "i", " (", "1 ≤ ", "a", "i", " < ", "b", "i", " ≤ 10", "9", ") — the beginning and the end of the ", "i", "-th event. No two events start or finish in the same year, that is, ", "a", "i", " ≠ ", "a", "j", ", ", "a", "i", " ≠ ", "b", "j", ", ", "b", "i", " ≠ ", "a", "j", ", ", "b", "i", " ≠ ", "b", "j", " for all ", "i", ", ", "j", " (where ", "i", " ≠ ", "j", "). Events are given in arbitrary order."]], "output_specification": [["Print the only integer — the answer to the problem."]], "sample_test_input": ["5", "1 10", "2 9", "3 8", "4 7", "5 6"], "sample_test_output": ["4"], "note": [["In the first example the fifth event is contained in the fourth. Similarly, the fourth event is contained in the third, the third — in the second and the second — in the first."], ["In the second example all events except the first one are contained in the first."], ["In the third example only one event, so the answer is 0."]]}
{"title": ["D. Space mines"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Darth Wader found out the location of a rebels' base. Now he is going to destroy the base (and the whole planet that the base is located at), using the Death Star."], ["When the rebels learnt that the Death Star was coming, they decided to use their new secret weapon — space mines. Let's describe a space mine's build."], ["Each space mine is shaped like a ball (we'll call it the mine body) of a certain radius ", "r", " with the center in the point ", "O", ". Several spikes protrude from the center. Each spike can be represented as a segment, connecting the center of the mine with some point ", "P", ", such that ", " (transporting long-spiked mines is problematic), where ", "|", "OP", "|", " is the length of the segment connecting ", "O", " and ", "P", ". It is convenient to describe the point ", "P", " by a vector ", "p", " such that ", "P", " = ", "O", " + ", "p", "."], ["The Death Star is shaped like a ball with the radius of ", "R", " (", "R", " exceeds any mine's radius). It moves at a constant speed along the ", "v", " vector at the speed equal to ", "|", "v", "|", ". At the moment the rebels noticed the Star of Death, it was located in the point ", "A", "."], ["The rebels located ", "n", " space mines along the Death Star's way. You may regard the mines as being idle. The Death Star does not know about the mines' existence and cannot notice them, which is why it doesn't change the direction of its movement. As soon as the Star of Death touched the mine (its body or one of the spikes), the mine bursts and destroys the Star of Death. A touching is the situation when there is a point in space which belongs both to the mine and to the Death Star. It is considered that Death Star will not be destroyed if it can move infinitely long time without touching the mines."], ["Help the rebels determine whether they will succeed in destroying the Death Star using space mines or not. If they will succeed, determine the moment of time when it will happen (starting from the moment the Death Star was noticed)."], []], "input_specification": [["The first input data line contains ", "7", " integers ", "A", "x", ", ", "A", "y", ", ", "A", "z", ", ", "v", "x", ", ", "v", "y", ", ", "v", "z", ", ", "R", ". They are the Death Star's initial position, the direction of its movement, and its radius (", " - 10 ≤ ", "v", "x", ", ", "v", "y", ", ", "v", "z", " ≤ 10", ", ", "|", "v", "| > 0", ", ", "0 < ", "R", " ≤ 100", ")."], ["The second line contains an integer ", "n", ", which is the number of mines (", "1 ≤ ", "n", " ≤ 100", "). Then follow ", "n", " data blocks, the ", "i", "-th of them describes the ", "i", "-th mine."], ["The first line of each block contains ", "5", " integers ", "O", "ix", ", ", "O", "iy", ", ", "O", "iz", ", ", "r", "i", ", ", "m", "i", ", which are the coordinates of the mine centre, the radius of its body and the number of spikes (", "0 < ", "r", "i", " < 100, 0 ≤ ", "m", "i", " ≤ 10", "). Then follow ", "m", "i", " lines, describing the spikes of the ", "i", "-th mine, where the ", "j", "-th of them describes the ", "i", "-th spike and contains ", "3", " integers ", "p", "ijx", ", ", "p", "ijy", ", ", "p", "ijz", " — the coordinates of the vector where the given spike is directed (", ")."], ["The coordinates of the mines' centers and the center of the Death Star are integers, their absolute value does not exceed ", "10000", ". It is guaranteed that ", "R", " > ", "r", "i", " for any ", "1 ≤ ", "i", " ≤ ", "n", ". For any mines ", "i", " ≠ ", "j", " the following inequality if fulfilled: ", ". Initially the Death Star and the mines do not have common points."]], "output_specification": [["If the rebels will succeed in stopping the Death Star using space mines, print the time from the moment the Death Star was noticed to the blast."], ["If the Death Star will not touch a mine, print \"-1\" (without quotes)."], ["For the answer the absolute or relative error of ", "10", " - 6", " is acceptable."]], "sample_test_input": ["0 0 0 1 0 0 5", "2", "10 8 0 2 2", "0 -3 0", "2 2 0", "20 0 0 4 3", "2 4 0", "-4 3 0", "1 -5 0"], "sample_test_output": ["10.0000000000"], "note": []}
{"title": ["E. Fire and Ice"], "time_limit": ["time limit per test", "0.5 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["The ", "n", "-long segment is located at a distance equal exactly to ", "1", " from the castle walls. It can be imaginarily divided into unit segments. On some of the unit segments ", "fire demons", " are located — no more than one demon per position. Each demon is characterised by his ", "strength", " - by some positive integer. We can regard the fire demons being idle."], ["Initially Solomon is positioned on the fortress wall. He can perform the following actions several times in a row: "], [], ["Solomon spends exactly a second on each of these actions."], ["As the result of Solomon's actions, ice blocks' segments fall down. When an ice block falls on a fire demon, the block evaporates and the demon's strength is reduced by ", "1", ". When the demons' strength is equal to ", "0", ", the fire demon vanishes. The picture below shows how it happens. The ice block that falls on the position with no demon, breaks into lots of tiny pieces and vanishes without hurting anybody."]], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 1000", "). The next line contains ", "n", " numbers, the ", "i", "-th of them represents the strength of the fire demon standing of the ", "i", "-th position, an integer from ", "1", " to ", "100", ". If there's no demon on the ", "i", "-th position, then the ", "i", "-th number equals to ", "0", ". It is guaranteed that the input data have at least one fire demon."]], "output_specification": [["Print a string of minimum length, containing characters \"", "L", "\", \"", "R", "\" and \"", "A", "\" — the succession of actions leading to the required result."], ["If there are several possible answers, print any of them."]], "sample_test_input": ["3", "1 0 1"], "sample_test_output": ["ARARARALLLA"], "note": []}
{"title": ["A. Cableway"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A cableway is represented by some cablecars, hanged onto some cable stations by a cable. A cable is scrolled cyclically between the first and the last cable stations (the first of them is located at the bottom of the mountain and the last one is located at the top). As the cable moves, the cablecar attached to it move as well."], ["The number of cablecars is divisible by three and they are painted three colors: red, green and blue, in such manner that after each red cablecar goes a green one, after each green cablecar goes a blue one and after each blue cablecar goes a red one. Each cablecar can transport no more than two people, the cablecars arrive with the periodicity of one minute (i. e. every minute) and it takes exactly ", "30", " minutes for a cablecar to get to the top."], ["All students are divided into three groups: ", "r", " of them like to ascend only in the red cablecars, ", "g", " of them prefer only the green ones and ", "b", " of them prefer only the blue ones. A student never gets on a cablecar painted a color that he doesn't like,"], ["The first cablecar to arrive (at the moment of time ", "0", ") is painted red. Determine the least time it will take all students to ascend to the mountain top."], []], "input_specification": [["The first line contains three integers ", "r", ", ", "g", " and ", "b", " (", "0 ≤ ", "r", ", ", "g", ", ", "b", " ≤ 100", "). It is guaranteed that ", "r", " + ", "g", " + ", "b", " > 0", ", it means that the group consists of at least one student. "]], "output_specification": [["Print a single number — the minimal time the students need for the whole group to ascend to the top of the mountain."]], "sample_test_input": ["1 3 2"], "sample_test_output": ["34"], "note": [["Let's analyze the first sample."], ["At the moment of time ", "0", " a red cablecar comes and one student from the ", "r", " group get on it and ascends to the top at the moment of time ", "30", "."], ["At the moment of time ", "1", " a green cablecar arrives and two students from the ", "g", " group get on it; they get to the top at the moment of time ", "31", "."], ["At the moment of time ", "2", " comes the blue cablecar and two students from the ", "b", " group get on it. They ascend to the top at the moment of time ", "32", "."], ["At the moment of time ", "3", " a red cablecar arrives but the only student who is left doesn't like red and the cablecar leaves empty."], ["At the moment of time ", "4", " a green cablecar arrives and one student from the ", "g", " group gets on it. He ascends to top at the moment of time ", "34", "."], ["Thus, all the students are on the top, overall the ascension took exactly ", "34", " minutes."]]}
{"title": ["C. Round Table Knights"], "time_limit": ["time limit per test", "0.5 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Merlin, the wizard predicted to King Arthur that the next month will turn out to be particularly fortunate if the ", "regular", " polygon can be found. On all vertices of the polygon knights in a good mood should be located. Otherwise, the next month will bring misfortunes."], ["A convex polygon is regular if all its sides have same length and all his angles are equal. In this problem we consider only regular polygons with at least 3 vertices, i. e. only nondegenerated."], ["On a picture below some examples of such polygons are present. Green points mean knights in a good mood. Red points mean ones in a bad mood."], [], ["King Arthur knows the knights' moods. Help him find out if the next month will be fortunate or not."]], "input_specification": [["The first line contains number ", "n", ", which is the number of knights at the round table (", "3 ≤ ", "n", " ≤ 10", "5", "). The second line contains space-separated moods of all the ", "n", " knights in the order of passing them around the table. \"1\" means that the knight is in a good mood an \"0\" means that he is in a bad mood."]], "output_specification": [["Print \"", "YES", "\" without the quotes if the following month will turn out to be lucky. Otherwise, print \"", "NO", "\"."]], "sample_test_input": ["3", "1 1 1"], "sample_test_output": ["YES"], "note": []}
{"title": ["B. Progress Bar"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A bar is represented as ", "n", " squares, located in line. To add clarity, let's number them with positive integers from ", "1", " to ", "n", " from the left to the right. Each square has saturation (", "a", "i", " for the ", "i", "-th square), which is measured by an integer from ", "0", " to ", "k", ". When the bar for some ", "i", " (", "1 ≤ ", "i", " ≤ ", "n", ") is displayed, squares ", "1, 2, ... , ", "i", " - 1", " has the saturation ", "k", ", squares ", "i", " + 1, ", "i", " + 2, ... , ", "n", " has the saturation ", "0", ", and the saturation of the square ", "i", " can have any value from ", "0", " to ", "k", "."], ["So some first squares of the progress bar always have the saturation ", "k", ". Some last squares always have the saturation ", "0", ". And there is no more than one square that has the saturation different from ", "0", " and ", "k", "."], ["The degree of the process's completion is measured in percents. Let the process be ", "t", "% completed. Then the following inequation is fulfilled: "], [], ["An example of such a bar can be seen on the picture."], []], "input_specification": [["We are given 3 space-separated integers ", "n", ", ", "k", ", ", "t", " (", "1 ≤ ", "n", ", ", "k", " ≤ 100", ", ", "0 ≤ ", "t", " ≤ 100", ")."]], "output_specification": [["Print ", "n", " numbers. The ", "i", "-th of them should be equal to ", "a", "i", "."]], "sample_test_input": ["10 10 54"], "sample_test_output": ["10 10 10 10 10 4 0 0 0 0 "], "note": []}
{"title": ["E. Information Reform"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The North Pole governor decided to carry out an information reform. Several cities were decided to be chosen and made regional centers. Maintaining a region center takes ", "k", " fishlars (which is a local currency) per year. It is assumed that a regional center always has information on the latest news."], ["For every city which is not a regional center, it was decided to appoint a regional center which will be responsible for keeping this city informed. In that case the maintenance costs will be equal to ", "d", "len", " fishlars per year, where ", "len", " is the distance from a city to the corresponding regional center, measured in the number of roads along which one needs to go."], ["Your task is to minimize the costs to carry out the reform."], []], "input_specification": [["The first line contains two given numbers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 180, 1 ≤ ", "k", " ≤ 10", "5", ")."], ["The second line contains ", "n", " - 1", " integers ", "d", "i", ", numbered starting with 1 (", "d", "i", " ≤ ", "d", "i", " + 1", ", 0 ≤ ", "d", "i", " ≤ 10", "5", ")."], ["Next ", "n", " - 1", " lines contain the pairs of cities connected by a road."]], "output_specification": [["On the first line print the minimum number of fishlars needed for a year's maintenance. On the second line print ", "n", " numbers, where the ", "i", "-th number will represent the number of the regional center, appointed to the ", "i", "-th city. If the ", "i", "-th city is a regional center itself, then you should print number ", "i", "."], ["If there are several solutions to that problem, print any of them."]], "sample_test_input": ["8 10", "2 5 9 11 15 19 20", "1 4", "1 3", "1 7", "4 6", "2 8", "2 3", "3 5"], "sample_test_output": ["38", "3 3 3 4 3 4 3 3 "], "note": []}
{"title": ["B. Digits Permutations"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Then Andrey got bored from looking at the same number and he started to swap digits first in one, then in the other number, then again in the first number and so on (arbitrary number of changes could be made in each number). At some point it turned out that if we sum the resulting numbers, then the number of zeroes with which the sum will end would be maximum among the possible variants of digit permutations in those numbers."], ["Given number ", "n", ", can you find the two digit permutations that have this property?"], []], "input_specification": [["The first line contains a positive integer ", "n", " — the original number. The number of digits in this number does not exceed ", "10", "5", ". The number is written without any leading zeroes."]], "output_specification": [["Print two permutations of digits of number ", "n", ", such that the sum of these numbers ends with the maximum number of zeroes. The permutations can have leading zeroes (if they are present, they all should be printed). The permutations do not have to be different. If there are several answers, print any of them."]], "sample_test_input": ["198"], "sample_test_output": ["981", "819"], "note": []}
{"title": ["A. Literature Lesson"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Let's consider that all lines in the poems consist of lowercase Latin letters (without spaces). Letters \"", "a", "\", \"", "e", "\", \"", "i", "\", \"", "o", "\", \"", "u", "\" are considered vowels."], ["Two lines rhyme if their suffixes that start from the ", "k", "-th vowels (counting from the end) match. If a line has less than ", "k", " vowels, then such line can't rhyme with any other line. For example, if ", "k", " = 1", ", lines ", "commit", " and ", "hermit", " rhyme (the corresponding suffixes equal ", "it", "), and if ", "k", " = 2", ", they do not rhyme (", "ommit", " ≠ ", "ermit", ")."], ["Today on a literature lesson Vera learned that quatrains can contain four different schemes of rhymes, namely the following ones (the same letters stand for rhyming lines): "], [], ["If all lines of a quatrain pairwise rhyme, then the quatrain can belong to any rhyme scheme (this situation is represented by ", "aaaa", ")."], ["If all quatrains of a poem belong to the same rhyme scheme, then we can assume that the whole poem belongs to this rhyme scheme. If in each quatrain all lines pairwise rhyme, then the rhyme scheme of the poem is ", "aaaa", ". Let us note that it doesn't matter whether lines from different quatrains rhyme with each other or not. In other words, it is possible that different quatrains aren't connected by a rhyme."], ["Vera got a long poem as a home task. The girl has to analyse it and find the poem rhyme scheme. Help Vera cope with the task."]], "input_specification": [["The first line contains two integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 2500", ", ", "1 ≤ ", "k", " ≤ 5", ") — the number of quatrains in the poem and the vowel's number, correspondingly. Next ", "4", "n", " lines contain the poem. Each line is not empty and only consists of small Latin letters. The total length of the lines does not exceed ", "10", "4", "."], ["If we assume that the lines are numbered starting from 1, then the first quatrain contains lines number ", "1", ", ", "2", ", ", "3", ", ", "4", "; the second one contains lines number ", "5", ", ", "6", ", ", "7", ", ", "8", "; and so on."]], "output_specification": [["Print the rhyme scheme of the poem as \"", "aabb", "\", \"", "abab", "\", \"", "abba", "\", \"", "aaaa", "\"; or \"", "NO", "\" if the poem does not belong to any of the above mentioned schemes."]], "sample_test_input": ["1 1", "day", "may", "sun", "fun"], "sample_test_output": ["aabb"], "note": [["In the last sample both quatrains have rhymes but finding the common scheme is impossible, so the answer is \"", "NO", "\"."]]}
{"title": ["D. World of Darkraft"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["In this part Roma fights with a cunning enemy magician. The battle takes place on a rectangular field plaid ", "n", " × ", "m", ". Each cell contains one magical character: ", "L", ", ", "R", " or ", "X", ". Initially all the squares of the field are \"active\"."], ["The players, Roma and enemy magician, take turns. Roma makes the first move. During a move a player selects one of the active cells. Then depending on the image in the character in the cell one of the following actions takes place: "], [], ["If the next player cannot make a move (i.e., all cells are inactive), he loses."], ["Roma has been trying to defeat the computer opponent for three days but he just keeps losing. He asks you to help him and determine whether it is guaranteed that he can beat the opponent, or he will have to hack the game."]], "input_specification": [["The first line contains two space-separated integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 20", ")."], ["Next ", "n", " lines contain ", "m", " characters describing the playing field: the ", "j", "-th character of the ", "i", "-th line equals to the magical character of the corresponding field square."]], "output_specification": [["On the first line print \"", "WIN", "\" if Roma can win or \"", "LOSE", "\" if it is impossible to win considering that the opponent pays optimally."]], "sample_test_input": ["2 2", "RL", "LR"], "sample_test_output": ["LOSE"], "note": [["In the first test each move makes one diagonal line of the square inactive, thus it is guaranteed that Roma loses after two moves."], ["There are three variants of making a move in the second test: to \"finish off\" the main diagonal line or any of the squares that are left. That means that after three moves the game stops and Roma wins."]]}
{"title": ["A. Petr and Book"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petr decided to start reading it starting from the next day, that is, from Monday. Petr's got a very tight schedule and for each day of the week he knows how many pages he will be able to read on that day. Some days are so busy that Petr will have no time to read whatsoever. However, we know that he will be able to read at least one page a week."], ["Assuming that Petr will not skip days and will read as much as he can every day, determine on which day of the week he will read the last page of the book."], []], "input_specification": [["The first input line contains the single integer ", "n", " (", "1 ≤ ", "n", " ≤ 1000", ") — the number of pages in the book."], ["The second line contains seven non-negative space-separated integers that do not exceed ", "1000", " — those integers represent how many pages Petr can read on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday correspondingly. It is guaranteed that at least one of those numbers is larger than zero."]], "output_specification": [["Print a single number — the number of the day of the week, when Petr will finish reading the book. The days of the week are numbered starting with one in the natural order: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday."]], "sample_test_input": ["100", "15 20 20 15 10 30 45"], "sample_test_output": ["6"], "note": [["Note to the first sample:"], ["By the end of Monday and therefore, by the beginning of Tuesday Petr has 85 pages left. He has 65 pages left by Wednesday, 45 by Thursday, 30 by Friday, 20 by Saturday and on Saturday Petr finishes reading the book (and he also has time to read 10 pages of something else)."], ["Note to the second sample:"], ["On Monday of the first week Petr will read the first page. On Monday of the second week Petr will read the second page and will finish reading the book."]]}
{"title": ["E. Igloo Skyscraper"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There are ", "n", " walruses taking part in the contest. Each walrus is given a unique number from ", "1", " to ", "n", ". After start each walrus begins to build his own igloo skyscraper. Initially, at the moment of time equal to ", "0", ", the height of the skyscraper ", "i", "-th walrus is equal to ", "a", "i", ". Each minute the ", "i", "-th walrus finishes building ", "b", "i", " floors."], ["The journalists that are reporting from the spot where the Olympiad is taking place, make ", "q", " queries to the organizers. Each query is characterized by a group of three numbers ", "l", "i", ", ", "r", "i", ", ", "t", "i", ". The organizers respond to each query with a number ", "x", ", such that:"], ["1. Number ", "x", " lies on the interval from ", "l", "i", " to ", "r", "i", " inclusive (", "l", "i", " ≤ ", "x", " ≤ ", "r", "i", ")."], ["2. The skyscraper of the walrus number ", "x", " possesses the maximum height among the skyscrapers of all walruses from the interval ", "[", "l", "i", ", ", "r", "i", "]", " at the moment of time ", "t", "i", "."], ["For each journalists' query print the number of the walrus ", "x", " that meets the above-given criteria. If there are several possible answers, print any of them."], []], "input_specification": [["The first line contains numbers ", "n", " and ", "q", " (", "1 ≤ ", "n", ", ", "q", " ≤ 10", "5", "). Next ", "n", " lines contain pairs of numbers ", "a", "i", ", ", "b", "i", " (", "1 ≤ ", "a", "i", ", ", "b", "i", " ≤ 10", "9", "). Then follow ", "q", " queries i the following format ", "l", "i", ", ", "r", "i", ", ", "t", "i", ", one per each line (", "1 ≤ ", "l", "i", " ≤ ", "r", "i", " ≤ ", "n", ", ", "0 ≤ ", "t", "i", " ≤ 10", "6", "). All input numbers are integers."]], "output_specification": [["For each journalists' query print the number of the walrus ", "x", " that meets the criteria, given in the statement. Print one number per line."]], "sample_test_input": ["5 4", "4 1", "3 5", "6 2", "3 5", "6 5", "1 5 2", "1 3 5", "1 1 0", "1 5 0"], "sample_test_output": ["5", "2", "1", "5"], "note": []}
{"title": ["C. Ski Base"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["In the constructing process ", "m", " bidirectional ski roads will be built. The roads are built one after another: first the road number ", "1", " will be built, then the road number ", "2", ", and so on. The ", "i", "-th road connects the junctions with numbers ", "a", "i", " and ", "b", "i", "."], ["Track", " is the route with the following properties: "], [], ["Let's consider the ", "ski base", " as a non-empty set of roads that can be divided into one or more tracks so that exactly one track went along each road of the chosen set. Besides, each track can consist only of roads from the chosen set. Ski base doesn't have to be connected."], ["Two ski bases are considered different if they consist of different road sets."], ["After building each new road the Walrusland government wants to know the number of variants of choosing a ski base based on some subset of the already built roads. The government asks you to help them solve the given problem."]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "2 ≤ ", "n", " ≤ 10", "5", ", 1 ≤ ", "m", " ≤ 10", "5", "). They represent the number of junctions and the number of roads correspondingly. Then on ", "m", " lines follows the description of the roads in the order in which they were built. Each road is described by a pair of integers ", "a", "i", " and ", "b", "i", " (", "1 ≤ ", "a", "i", ", ", "b", "i", " ≤ ", "n", ", ", "a", "i", " ≠ ", "b", "i", ") — the numbers of the connected junctions. There could be more than one road between a pair of junctions."]], "output_specification": [["Print ", "m", " lines: the ", "i", "-th line should represent the number of ways to build a ski base after the end of construction of the road number ", "i", ". The numbers should be printed modulo ", "1000000009", " (", "10", "9", " + 9", ")."]], "sample_test_input": ["3 4", "1 3", "2 3", "1 2", "1 2"], "sample_test_output": ["0", "0", "1", "3"], "note": [["Let us have 3 junctions and 4 roads between the junctions have already been built (as after building all the roads in the sample): 1 and 3, 2 and 3, 2 roads between junctions 1 and 2. The land lot for the construction will look like this:"], [], ["The land lot for the construction will look in the following way:"], []]}
{"title": ["B. Binary Number"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Fangy takes some positive integer ", "x", " and wants to get a number one from it. While ", "x", " is not equal to ", "1", ", Fangy repeats the following action: if ", "x", " is odd, then he adds ", "1", " to it, otherwise he divides ", "x", " by ", "2", ". Fangy knows that for any positive integer number the process ends in finite time."], ["How many actions should Fangy perform to get a number one from number ", "x", "?"], []], "input_specification": [["The first line contains a positive integer ", "x", " in a ", "binary system", ". It is guaranteed that the first digit of ", "x", " is different from a zero and the number of its digits does not exceed ", "10", "6", "."]], "output_specification": [["Print the required number of actions."]], "sample_test_input": ["1"], "sample_test_output": ["0"], "note": [["Let's consider the third sample. Number ", "101110", " is even, which means that we should divide it by ", "2", ". After the dividing Fangy gets an odd number ", "10111", " and adds one to it. Number ", "11000", " can be divided by ", "2", " three times in a row and get number ", "11", ". All that's left is to increase the number by one (we get ", "100", "), and then divide it by ", "2", " two times in a row. As a result, we get ", "1", "."]]}
{"title": ["D. Solitaire"], "time_limit": ["time limit per test", "1.5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Vasya lays out ", "nm", " cards as a rectangle ", "n", " × ", "m", ". If there are jokers among them, then Vasya should change them with some of the rest of ", "54 - ", "nm", " cards (which are not layed out) so that there were no jokers left. Vasya can pick the cards to replace the jokers arbitrarily. Remember, that each card presents in pack exactly once (i. e. ", "in a single copy", "). Vasya tries to perform the replacements so that the solitaire was ", "solved", "."], ["Vasya thinks that the solitaire is solved if after the jokers are replaced, there exist two non-overlapping squares ", "3 × 3", ", inside each of which all the cards either have the same suit, or pairwise different ranks."], ["Determine by the initial position whether the solitaire can be solved or not. If it can be solved, show the way in which it is possible."], []], "input_specification": [["The first line contains integers ", "n", " and ", "m", " (", "3 ≤ ", "n", ", ", "m", " ≤ 17", ", ", "n", " × ", "m", " ≤ 52", "). Next ", "n", " lines contain ", "m", " words each. Each word consists of two letters. The jokers are defined as \"", "J1", "\" and \"", "J2", "\" correspondingly. For the rest of the cards, the first letter stands for the rank and the second one — for the suit. The possible ranks are: \"", "2", "\", \"", "3", "\", \"", "4", "\", \"", "5", "\", \"", "6", "\", \"", "7", "\", \"", "8", "\", \"", "9", "\", \"", "T", "\", \"", "J", "\", \"", "Q", "\", \"", "K", "\" and \"", "A", "\". The possible suits are: \"", "C", "\", \"", "D", "\", \"", "H", "\" and \"", "S", "\". All the cards are different."]], "output_specification": [["If the Solitaire can be solved, print on the first line \"", "Solution exists.", "\" without the quotes. On the second line print in what way the jokers can be replaced. Three variants are possible:"], [], ["On the third line print the coordinates of the upper left corner of the first square ", "3 × 3", " in the format \"", "Put the first square to (", "r", ", ", "c", ").", "\", where ", "r", " and ", "c", " are the row and the column correspondingly. In the same manner print on the fourth line the coordinates of the second square ", "3 × 3", " in the format \"", "Put the second square to (", "r", ", ", "c", ").", "\"."], ["If there are several solutions to that problem, print any of them."], ["If there are no solutions, print of the single line \"", "No solution.", "\" without the quotes."]], "sample_test_input": ["4 6", "2S 3S 4S 7S 8S AS", "5H 6H 7H 5S TC AC", "8H 9H TH 7C 8C 9C", "2D 2C 3C 4C 5C 6C"], "sample_test_output": ["No solution."], "note": [["The pretests cover all the possible output formats."]]}
{"title": ["B. INI-file"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Each line in INI-file stands for key-value mapping or defines new section. A key-value line has a format \"", "key=value", "\",where ", "key", " — is the name of some property, and ", "value", " — it's value. It is possible that it will be spaces from the both sides of ", "key", " and/or ", "value", ", the spaces should be ignored."], ["A section line has a format \"", "[section]", "\". It means that all key-value lines after it define properties of the specified section. Of cause, the following section line changes the current section. A section line may have spaces around any of brackets."], ["Also you should ignore comment lines — the first non-space character of comment line is \"", ";", "\"."], ["You task is to write the program which will format given INI-file in a special way: "], []], "input_specification": [["The first line contains single integer ", "n", " (", "1 ≤ ", "n", " ≤ 510", ") — the number of lines in given INI-file."], ["The rest of the input contains a valid INI-file in ", "n", " lines. Values of ", "section", ", ", "key", " and ", "value", " contain only Latin letters, digits, \"", ".", "\" and/or \"", "-", "\"."], ["Each line has length not exceeding 255 characters and not less than 1 character. The total length of all the lines does’t exceed 10000."]], "output_specification": [["Print formatted INI-file."]], "sample_test_input": ["11", "a= 1", "b=a", "a = 2", " ; comment", "[z]", "1=2", "[y]", "2=3", "[z]", "2=1", "[w]"], "sample_test_output": ["a=2", "b=a", "[w]", "[y]", "2=3", "[z]", "1=2", "2=1"], "note": []}
{"title": ["G. Fibonacci army"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Given ", "n", " you should find ", "n", "-th Fibonacci number. The set of Fibonacci numbers start with ", "f", "0", " = ", "f", "1", " = 1", " and for each ", "i", " ≥ 2", ", ", "f", "i", " = ", "f", "i", " - 1", " + ", "f", "i", " - 2", "."], []], "input_specification": [["Input contains a single integer ", "n", " (", "1 ≤ ", "n", " ≤ 20", ")."]], "output_specification": [["Write a single integer. The ", "n", "-th Fibonacci number."]], "sample_test_input": ["2"], "sample_test_output": ["2"], "note": []}
{"title": ["B. Land Lot"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 50", ") which represent the garden location. The next ", "n", " lines contain ", "m", " numbers 0 or 1, which describe the garden on the scheme. The zero means that a tree doesn’t grow on this square and the 1 means that there is a growing tree. The last line contains two integers ", "a", " and ", "b", " (", "1 ≤ ", "a", ", ", "b", " ≤ 50", "). Note that Vasya can choose for building an ", "a", " × ", "b", " rectangle as well a ", "b", " × ", "a", " one, i.e. the side of the lot with the length of ", "a", " can be located as parallel to the garden side with the length of ", "n", ", as well as parallel to the garden side with the length of ", "m", "."]], "output_specification": [["Print the minimum number of trees that needs to be chopped off to select a land lot ", "a", " × ", "b", " in size to build a house on. It is guaranteed that at least one lot location can always be found, i. e. either ", "a", " ≤ ", "n", " and ", "b", " ≤ ", "m", ", or ", "a", " ≤ ", "m", " и ", "b", " ≤ ", "n", "."]], "sample_test_input": ["2 2", "1 0", "1 1", "1 1"], "sample_test_output": ["0"], "note": [["In the second example the upper left square is (1,1) and the lower right is (3,2)."]]}
{"title": ["E. Ali goes shopping"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["When Ali entered a shop, he saw that the shopkeeper was a programmer and since there is no money in programming he had changed his career. The shopkeeper told Ali that he can buy anything for free if he could answer a simple question in ", "10", " seconds. But to see the question Ali has to pay 3 tomans."], ["Ali agreed instantly and the shopkeeper handed him a piece of paper containing the task. The task was indeed very simple. It said: "], ["Let string ", "A", " be ", "ababababababab", ". Which non-empty substring of ", "A", " is repeated the most times in it?"], ["Ali answered fast. He said the answer is ", "a", ". But the shopkeeper said that Ali is wrong and asked him to read the rest of statement:"], ["If several substrings have the maximal repeat time, then the substring with maximal length would be the answer, in case of a tie the alphabetically latest substring will be chosen."], ["So the answer is ", "ab", "."], ["Now Ali wants us to solve this problem for different strings. We don't have a great advantage over Ali, we just have a computer and a weird language."], []], "input_specification": [["The single line consisting of a string ", "A", ". It is non-empty, made of lower-case Latin letters and contains at most ", "30", " characters."]], "output_specification": [["The single line contains the answer."]], "sample_test_input": ["abab"], "sample_test_output": ["ab"], "note": []}
{"title": ["D. Permutations"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There are many tasks on permutations. Today you are going to solve one of them. Let’s imagine that somebody took several permutations (perhaps, with a different number of elements), wrote them down consecutively as one array and then shuffled the resulting array. The task is to restore the initial permutations if it is possible."], []], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", "). The next line contains the mixed array of ", "n", " integers, divided with a single space. The numbers in the array are from ", "1", " to ", "10", "5", "."]], "output_specification": [["If this array can be split into several permutations so that every element of the array belongs to exactly one permutation, print in the first line the number of permutations. The second line should contain ", "n", " numbers, corresponding to the elements of the given array. If the ", "i", "-th element belongs to the first permutation, the ", "i", "-th number should be ", "1", ", if it belongs to the second one, then its number should be ", "2", " and so on. The order of the permutations’ numbering is free."], ["If several solutions are possible, print any one of them. If there’s no solution, print in the first line ", " - 1", "."]], "sample_test_input": ["9", "1 2 3 1 2 1 4 2 5"], "sample_test_output": ["3", "3 1 2 1 2 2 2 3 2"], "note": [["In the first sample test the array is split into three permutations: ", "(2, 1)", ", ", "(3, 2, 1, 4, 5)", ", ", "(1, 2)", ". The first permutation is formed by the second and the fourth elements of the array, the second one — by the third, the fifth, the sixth, the seventh and the ninth elements, the third one — by the first and the eigth elements. Clearly, there are other splitting variants possible. "]]}
{"title": ["F. Oil"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Two cells are considered adjacent if and only if they have a common edge, a path is a sequence ", "c", "1", ", ", "c", "2", ", ..., ", "c", "x", " of cells so that all of them contain oil and for each ", "i", ", ", "c", "i", " is adjacent to ", "c", "i", " - 1", " and ", "c", "i", " + 1", " (if they exist). Two cells are considered ", "connected", " to each other if and only if there exists a path between them. If we dig a well in a certain cell, we can extract oil from all the cells that are ", "connected", " to it by oil paths. It is not allowed to dig wells on empty cells."], ["Dr. Mosaddegh also knows that in Persian Gulf, the empty cells form rows and columns. I. e. if some cell is empty, then it's column is completely empty or it's row is completely empty, or both."], ["Help Dr. Mosaddegh find out how many wells he has to dig to access all the oil in that region."], []], "input_specification": [["In the first line there are two positive integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 100", ")."], ["In the second line there is an integer ", "t", " (", "0 ≤ ", "t", " ≤ ", "n", "), the number of empty rows. ", "t", " distinct positive integers follow, these are the numbers of empty rows and are in range ", "[1, ", "n", "]", "."], ["In the second line there is an integer ", "s", " (", "0 ≤ ", "s", " ≤ ", "m", ") that shows the number of columns not having any oil. ", "s", " distinct positive integers follow, these are the numbers of empty columns and are in range of ", "[1, ", "m", "]", "."], ["Note that rows are numbered from ", "1", " to ", "n", " (from top to bottom) and columns are numbered from ", "1", " to ", "m", " (from left to right)."]], "output_specification": [["A single integer, the minimum number of wells that Dr. Mossadegh has to dig."], ["This is actually finding how many regions are made by removing the given rows and columns."]], "sample_test_input": ["2 3", "1 2", "1 2"], "sample_test_output": ["2"], "note": []}
{"title": ["B. Quiz League"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [[]], "input_specification": [["The first line contains two positive integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 1000", " and ", "1 ≤ ", "k", " ≤ ", "n", ") — the numbers of sectors on the table and the number of the sector where the arrow is pointing. The second line contains ", "n", " numbers: ", "a", "i", " = 0", " if the question from sector ", "i", " has already been asked and ", "a", "i", " = 1", " if the question from sector ", "i", " hasn't been asked yet (", "1 ≤ ", "i", " ≤ ", "n", "). The sectors are given in the clockwise order, the first sector follows after the ", "n", "-th one."]], "output_specification": [["Print the single number — the number of the sector containing the question the experts will be asked. It is guaranteed that the answer exists, that is that not all the questions have already been asked."]], "sample_test_input": ["5 5", "0 1 0 1 0"], "sample_test_output": ["2"], "note": []}
{"title": ["D. String Transformation"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["f", "(", "s", ", ", "i", ", ", "j", ") = ", "s", "[", "i", " + 1... ", "j", " - 1] + ", "r", "(", "s", "[", "j", "... ", "n", " - 1]) + ", "r", "(", "s", "[0... ", "i", "])", "."], ["Here ", "s", "[", "p", "... ", "q", "]", " is a substring of string ", "s", ", that starts in position ", "p", " and ends in position ", "q", " (inclusive); \"", "+", "\" is the string concatenation operator; ", "r", "(", "x", ")", " is a string resulting from writing the characters of the ", "x", " string in the reverse order. If ", "j", " = ", "i", " + 1", ", then the substring ", "s", "[", "i", " + 1... ", "j", " - 1]", " is considered empty."], ["You are given two strings ", "a", " and ", "b", ". Find such values of ", "i", " and ", "j", ", that ", "f", "(", "a", ", ", "i", ", ", "j", ") = ", "b", ". Number ", "i", " should be maximally possible. If for this ", "i", " there exists several valid values of ", "j", ", choose the minimal ", "j", "."], []], "input_specification": [["The first two input lines are non-empty strings ", "a", " and ", "b", " correspondingly. Each string's length does not exceed ", "10", "6", " characters. The strings can contain any characters with ASCII codes from 32 to 126 inclusive."]], "output_specification": [["Print two integers ", "i", ", ", "j", " — the answer to the problem. If no solution exists, print \"", "-1 -1", "\" (without the quotes)."]], "sample_test_input": ["Die Polizei untersucht eine Straftat im IT-Bereich.", "untersucht eine Straftat.hciereB-TI mi  ieziloP eiD"], "sample_test_output": ["11 36"], "note": []}
{"title": ["E. Alternative Reality"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Little Vasya, for instance, found himself in a gaming reality and now he has to successfully complete all levels of a very weird game to get back. The gaming reality is a three-dimensional space where ", "n", " points are given. The game has ", "m", " levels and at the beginning of the ", "i", "-th level the player is positioned at some plane ", "Q", "i", " that passes through the origin. On each level Vasya has to use special robots to construct and activate ", "n", " powerful energy spheres of the equal radius with centers at the given points. The player chooses the radius of the spheres himself. The player has to spend ", "R", " units of money to construct spheres whose radius equals ", "R", " (consequently, one can construct spheres whose radius equals zero for free). Besides, once for each level a player can choose any point in space and release a laser ray from there, perpendicular to plane ", "Q", "i", " (this action costs nothing). The ray can either be directed towards the plane or from the plane. The spheres that share at least one point with the ray will be immediately activated. The level is considered completed if the player has managed to activate all spheres. Note that the centers of the spheres are the same for all ", "m", " levels but the spheres do not remain: the player should construct them anew on each new level."], ["Help Vasya find out what minimum sum of money will be enough to complete each level."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", " ≤ 900, 1 ≤ ", "m", " ≤ 100", ") — the number of energetic spheres and the number of levels in the game correspondingly. "], ["Each of the following ", "n", " lines contains three integers ", "x", "i", ", ", "y", "i", ", ", "z", "i", " (", "0 ≤ ", "x", "i", ", ", "y", "i", ", ", "z", "i", " ≤ 10", "4", ") — the coordinates of the center of the ", "i", "-th sphere. Assume that these points do not change their positions throughout the game."], ["Then follow ", "m", " lines, each containing three integers ", "a", "i", ", ", "b", "i", ", ", "c", "i", " (", "0 ≤ ", "a", "i", ", ", "b", "i", ", ", "c", "i", " ≤ 100", ", ", "a", "i", "2", " + ", "b", "i", "2", " + ", "c", "i", "2", " > 0", "). These numbers are the coefficients in the equation of plane ", "Q", "i", " (", "a", "i", "x", " + ", "b", "i", "y", " + ", "c", "i", "z", " = 0", "), where the player is positioned at the beginning of the ", "i", "-th level."]], "output_specification": [["Print ", "m", " numbers, one per line: the ", "i", "-th line should contain the minimum sum of money needed to complete the ", "i", "-th level. The absolute or relative error should not exceed ", "10", " - 6", "."]], "sample_test_input": ["4 1", "0 0 0", "0 1 0", "1 0 0", "1 1 0", "0 0 1"], "sample_test_output": ["0.7071067812"], "note": []}
{"title": ["C. Winnie-the-Pooh and honey"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [[]], "input_specification": [["The first line contains two integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 100, 1 ≤ ", "k", " ≤ 100", "). The second line contains ", "n", " integers ", "a", "1", ", ", "a", "2", ", ..., ", "a", "n", ", separated by spaces (", "1 ≤ ", "a", "i", " ≤ 100", ")."]], "output_specification": [["Print a single number — how many kilos of honey gets Piglet."]], "sample_test_input": ["3 3", "15 8 10"], "sample_test_output": ["9"], "note": []}
{"title": ["C. New Year Snowmen"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", ") — the number of snowballs. The next line contains ", "n", " integers — the balls' radii ", "r", "1", ", ", "r", "2", ", ..., ", "r", "n", " (", "1 ≤ ", "r", "i", " ≤ 10", "9", "). The balls' radii can coincide."]], "output_specification": [["Print on the first line a single number ", "k", " — the maximum number of the snowmen. Next ", "k", " lines should contain the snowmen's descriptions. The description of each snowman should consist of three space-separated numbers — the big ball's radius, the medium ball's radius and the small ball's radius. It is allowed to print the snowmen in any order. If there are several solutions, print any of them."]], "sample_test_input": ["7", "1 2 3 4 5 6 7"], "sample_test_output": ["2", "3 2 1", "6 5 4"], "note": []}
{"title": ["F. New Year Snowflake"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The New Year snowflake consists of tiny ice crystals, which can be approximately regarded as points on the plane. The beauty of the New Year snowflake is that it has a center of symmetry. This is a point such that for each crystal of the snowflake exists another crystal, symmetrical to it relative to that point. One of the crystals can be placed directly in the center of symmetry."], ["While Constantine was choosing a snowflake among millions of other snowflakes, no less symmetrical and no less magical, then endured a difficult path through the drifts to the house of his mistress, while he was waiting with bated breath for a few long moments before the Beautiful Lady opens the door, some of the snowflake crystals melted and naturally disappeared. Constantine is sure that there were no more than ", "k", " of such crystals, because he handled the snowflake very carefully. Now he is ready to demonstrate to the Beautiful Lady all the power of nanotechnology and restore the symmetry of snowflakes."], ["You are given the coordinates of the surviving snowflake crystals, given in nanometers. Your task is to identify all possible positions of the original center of symmetry."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "k", " (", "1 ≤ ", "n", " ≤ 200 000", ", ", "0 ≤ ", "k", " ≤ 10", ") — the number of the surviving snowflake crystals and the maximum number of melted crystals, correspondingly. Next ", "n", " lines contain the coordinates of the crystals that are left in the following form: \"", "x", "i", " ", "y", "i", "\". The coordinates are integers and do not exceed ", "5·10", "8", " in absolute value. All given points are different."]], "output_specification": [["The first line contains an integer ", "c", " — the number of possible symmetry centers. Next ", "c", " lines should contain the centers' descriptions. Each symmetry center is described by a couple of coordinates \"", "x", " ", "y", "\", separated by a space. Print the coordinates with absolute error not exceeding ", "10", " - 6", ". You are allowed to print the symmetry centers in any order. All printed points should be different. If there exist an infinite number of possible symmetry centers, print the single number \"-1\"."]], "sample_test_input": ["4 0", "0 0", "0 1", "1 0", "1 1"], "sample_test_output": ["1", "0.5 0.5"], "note": []}
{"title": ["A. Frames"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["This time Igor K. got disappointed in one of his hobbies: editing and voicing videos. Moreover, he got disappointed in it so much, that he decided to destroy his secret archive for good. "], ["Igor K. use Pindows XR operation system which represents files and folders by small icons. At that, ", "m", " icons can fit in a horizontal row in any window."], ["Igor K.'s computer contains ", "n", " folders in the D: disk's root catalog. The folders are numbered from ", "1", " to ", "n", " in the order from the left to the right and from top to bottom (see the images). At that the folders with secret videos have numbers from ", "a", " to ", "b", " inclusive. Igor K. wants to delete them forever, at that making as few frame selections as possible, and then pressing Shift+Delete exactly once. What is the minimum number of times Igor K. will have to select the folder in order to select folders from ", "a", " to ", "b", " and only them? Let us note that if some selected folder is selected repeatedly, then it is deselected. Each selection possesses the shape of some rectangle with sides parallel to the screen's borders."], []], "input_specification": [["The only line contains four integers ", "n", ", ", "m", ", ", "a", ", ", "b", " (", "1 ≤ ", "n", ", ", "m", " ≤ 10", "9", ", ", "1 ≤ ", "a", " ≤ ", "b", " ≤ ", "n", "). They are the number of folders in Igor K.'s computer, the width of a window and the numbers of the first and the last folders that need to be deleted."]], "output_specification": [["Print a single number: the least possible number of times Igor K. will have to select the folders using frames to select only the folders with numbers from ", "a", " to ", "b", "."]], "sample_test_input": ["11 4 3 9"], "sample_test_output": ["3"], "note": [["The images below illustrate statement tests."], ["The first test:"], [], ["In this test we can select folders 3 and 4 with out first selection, folders 5, 6, 7, 8 with our second selection and folder 9 with our third, last selection."], ["The second test:"], [], ["In this test we can first select all folders in the first row (2, 3, 4, 5), then — all other ones."]]}
{"title": ["B. End of Exams"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Despite the fact that Igor K., unlike his groupmates, failed to pass a programming test, he decided to invite them to go to a cafe so that each of them could drink a bottle of... fresh cow milk. Having entered the cafe, the ", "m", " friends found ", "n", " different kinds of milk on the menu, that's why they ordered ", "n", " bottles — one bottle of each kind. We know that the volume of milk in each bottle equals ", "w", "."], ["When the bottles were brought in, they decided to pour all the milk evenly among the ", "m", " cups, so that each got a cup. As a punishment for not passing the test Igor was appointed the person to pour the milk. He protested that he was afraid to mix something up and suggested to distribute the drink so that the milk from each bottle was in no more than two different cups. His friends agreed but they suddenly faced the following problem — and what is actually the way to do it?"], ["Help them and write the program that will help to distribute the milk among the cups and drink it as quickly as possible!"], ["Note that due to Igor K.'s perfectly accurate eye and unswerving hands, he can pour any fractional amount of milk from any bottle to any cup."], []], "input_specification": [["The only input data file contains three integers ", "n", ", ", "w", " and ", "m", " (", "1 ≤ ", "n", " ≤ 50", ", ", "100 ≤ ", "w", " ≤ 1000", ", ", "2 ≤ ", "m", " ≤ 50", "), where ", "n", " stands for the number of ordered bottles, ", "w", " stands for the volume of each of them and ", "m", " stands for the number of friends in the company."]], "output_specification": [["Print on the first line \"", "YES", "\" if it is possible to pour the milk so that the milk from each bottle was in no more than two different cups. If there's no solution, print \"", "NO", "\"."], ["If there is a solution, then print ", "m", " more lines, where the ", "i", "-th of them describes the content of the ", "i", "-th student's cup. The line should consist of one or more pairs that would look like \"", "b", " ", "v", "\". Each such pair means that ", "v", " (", "v", " > 0", ") units of milk were poured into the ", "i", "-th cup from bottle ", "b", " (", "1 ≤ ", "b", " ≤ ", "n", "). All numbers ", "b", " on each line should be different."], ["If there are several variants to solve the problem, print any of them. Print the real numbers with no less than 6 digits after the decimal point."]], "sample_test_input": ["2 500 3"], "sample_test_output": ["YES", "1 333.333333", "2 333.333333", "2 166.666667 1 166.666667"], "note": []}
{"title": ["I. Goofy Numbers"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Some numbers are really interesting. Commander Surena defines some interesting properties for non-negative integers:"], [], ["Surena asks you to find out if a given number is happy, happier or upset."]], "input_specification": [["Input contains a single non-negative integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "8", ")."]], "output_specification": [["Write on a single line the type of the integer: ", "happy", ", ", "happier", " or ", "upset", ". Print the type in lowercase letters."]], "sample_test_input": ["99"], "sample_test_output": ["happier"], "note": [["In the second test ", "29994", " is only divisible by ", "2", "."], ["In the third test ", "23", " is a prime number."]]}
{"title": ["D. Flags"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["However, the professor wasn't very much impressed. He decided that the problem represented on Timmy's Online Judge was very dull and simple: it only had three possible colors of flag stripes and only two limitations. He suggested a complicated task to Igor K. and the fellow failed to solve it. Of course, we won't tell anybody that the professor couldn't solve it as well."], ["And how about you? Can you solve the problem?"], ["The flags consist of one or several parallel stripes of similar width. The stripes can be one of the following colors: white, black, red or yellow. You should find the number of different flags with the number of stripes from ", "L", " to ", "R", ", if:"], []], "input_specification": [["The only line contains two integers ", "L", " and ", "R", " (", "1 ≤ ", "L", " ≤ ", "R", " ≤ 10", "9", "). They are the lower and upper borders of the number of stripes on the flag."]], "output_specification": [["Print a single number — the number of different flags that would satisfy the condition of the problem and would have from ", "L", " to ", "R", " stripes, modulo ", "1000000007", "."]], "sample_test_input": ["3 4"], "sample_test_output": ["23"], "note": [["In the first test the following flags exist (they are listed in the lexicographical order, the letters B, R, W, Y stand for Black, Red, White and Yellow correspondingly):"], ["3 stripes: BWB, BYB, BYR, RWR, RYR, WBW, WBY, WRW, WRY, YBY, YRY (overall 11 flags)."], ["4 stripes: BWBW, BWBY, BYBW, BYBY, BYRW, BYRY, RWRW, RWRY, RYBW, RYBY, RYRW, RYRY (12 flags)."], ["That's why the answer to test 1 is equal to ", "11 + 12 = 23", "."]]}
{"title": ["A. Hockey"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["First Petya should find all the occurrences of forbidden substrings in the ", "w", " string. During the search of substrings the case of letter shouldn't be taken into consideration. That is, strings \"", "aBC", "\" and \"", "ABc", "\" are considered equal."], ["After that Petya should perform the replacement of all letters covered by the occurrences. More formally: a letter in the position ", "i", " should be replaced by any other one if for position ", "i", " in string ", "w", " there exist pair of indices ", "l", ", ", "r", " (", "1 ≤ ", "l", " ≤ ", "i", " ≤ ", "r", " ≤ |", "w", "|", ") such that substring ", "w", "[", "l", " ... ", "r", "]", " is contained in the collection ", "s", "1", ", ", "s", "2", ", ..., ", "s", "n", ", when using case insensitive comparison. During the replacement the letter's case should remain the same. Petya is not allowed to replace the letters that aren't covered by any forbidden substring."], ["Letter ", "letter", " (uppercase or lowercase) is considered lucky for the hockey players. That's why Petya should perform the changes so that the ", "letter", " occurred in the resulting string as many times as possible. Help Petya to find such resulting string. If there are several such strings, find the one that comes first lexicographically."], ["Note that the process of replacements is not repeated, it occurs only once. That is, if after Petya's replacements the string started to contain new occurrences of bad substrings, Petya pays no attention to them."], []], "input_specification": [["The first line contains the only integer ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") — the number of forbidden substrings in the collection. Next ", "n", " lines contain these substrings. The next line contains string ", "w", ". All those ", "n", " + 1", " lines are non-empty strings consisting of uppercase and lowercase Latin letters whose length does not exceed ", "100", ". The last line contains a lowercase letter ", "letter", "."]], "output_specification": [["Output the only line — Petya's resulting string with the maximum number of letters ", "letter", ". If there are several answers then output the one that comes first lexicographically."], ["The lexicographical comparison is performed by the standard < operator in modern programming languages. The line ", "a", " is lexicographically smaller than the line ", "b", ", if ", "a", " is a prefix of ", "b", ", or there exists such an ", "i", " (", "1 ≤ ", "i", " ≤ |", "a", "|", "), that ", "a", "i", " < ", "b", "i", ", and for any ", "j", " (", "1 ≤ ", "j", " < ", "i", ") ", "a", "j", " = ", "b", "j", ". ", "|", "a", "|", " stands for the length of string ", "a", "."]], "sample_test_input": ["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], "sample_test_output": ["PetrLovtTttttNumtttt"], "note": []}
{"title": ["D. FreeDiv"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Unlike other turn-based strategies, in FreeDiv a player has the opportunity to build tunnels between cities. The tunnels are two-way roads along which one can move armies undetected by the enemy. However, no more than one tunnel can be connected to each city. As for Vasya, he wants to build a network of tunnels so that any pair of cities in his state were reachable by some path consisting of roads and a tunnels. But at that no more than ", "k", " tunnels are connected to each province (otherwise, the province will be difficult to keep in case other provinces are captured by enemy armies)."], ["Vasya discovered that maybe he will not be able to build such a network for the current condition of the state. Maybe he'll have first to build several roads between cities in different provinces to merge the provinces. Your task is to determine the minimum number of roads Vasya needs to build so that it was possible to build the required network of tunnels in the resulting state."], []], "input_specification": [["The first line contains three integers ", "n", ", ", "m", " and ", "k", " (", "1 ≤ ", "n", ", ", "k", " ≤ 10", "6", ", 0 ≤ ", "m", " ≤ 10", "6", "). Each of the next ", "m", " lines contains two integers. They are the numbers of cities connected by a corresponding road. No road connects city to itself and there is at most one road between each pair of cities."]], "output_specification": [["Print a single number, the minimum number of additional roads."]], "sample_test_input": ["3 3 2", "1 2", "2 3", "3 1"], "sample_test_output": ["0"], "note": [["In the first example only one province exists, so it is not necessary to build any tunnels or roads."], ["In the second example two provinces exist. It is possible to merge the provinces by building a tunnel between cities 1 and 3."], ["In the third example at least one additional road is necessary. For example it is possible to build additional road between cities 1 and 2 and build two tunnels between cities 1 and 3, 2 and 4 after that."]]}
{"title": ["C. LionAge II"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains character's name ", "s", " and an integer number ", "k", " (", "0 ≤ ", "k", " ≤ 100", "). The length of the nonempty string ", "s", " does not exceed ", "100", ". The second line contains an integer number ", "n", " (", "0 ≤ ", "n", " ≤ 676", ") — amount of pairs of letters, giving bonus to the euphony. The next ", "n", " lines contain description of these pairs «", "x", " ", "y", " ", "c", "», which means that sequence ", "xy", " gives bonus ", "c", " (", "x", ", ", "y", " — lowercase Latin letters, ", " - 1000 ≤ ", "c", " ≤ 1000)", ". It is guaranteed that no pair ", "x", " ", "y", " mentioned twice in the input data."]], "output_specification": [["Output the only number — maximum possible euphony оf the new character's name."]], "sample_test_input": ["winner 4", "4", "s e 7", "o s 8", "l o 13", "o o 8"], "sample_test_output": ["36"], "note": [["In the first example the most euphony name will be ", "looser", ". It is easy to calculate that its euphony is 36."]]}
{"title": ["C. Disposition"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Help Vasya — find the volume disposition with the minimum number of divisors."], []], "input_specification": [["The first line contains number ", "n", " (", "1 ≤ ", "n", " ≤ 100000", ") which represents the number of volumes and free places."]], "output_specification": [["Print ", "n", " numbers — the sought disposition with the minimum divisor number. The ", "j", "-th number (", "1 ≤ ", "j", " ≤ ", "n", ") should be equal to ", "p", "(", "j", ")", " — the number of tome that stands on the ", "j", "-th place. If there are several solutions, print any of them."]], "sample_test_input": ["2"], "sample_test_output": ["2 1 "], "note": []}
{"title": ["F. Snow sellers"], "time_limit": ["time limit per test", "10 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains integers ", "n", ", ", "m", " and ", "W", " (", "1 ≤ ", "n", " ≤ 100", ", ", "1 ≤ ", "m", " ≤ 500000", ", ", "1 ≤ ", "W", " ≤ 10", "9", ") which represent the number of days, the number of companies and the amount of snow that needs to be purchased on every one of the ", "n", " days. The second line contains ", "m", " integers ", "w", "i", ". The third line contains ", "m", " integers ", "c", "i", ". The fourth line contains ", "m", " integers ", "a", "i", ". All the numbers are strictly positive and do not exceed ", "10", "9", ". For all the ", "i", " the inequation ", "c", "i", " - (", "n", " - 1)", "a", "i", " > 0", " holds true. "]], "output_specification": [["Print a single number — the answer to the given problem. Print the answer in the format with the decimal point (even if the answer is integer, it must contain the decimal point), without \"e\" and without leading zeroes. The answer should differ with the right one by no more than ", "10", " - 9", "."]], "sample_test_input": ["2 3 10", "4 4 4", "5 5 8", "1 2 5"], "sample_test_output": ["22.000000000000000"], "note": []}
{"title": ["H. Black and White"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["The initial plan failed! Having learned of that, the king gave a new command: tile the floor with the available tiles so that no black side of a tile touched a white one. The tiles are squares of one size ", "1 × 1", ", every black and white tile can be rotated in one of the four ways. "], ["The court programmer was given the task to work out the plan of tiling and he coped with the task and didn't suffer the consequences of disobedience. And can you cope with it?"]], "input_specification": [["The first line contains given integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 100", ") which represent the sizes of the rectangle that needs to be tiled. The next line contains non-negative numbers ", "a", ", ", "b", " and ", "c", ", ", "a", " + ", "b", " + ", "c", " = ", "nm", ", ", "c", " ≥ ", "m", ". "]], "output_specification": [["Print ", "2", "n", " lines containing ", "2", "m", " characters each — the tiling scheme. Every tile is represented by a square ", "2 × 2", " in the following manner (the order corresponds to the order of the picture above): "]], "sample_test_input": ["2 2", "0 0 4"], "sample_test_output": ["\\", "../", "#", "\\", "/#", "\\", "##/", ".", "\\", "/."], "note": []}
{"title": ["F. Plane of Tanks"], "time_limit": ["time limit per test", "4 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains 4 numbers – the coordinates of points ", "A", " and ", "B", " (in meters), the points do not coincide. On the second line number ", "n", " is given (", "1 ≤ ", "n", " ≤ 10", "4", "). It is the number of enemy tanks. Each of the following ", "n", " lines contain the coordinates of a corresponding tank ", "x", "i", ", ", "y", "i", " and its parameters ", "a", "i", " and ", "w", "i", " (", "0 ≤ ", "a", "i", " ≤ 2π", ", ", "0 ≤ ", "w", "i", " ≤ 100", "). Numbers ", "a", "i", " and ", "w", "i", " contain at most 5 digits after the decimal point. All coordinates are integers and their absolute values do not exceed ", "10", "5", ". Enemy tanks can rotate a turret in the clockwise as well as in the counterclockwise direction at the angular speed of not more than ", "w", "i", ". It is guaranteed that each of the enemy tanks will need at least ", "0.1", " seconds to aim at any point of the segment ", "AB", " and each of the enemy tanks is posistioned no closer than ", "0.1", " meters to line ", "AB", ". On the last line is given the number ", "k", " (", "0 ≤ ", "k", " ≤ ", "n", ")."]], "output_specification": [["Print a single number with absolute or relative error no more than ", "10", " - 4", " — the minimum required speed of Pedalny in meters per second."]], "sample_test_input": ["0 0 10 0", "1", "5 -5 4.71238 1", "0"], "sample_test_output": ["4.2441"], "note": []}
{"title": ["G. Galaxy Union"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For negotiations between some pairs of the planets there are bidirectional communication channels, each of which is characterized with \"dial duration\" ", "t", "i", " which, as a rule, takes several hours and exceeds the call duration greatly. Overall the galaxy has ", "n", " communication channels and they unite all the planets into a uniform network. That means that it is possible to phone to any planet ", "v", " from any planet ", "u", ", perhaps, using some transitional planets ", "v", "1", ", ", "v", "2", ", ..., ", "v", "m", " via the existing channels between ", "u", " and ", "v", "1", ", ", "v", "1", " and ", "v", "2", ", ..., ", "v", "m", " - 1", " and ", "v", "m", ", ", "v", "m", " and ", "v", ". At that the dial duration from ", "u", " to ", "v", " will be equal to the sum of dial durations of the used channels."], ["So, every president has to talk one by one to the presidents of all the rest ", "n", " - 1", " planets. At that the negotiations take place strictly consecutively, and until the negotiations with a planet stop, the dial to another one does not begin. As the matter is urgent, from the different ways to call the needed planet every time the quickest one is chosen. Little time is needed to assure another president on the importance of the Galaxy Union, that’s why the duration of the negotiations with each planet can be considered equal to the dial duration time for those planets. As the presidents know nothing about each other’s plans, they do not take into consideration the possibility that, for example, the sought president may call himself or already know about the founding of the Galaxy Union from other sources."], ["The governments of all the ", "n", " planets asked you to work out the negotiation plans. First you are to find out for every president how much time his supposed negotiations will take."], []], "input_specification": [["The first line contains an integer ", "n", " (", "3 ≤ ", "n", " ≤ 200000", ") which represents the number of planets in the Galaxy and the number of communication channels equal to it. The next ", "n", " lines contain three integers each ", "a", "i", ", ", "b", "i", " and ", "t", "i", " (", "1 ≤ ", "a", "i", ", ", "b", "i", " ≤ ", "n", ", ", "a", "i", " ≠ ", "b", "i", ", 1 ≤ ", "t", "i", " ≤ 10", "3", ") that represent the numbers of planet joined by a communication channel and its \"dial duration\". There can be no more than one communication channel between a pair of planets. "]], "output_specification": [["In the first line output ", "n", " integers — the durations of the supposed negotiations for each president. Separate the numbers by spaces."]], "sample_test_input": ["3", "1 2 3", "2 3 2", "1 3 1"], "sample_test_output": ["4 5 3"], "note": []}
{"title": ["D. A Simple Task"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of input contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", " ≤ 19", ", ", "0 ≤ ", "m", ") – respectively the number of vertices and edges of the graph. Each of the subsequent ", "m", " lines contains two integers ", "a", " and ", "b", ", (", "1 ≤ ", "a", ", ", "b", " ≤ ", "n", ", ", "a", " ≠ ", "b", ") indicating that vertices ", "a", " and ", "b", " are connected by an undirected edge. There is no more than one edge connecting any pair of vertices."]], "output_specification": [["Output the number of cycles in the given graph."]], "sample_test_input": ["4 6", "1 2", "1 3", "1 4", "2 3", "2 4", "3 4"], "sample_test_output": ["7"], "note": [["The example graph is a clique and contains four cycles of length 3 and three cycles of length 4."]]}
{"title": ["E. Arena"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The fight in the arena takes place in several rounds. At the beginning of each round, each alive hero deals $$$1$$$ damage to all other heroes. Hits of all heroes occur simultaneously. Heroes whose health is less than $$$1$$$ at the end of the round are considered killed."], ["If exactly $$$1$$$ hero remains alive after a certain round, then he is declared the winner. Otherwise, there is no winner."], ["Your task is to calculate the number of ways to choose the initial health points for each hero $$$a_i$$$, where $$$1 \\le a_i \\le x$$$, so that there is no winner of the fight. The number of ways can be very large, so print it modulo $$$998244353$$$. Two ways are considered different if at least one hero has a different amount of health. For example, $$$[1, 2, 1]$$$ and $$$[2, 1, 1]$$$ are different."], []], "input_specification": [["The only line contains two integers $$$n$$$ and $$$x$$$ ($$$2 \\le n \\le 500; 1 \\le x \\le 500$$$)."]], "output_specification": [["Print one integer — the number of ways to choose the initial health points for each hero $$$a_i$$$, where $$$1 \\le a_i \\le x$$$, so that there is no winner of the fight, taken modulo $$$998244353$$$. "]], "sample_test_input": ["2 5\n"], "sample_test_output": ["5\n"], "note": []}
{"title": ["C. Banknotes"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Let's denote $$$f(s)$$$ as the minimum number of banknotes required to represent exactly $$$s$$$ burles. For example, if the denominations of banknotes used in Berland are $$$1$$$, $$$10$$$ and $$$100$$$, then $$$f(59) = 14$$$: $$$9$$$ banknotes with denomination of $$$1$$$ burle and $$$5$$$ banknotes with denomination of $$$10$$$ burles can be used to represent exactly $$$9 \\cdot 1 + 5 \\cdot 10 = 59$$$ burles, and there's no way to do it with fewer banknotes."], ["For a given integer $$$k$$$, find the minimum positive number of burles $$$s$$$ that cannot be represented with $$$k$$$ or fewer banknotes (that is, $$$f(s) > k$$$)."], []], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — number of test cases."], ["The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 10; 1 \\le k \\le 10^9$$$)."], ["The next line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 = a_1 < a_2 < \\dots < a_n \\le 9$$$)."]], "output_specification": [["For each test case, print one integer — the minimum positive number of burles $$$s$$$ that cannot be represented with $$$k$$$ or fewer banknotes."]], "sample_test_input": ["4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n"], "sample_test_output": ["59\n778\n148999\n999999920999999999\n"], "note": []}
{"title": ["A. Vasya and Coins"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For example, if $$$a=1$$$ and $$$b=1$$$ (he has one $$$1$$$-burle coin and one $$$2$$$-burle coin), then:"], [], ["So for $$$a=1$$$ and $$$b=1$$$ the answer is $$$s=4$$$."]], "input_specification": [["The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the test."], ["The description of each test case consists of one line containing two integers $$$a_i$$$ and $$$b_i$$$ ($$$0 \\le a_i, b_i \\le 10^8$$$) — the number of $$$1$$$-burle coins and $$$2$$$-burles coins Vasya has respectively."]], "output_specification": [["For each test case, on a separate line print one integer $$$s$$$ ($$$s > 0$$$): the minimum positive integer amount of money that Vasya cannot pay without change or pay at all."]], "sample_test_input": ["5", "1 1", "4 0", "0 2", "0 0", "2314 2374"], "sample_test_output": ["4\n5\n1\n1\n7063\n"], "note": []}
{"title": ["B. Odd Grasshopper"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Having nothing else to do he starts jumping between integer points on the axis. Making a jump from a point with coordinate $$$x$$$ with a distance $$$d$$$ to the left moves the grasshopper to a point with a coordinate $$$x - d$$$, while jumping to the right moves him to a point with a coordinate $$$x + d$$$."], ["The grasshopper is very fond of positive integers, so for each integer $$$i$$$ starting with $$$1$$$ the following holds: exactly $$$i$$$ minutes after the start he makes a jump with a distance of exactly $$$i$$$. So, in the first minutes he jumps by $$$1$$$, then by $$$2$$$, and so on."], ["The direction of a jump is determined as follows: if the point where the grasshopper was before the jump has an ", "even", " coordinate, the grasshopper jumps to the ", "left", ", ", "otherwise", " he jumps to the ", "right", "."], ["For example, if after $$$18$$$ consecutive jumps he arrives at the point with a coordinate $$$7$$$, he will jump by a distance of $$$19$$$ to the right, since $$$7$$$ is an odd number, and will end up at a point $$$7 + 19 = 26$$$. Since $$$26$$$ is an even number, the next jump the grasshopper will make to the left by a distance of $$$20$$$, and it will move him to the point $$$26 - 20 = 6$$$."], ["Find exactly which point the grasshopper will be at after exactly $$$n$$$ jumps."], []], "input_specification": [["The first line of input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases."], ["Each of the following $$$t$$$ lines contains two integers $$$x_0$$$ ($$$-10^{14} \\leq x_0 \\leq 10^{14}$$$) and $$$n$$$ ($$$0 \\leq n \\leq 10^{14}$$$) — the coordinate of the grasshopper's initial position and the number of jumps."]], "output_specification": [["Print exactly $$$t$$$ lines. On the $$$i$$$-th line print one integer — the answer to the $$$i$$$-th test case — the coordinate of the point the grasshopper will be at after making $$$n$$$ jumps from the point $$$x_0$$$."]], "sample_test_input": ["9\n0 1\n0 2\n10 10\n10 99\n177 13\n10000000000 987654321\n-433494437 87178291199\n1 0\n-1 1\n"], "sample_test_output": ["-1\n1\n11\n110\n190\n9012345679\n-87611785637\n1\n0\n"], "note": [["The first two test cases in the example correspond to the first two jumps from the point $$$x_0 = 0$$$. "], ["Since $$$0$$$ is an even number, the first jump of length $$$1$$$ is made to the left, and the grasshopper ends up at the point $$$0 - 1 = -1$$$."], ["Then, since $$$-1$$$ is an odd number, a jump of length $$$2$$$ is made to the right, bringing the grasshopper to the point with coordinate $$$-1 + 2 = 1$$$."]]}
{"title": ["E. Forward, march!"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["When the officers convinced him he should do something about it, Jack decided to modify the basic sequence of steps that he repeats. However, in order not to get too tired, he has decided that the only thing he'll do is adding any number of breaks in any positions of the original sequence (a break corresponds to stopping for the duration of one step). Of course, Jack can't make a step on the same foot twice in a row, if there is no pause between these steps. It is, however, not impossible that the sequence of steps he used so far is incorrect (it would explain a lot, actually)."], ["Help Private Jack! Given the sequence of steps he keeps repeating, calculate the maximal percentage of time that he can spend marching correctly after adding some breaks to his scheme."], []], "input_specification": [["The first line of input contains a sequence consisting only of characters '", "L", "', '", "R", "' and '", "X", "', where '", "L", "' corresponds to a step with the left foot, '", "R", "' — with the right foot, and '", "X", "' — to a break. The length of the sequence will not exceed ", "10", "6", "."]], "output_specification": [["Output the maximum percentage of time that Jack can spend marching correctly, ", "rounded down to exactly six digits after the decimal point", "."]], "sample_test_input": ["X"], "sample_test_output": ["0.000000"], "note": [["In the second example, if we add two breaks to receive ", "LXXRXR", ", Jack will march: ", "LXXRXRLXXRXRL", "... instead of ", "LRLRLRLRLRLRL", "... and will make the correct step in half the cases. If we didn't add any breaks, the sequence would be incorrect — Jack can't step on his right foot twice in a row."]]}
{"title": ["F. Tree Queries"], "time_limit": ["time limit per test", "6 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You have to process $$$q$$$ queries. In each query, you are given a vertex of the tree $$$v$$$ and an integer $$$k$$$."], ["To process a query, you may delete any vertices from the tree in any order, except for the root and the vertex $$$v$$$. When a vertex is deleted, its children become the children of its parent. You have to process a query in such a way that maximizes the value of $$$c(v) - m \\cdot k$$$ (where $$$c(v)$$$ is the resulting number of children of the vertex $$$v$$$, and $$$m$$$ is the number of vertices you have deleted). Print the maximum possible value you can obtain."], ["The queries are independent: the changes you make to the tree while processing a query don't affect the tree in other queries."], []], "input_specification": [["The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of vertices in the tree."], ["Then $$$n-1$$$ lines follow, the $$$i$$$-th of them contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$; $$$x_i \\ne y_i$$$) — the endpoints of the $$$i$$$-th edge. These edges form a tree."], ["The next line contains one integer $$$q$$$ ($$$1 \\le q \\le 2 \\cdot 10^5$$$) — the number of queries."], ["Then $$$q$$$ lines follow, the $$$j$$$-th of them contains two integers $$$v_j$$$ and $$$k_j$$$ ($$$1 \\le v_j \\le n$$$; $$$0 \\le k_j \\le 2 \\cdot 10^5$$$) — the parameters of the $$$j$$$-th query."]], "output_specification": [["For each query, print one integer — the maximum value of $$$c(v) - m \\cdot k$$$ you can achieve."]], "sample_test_input": ["8\n6 7\n3 2\n8 3\n5 7\n7 4\n7 1\n7 3\n6\n1 0\n1 2\n1 3\n7 1\n5 0\n7 200000\n"], "sample_test_output": ["5\n2\n1\n4\n0\n4\n"], "note": [["The tree in the first example is shown in the following picture:"], []]}
{"title": ["B. Playing in a Casino"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Galaxy Luck, a well-known casino in the entire solar system, introduces a new card game."], ["In this game, there is a deck that consists of $$$n$$$ cards. Each card has $$$m$$$ numbers written on it. Each of the $$$n$$$ players receives exactly one card from the deck."], ["Then all players play with each other in pairs, and each pair of players plays exactly once. Thus, if there are, for example, four players in total, then six games are played: the first against the second, the first against the third, the first against the fourth, the second against the third, the second against the fourth and the third against the fourth."], ["Each of these games determines the winner in some way, but the rules are quite complicated, so we will not describe them here. All that matters is how many chips are paid out to the winner. Let the first player's card have the numbers $$$a_1, a_2, \\dots, a_m$$$, and the second player's card — $$$b_1, b_2, \\dots, b_m$$$. Then the winner of the game gets $$$|a_1 - b_1| + |a_2 - b_2| + \\dots + |a_m - b_m|$$$ chips from the total pot, where $$$|x|$$$ denotes the absolute value of $$$x$$$."], ["To determine the size of the total pot, it is necessary to calculate the winners' total winnings for all games. Since there can be many cards in a deck and many players, you have been assigned to write a program that does all the necessary calculations."]], "input_specification": [["Each test consists of several test cases. The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The description of the test cases follows."], ["The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\cdot m \\le 3\\cdot 10^5$$$) — the number of cards in the deck and the count of numbers on the one card."], ["Each of the following $$$n$$$ lines of the test case set contains $$$m$$$ integers $$$c_{i,j}$$$ ($$$1 \\le c_{i,j} \\le 10^6$$$) — a description of the $$$i$$$-th card."], ["It is guaranteed that the total $$$n \\cdot m$$$ in all tests does not exceed $$$3 \\cdot 10^5$$$."]], "output_specification": [["For each test case, print one number — the total amount of winnings from all games."]], "sample_test_input": ["3", "3 5", "1 4 2 8 5", "7 9 2 1 4", "3 8 5 3 1", "1 4", "4 15 1 10", "4 3", "1 2 3", "3 2 1", "1 2 1", "4 2 7"], "sample_test_output": ["50\n0\n31\n"], "note": [["Consider the first test case."], ["In the game between the first and second player, the winner receives $$$|1-7| + |4-9| + |2-2| + |8-1| + |5-4| = 19$$$ chips."], ["In the game between the first and third player, the winner receives $$$|1-3| + |4-8| + |2-5| + |8-3| + |5-1| = 18$$$ in chips."], ["In the game between the second and third player, the winner receives $$$|7-3| + |9-8| + |2-5| + |1-3| + |4-1| = 13$$$ chips."], ["The total is $$$19 + 18 + 13 = 50$$$ chips."]]}
{"title": ["A. Lucky Numbers"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Each starship has a number —some positive integer $$$x$$$. Let's define the ", "luckiness", " of a number $$$x$$$ as the difference between the largest and smallest digits of that number. For example, $$$142857$$$ has $$$8$$$ as its largest digit and $$$1$$$ as its smallest digit, so its luckiness is $$$8-1=7$$$. And the number $$$111$$$ has all digits equal to $$$1$$$, so its luckiness is zero."], ["Hateehc is a famous Martian blogger who often flies to different corners of the solar system. To release interesting videos even faster, he decided to buy himself a starship. When he came to the store, he saw starships with numbers from $$$l$$$ to $$$r$$$ inclusively. While in the store, Hateehc wanted to find a starship with the luckiest number."], ["Since there are a lot of starships in the store, and Hateehc can't program, you have to help the blogger and write a program that answers his question."], []], "input_specification": [["The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$) —the number of test cases."], ["Each of the following $$$t$$$ lines contains a description of the test case. The description consists of two integers $$$l$$$ and $$$r$$$ ($$$1 \\le l \\le r \\le 10^6$$$) — the largest and smallest numbers of the starships in the store."]], "output_specification": [["Print $$$t$$$ lines, one line for each test case, containing the luckiest starship number in the store."], ["If there are several ways to choose the luckiest number, output any of them."]], "sample_test_input": ["5", "59 63", "42 49", "15 15", "53 57", "1 100"], "sample_test_output": ["60\n49\n15\n57\n90\n"], "note": [["Let's look at two test examples: "], []]}
{"title": ["B. Luntik and Subsequences"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Luntik really wants to know the number of ", "nearly full", " subsequences of the array $$$a$$$. But he needs to come home so he asks you to solve that problem!"], ["A sequence $$$x$$$ is a subsequence of a sequence $$$y$$$ if $$$x$$$ can be obtained from $$$y$$$ by deletion of several (possibly, zero or all) elements."], []], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The next $$$2 \\cdot t$$$ lines contain descriptions of test cases. The description of each test case consists of two lines."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 60$$$) — the length of the array."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$) — the elements of the array $$$a$$$."]], "output_specification": [["For each test case print the number of ", "nearly full", " subsequences of the array."]], "sample_test_input": ["5\n5\n1 2 3 4 5\n2\n1000 1000\n2\n1 0\n5\n3 0 2 1 1\n5\n2 1 0 3 0\n"], "sample_test_output": ["1\n0\n2\n4\n4\n"], "note": [["In the first test case, $$$s=1+2+3+4+5=15$$$, only $$$(2,3,4,5)$$$ is a nearly full subsequence among all subsequences, the sum in it is equal to $$$2+3+4+5=14=15-1$$$."], ["In the second test case, there are no nearly full subsequences."], ["In the third test case, $$$s=1+0=1$$$, the nearly full subsequences are $$$(0)$$$ and $$$()$$$ (the sum of an empty subsequence is $$$0$$$)."]]}
{"title": ["C. Inversion Graph"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Two vertices $$$u$$$ and $$$v$$$ belong to the same connected component if and only if there is at least one path along edges connecting $$$u$$$ and $$$v$$$."], ["A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array)."], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^5$$$) — the number of test cases. Description of the test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the length of the permutation."], ["The second line of each test case contains $$$n$$$ integers $$$p_1, p_2, \\dots, p_n$$$ ($$$1 \\le p_i \\le n$$$) — the elements of the permutation."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case, print one integer $$$k$$$ — the number of connected components."]], "sample_test_input": ["6\n3\n1 2 3\n5\n2 1 4 3 5\n6\n6 1 4 2 5 3\n1\n1\n6\n3 2 1 6 5 4\n5\n3 1 5 2 4\n"], "sample_test_output": ["3\n3\n1\n1\n2\n1\n"], "note": [["Each separate test case is depicted in the image below. The colored squares represent the elements of the permutation. For one permutation, each color represents some connected component. The number of distinct colors is the answer."]]}
{"title": ["D. Big Brush"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Near the painting you also found a brush in the shape of a $$$2 \\times 2$$$ square, so the canvas was surely painted in the following way: initially, no cell was painted. Then, the following painting operation has been performed some number of times:"], [], ["All cells must be painted at least once. A cell can be painted multiple times. In this case, its final color will be the last one."], ["Find any sequence of at most $$$nm$$$ operations that could have led to the painting you found or state that it's impossible."]], "input_specification": [["The first line of input contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n, m \\le 1000$$$) — the dimensions of the canvas."], ["On the $$$i$$$-th of the next $$$n$$$ lines of input, there will be $$$m$$$ integers. The $$$j$$$-th of them is $$$a_{i,j}$$$ ($$$1 \\le a_{i,j} \\le nm$$$) — the color of cell $$$(i, j)$$$."]], "output_specification": [["If there is no solution, print a single integer $$$-1$$$."], ["Otherwise, on the first line, print one integer $$$q$$$ ($$$1 \\le q \\le nm$$$) — the number of operations."], ["Next, print the operations in order. On the $$$k$$$-th of the next $$$q$$$ lines, print three integers $$$i$$$, $$$j$$$, $$$c$$$ ($$$1 \\le i < n$$$, $$$1 \\le j < m$$$, $$$1 \\le c \\le nm$$$) — the description of the $$$k$$$-th operation."], ["If there are multiple solutions, print any."]], "sample_test_input": ["4 4\n5 5 3 3\n1 1 5 3\n2 2 5 4\n2 2 4 4\n"], "sample_test_output": ["6\n1 3 3\n3 3 4\n2 2 5\n1 1 5\n2 1 1\n3 1 2\n"], "note": [["In the first test case, the solution is not unique. Here's one of them:"], []]}
{"title": ["D. Vupsen, Pupsen and 0"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Pupsen, on the contrary, likes the number $$$0$$$ and he got upset when he saw the array without zeroes. To cheer Pupsen up, Vupsen decided to come up with another array $$$b$$$ of length $$$n$$$ such that $$$\\sum_{i=1}^{n}a_i \\cdot b_i=0$$$. Since Vupsen doesn't like number $$$0$$$, ", "the array $$$b$$$ must not contain numbers equal to $$$0$$$", ". Also, the numbers in that array must not be huge, so ", "the sum of their absolute values cannot exceed $$$10^9$$$", ". Please help Vupsen to find any such array $$$b$$$!"], []], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The next $$$2 \\cdot t$$$ lines contain the description of test cases. The description of each test case consists of two lines."], ["The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the length of the array."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-10^4 \\le a_i \\le 10^4$$$, $$$a_i \\neq 0$$$) — the elements of the array $$$a$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case print $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ — elements of the array $$$b$$$ ($$$|b_1|+|b_2|+\\ldots +|b_n| \\le 10^9$$$, $$$b_i \\neq 0$$$, $$$\\sum_{i=1}^{n}a_i \\cdot b_i=0$$$)."], ["It can be shown that the answer always exists."]], "sample_test_input": ["3\n2\n5 5\n5\n5 -2 10 -9 4\n7\n1 2 3 4 5 6 7\n"], "sample_test_output": ["1 -1\n-1 5 1 -1 -1\n-10 2 2 -3 5 -1 -1\n"], "note": [["In the first test case, $$$5 \\cdot 1 + 5 \\cdot (-1)=5-5=0$$$. You could also print $$$3$$$ $$$-3$$$, for example, since $$$5 \\cdot 3 + 5 \\cdot (-3)=15-15=0$$$"], ["In the second test case, $$$5 \\cdot (-1) + (-2) \\cdot 5 + 10 \\cdot 1 + (-9) \\cdot (-1) + 4 \\cdot (-1)=-5-10+10+9-4=0$$$."]]}
{"title": ["B. Diameter of Graph"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The diameter of a graph is the maximum distance between any two nodes."], ["The distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes."], ["CQXYM wonders whether it is possible to create such a graph."], []], "input_specification": [["The input consists of multiple test cases. "], ["The first line contains an integer $$$t (1 \\leq t \\leq 10^5)$$$ — the number of test cases. The description of the test cases follows."], ["Only one line of each test case contains three integers $$$n(1 \\leq n \\leq 10^9)$$$, $$$m$$$, $$$k$$$ $$$(0 \\leq m,k \\leq 10^9)$$$."]], "output_specification": [["For each test case, print ", "YES", " if it is possible to create the graph, or print ", "NO", " if it is impossible. You can print each letter in any case (upper or lower)."]], "sample_test_input": ["5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n"], "sample_test_output": ["YES\nNO\nYES\nNO\nNO\n"], "note": [["In the first test case, the graph's diameter equal to 0."], ["In the second test case, the graph's diameter can only be 2."], ["In the third test case, the graph's diameter can only be 1."]]}
{"title": ["E. Pchelyonok and Segments"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Pchelyonok wants his gift to be beautiful, so he decided to choose $$$k$$$ non-overlapping segments of the array $$$[l_1,r_1]$$$, $$$[l_2,r_2]$$$, $$$\\ldots$$$ $$$[l_k,r_k]$$$ such that:"], [], ["Pchelenok also wants his gift to be as beautiful as possible, so he asks you to find the maximal value of $$$k$$$ such that he can give Mila a gift!"]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The next $$$2 \\cdot t$$$ lines contain the descriptions of test cases. The description of each test case consists of two lines."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the length of the array."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — the elements of the array $$$a$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$."]], "output_specification": [["For each test case, print the maximum possible value of $$$k$$$."]], "sample_test_input": ["5\n1\n1\n3\n1 2 3\n5\n1 1 2 2 3\n7\n1 2 1 1 3 2 6\n5\n9 6 7 9 7\n"], "sample_test_output": ["1\n1\n2\n3\n1\n"], "note": []}
{"title": ["A. Help Farmer"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["At the end of the autumn Sam came into the barn to admire one more time the hay he'd been stacking during this hard summer. Unfortunately, Sam was horrified to see that the hay blocks had been carelessly scattered around the barn. The place was a complete mess. As it turned out, thieves had sneaked into the barn. They completely dissembled and took away a layer of blocks from the parallelepiped's front, back, top and sides. As a result, the barn only had a parallelepiped containing ", "(", "A", " - 1) × (", "B", " - 2) × (", "C", " - 2)", " hay blocks. To hide the evidence of the crime, the thieves had dissembled the parallelepiped into single ", "1 × 1 × 1", " blocks and scattered them around the barn. After the theft Sam counted ", "n", " hay blocks in the barn but he forgot numbers ", "A", ", ", "B", " и ", "C", "."], ["Given number ", "n", ", find the minimally possible and maximally possible number of stolen hay blocks."], []], "input_specification": [["The only line contains integer ", "n", " from the problem's statement (", "1 ≤ ", "n", " ≤ 10", "9", ")."]], "output_specification": [["Print space-separated minimum and maximum number of hay blocks that could have been stolen by the thieves."], ["Note that the answer to the problem can be large enough, so you must use the 64-bit integer type for calculations. Please, do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specificator."]], "sample_test_input": ["4"], "sample_test_output": ["28 41"], "note": [["Let's consider the first sample test. If initially Sam has a parallelepiped consisting of ", "32 = 2 × 4 × 4", " hay blocks in his barn, then after the theft the barn has ", "4 = (2 - 1) × (4 - 2) × (4 - 2)", " hay blocks left. Thus, the thieves could have stolen ", "32 - 4 = 28", " hay blocks. If Sam initially had a parallelepiped consisting of ", "45 = 5 × 3 × 3", " hay blocks in his barn, then after the theft the barn has ", "4 = (5 - 1) × (3 - 2) × (3 - 2)", " hay blocks left. Thus, the thieves could have stolen ", "45 - 4 = 41", " hay blocks. No other variants of the blocks' initial arrangement (that leave Sam with exactly 4 blocks after the theft) can permit the thieves to steal less than 28 or more than 41 blocks."]]}
{"title": ["B. Help General"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: \"", "If the squared distance between some two soldiers equals to ", "5", ", then those soldiers will conflict with each other!", "\""], ["The drill exercises are held on a rectangular ", "n", " × ", "m", " field, split into ", "nm", " square ", "1 × 1", " segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares ", "(", "x", "1", ", ", "y", "1", ")", " and ", "(", "x", "2", ", ", "y", "2", ")", " equals exactly ", "(", "x", "1", " - ", "x", "2", ")", "2", " + (", "y", "1", " - ", "y", "2", ")", "2", ". Now not all ", "nm", " squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square ", "(2, 2)", ", then he cannot put soldiers in the squares ", "(1, 4)", ", ", "(3, 4)", ", ", "(4, 1)", " and ", "(4, 3)", " — each of them will conflict with the soldier in the square ", "(2, 2)", "."], ["Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse."], []], "input_specification": [["The single line contains space-separated integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 1000", ") that represent the size of the drill exercise field."]], "output_specification": [["Print the desired maximum number of warriors."]], "sample_test_input": ["2 4"], "sample_test_output": ["4"], "note": [["In the first sample test Sir Lancelot can place his 4 soldiers on the ", "2 × 4", " court as follows (the soldiers' locations are marked with gray circles on the scheme):"], []]}
{"title": ["D. Help Shrek and Donkey 2"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The rules of the game are as follows: there is a battlefield, its size equals ", "n", " × ", "m", " squares, some squares contain the toy soldiers (the green ones belong to Shrek and the red ones belong to Donkey). Besides, each of the ", "n", " lines of the area contains not more than two soldiers. During a move a players should ", "select", " not less than ", "1", " and not more than ", "k", " soldiers belonging to him and make them either ", "attack", " or ", "retreat", "."], ["An ", "attack", " is moving all of the selected soldiers along the lines on which they stand ", "in the direction of", " an enemy soldier, if he is in this line. If this line doesn't have an enemy soldier, then the selected soldier on this line can move in any direction during the player's move. Each selected soldier has to move at least by one cell. Different soldiers can move by a different number of cells. During the attack the soldiers are not allowed to cross the cells where other soldiers stand (or stood immediately before the attack). It is also not allowed to go beyond the battlefield or finish the attack in the cells, where other soldiers stand (or stood immediately before attack)."], ["A ", "retreat", " is moving all of the selected soldiers along the lines on which they stand ", "in the direction from", " an enemy soldier, if he is in this line. ", "The other rules repeat the rules of the attack."], ["For example, let's suppose that the original battlefield had the form (here symbols \"", "G", "\" mark Shrek's green soldiers and symbols \"", "R", "\" mark Donkey's red ones):"], [], ["Let's suppose that ", "k", " = 2", " and Shrek moves first. If he decides to ", "attack", ", then after his move the battlefield can look like that:"], [], ["If in the previous example Shrek decides to ", "retreat", ", then after his move the battlefield can look like that:"], []], "input_specification": [["The first line contains space-separated integers ", "n", ", ", "m", " and ", "k", " (", "1 ≤ ", "n", ", ", "m", ", ", "k", " ≤ 100", "). Then ", "n", " lines contain ", "m", " characters each. These characters belong to the set {\"", "-", "\", \"", "G", "\", \"", "R", "\"}, denoting, respectively, a battlefield's free cell, a cell occupied by Shrek's soldiers and a cell occupied by Donkey's soldiers."], ["It is guaranteed that each line contains no more than two soldiers."]], "output_specification": [["Print \"", "First", "\" (without the quotes) if Shrek wins in the given Toy Soldier game. If Donkey wins, print \"", "Second", "\" (without the quotes). If the game continues forever, print \"", "Draw", "\" (also without the quotes)."]], "sample_test_input": ["2 3 1", "R-G", "RG-"], "sample_test_output": ["First"], "note": []}
{"title": ["A. Football"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first input line contains a non-empty string consisting of characters \"0\" and \"1\", which represents players. The length of the string does not exceed ", "100", " characters. There's at least one player from each team present on the field."]], "output_specification": [["Print \"YES\" if the situation is dangerous. Otherwise, print \"NO\"."]], "sample_test_input": ["001001"], "sample_test_output": ["NO"], "note": []}
{"title": ["D. Horse Races"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petya prepared ", "t", " intervals ", "[", "l", "i", ", ", "r", "i", "]", " and invented number ", "k", ", common for all of them. Your task is to find how many nearly happy numbers there are in each of these segments. Since the answers can be quite large, output them modulo ", "1000000007", " (", "10", "9", " + 7", ")."], []], "input_specification": [["The first line contains two integers ", "t", " and ", "k", " (", "1 ≤ ", "t", ", ", "k", " ≤ 1000", ") — the number of segments and the distance between the numbers correspondingly. Next ", "t", " lines contain pairs of integers ", "l", "i", " and ", "r", "i", " (", "1 ≤ ", "l", " ≤ ", "r", " ≤ 10", "1000", "). All numbers are given without the leading zeroes. Numbers in each line are separated by exactly one space character."]], "output_specification": [["Output ", "t", " lines. In each line print one integer — the answer for the corresponding segment modulo ", "1000000007", " (", "10", "9", " + 7", ")."]], "sample_test_input": ["1 2", "1 100"], "sample_test_output": ["4"], "note": [["In the first sample, the four nearly lucky numbers are 44, 47, 74, 77."], ["In the second sample, only 74 and 77 are in the given segment."]]}
{"title": ["B. Lucky Numbers (easy)"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Lucky number is ", "super lucky", " if it's decimal representation contains equal amount of digits ", "4", " and ", "7", ". For example, numbers ", "47", ", ", "7744", ", ", "474477", " are super lucky and ", "4", ", ", "744", ", ", "467", " are not."], ["One day Petya came across a positive integer ", "n", ". Help him to find the least super lucky number which is not less than ", "n", "."], []], "input_specification": [["The only line contains a positive integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "9", "). This number doesn't have leading zeroes."]], "output_specification": [["Output the least super lucky number that is more than or equal to ", "n", "."], ["Please, do not use the %lld specificator to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specificator."]], "sample_test_input": ["4500"], "sample_test_output": ["4747"], "note": []}
{"title": ["A. Life Without Zeros"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["In this problem we will have a simple example if we removed all zeros from our life, it's the addition operation. Let's assume you are given this equation ", "a", " + ", "b", " = ", "c", ", where ", "a", " and ", "b", " are positive integers, and ", "c", " is the sum of ", "a", " and ", "b", ". Now let's remove all zeros from this equation. Will the equation remain correct after removing all zeros?"], ["For example if the equation is ", "101 + 102 = 203", ", if we removed all zeros it will be ", "11 + 12 = 23", " which is still a correct equation."], ["But if the equation is ", "105 + 106 = 211", ", if we removed all zeros it will be ", "15 + 16 = 211", " which is not a correct equation."], []], "input_specification": [["The input will consist of two lines, the first line will contain the integer ", "a", ", and the second line will contain the integer ", "b", " which are in the equation as described above (", "1 ≤ ", "a", ", ", "b", " ≤ 10", "9", "). There won't be any leading zeros in both. The value of ", "c", " should be calculated as ", "c", " = ", "a", " + ", "b", "."]], "output_specification": [["The output will be just one line, you should print \"", "YES", "\" if the equation will remain correct after removing all zeros, and print \"", "NO", "\" otherwise."]], "sample_test_input": ["101", "102"], "sample_test_output": ["YES"], "note": []}
{"title": ["B. Train"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The train is represented by ", "n", " wagons which are numbered with positive integers from ", "1", " to ", "n", " from the head to the tail. The stowaway and the controller are initially in some two different wagons. Every minute the train can be in one of two conditions — moving or idle. Every minute the players move."], ["The controller's move is as follows. The controller has the movement direction — to the train's head or to its tail. During a move the controller moves to the neighbouring wagon correspondingly to its movement direction. If at the end of his move the controller enters the ", "1", "-st or the ", "n", "-th wagon, that he changes the direction of his movement into the other one. In other words, the controller cyclically goes from the train's head to its tail and back again during all the time of a game, shifting during each move by one wagon. Note, that the controller always have exactly one possible move."], ["The stowaway's move depends from the state of the train. If the train is moving, then the stowaway can shift to one of neighbouring wagons or he can stay where he is without moving. If the train is at a station and is idle, then the stowaway leaves the train (i.e. he is now not present in any train wagon) and then, if it is not the terminal train station, he enters the train again into any of ", "n", " wagons (not necessarily into the one he's just left and not necessarily into the neighbouring one). If the train is idle for several minutes then each such minute the stowaway leaves the train and enters it back."], ["Let's determine the order of the players' moves. If at the given minute the train is moving, then first the stowaway moves and then the controller does. If at this minute the train is idle, then first the stowaway leaves the train, then the controller moves and then the stowaway enters the train."], ["If at some point in time the stowaway and the controller happen to be in one wagon, then the controller wins: he makes the stowaway pay fine. If after a while the stowaway reaches the terminal train station, then the stowaway wins: he simply leaves the station during his move and never returns there again."], ["At any moment of time the players know each other's positions. The players play in the optimal way. Specifically, if the controller wins, then the stowaway plays so as to lose as late as possible. As all the possible moves for the controller are determined uniquely, then he is considered to play optimally always. Determine the winner."], []], "input_specification": [["The first line contains three integers ", "n", ", ", "m", " and ", "k", ". They represent the number of wagons in the train, the stowaway's and the controller's initial positions correspondingly (", "2 ≤ ", "n", " ≤ 50", ", ", "1 ≤ ", "m", ", ", "k", " ≤ ", "n", ", ", "m", " ≠ ", "k", ")."], ["The second line contains the direction in which a controller moves. \"to head\" means that the controller moves to the train's head and \"to tail\" means that the controller moves to its tail. It is guaranteed that in the direction in which the controller is moving, there is at least one wagon. Wagon ", "1", " is the head, and wagon ", "n", " is the tail."], ["The third line has the length from ", "1", " to ", "200", " and consists of symbols \"0\" and \"1\". The ", "i", "-th symbol contains information about the train's state at the ", "i", "-th minute of time. \"0\" means that in this very minute the train moves and \"1\" means that the train in this very minute stands idle. The last symbol of the third line is always \"1\" — that's the terminal train station."]], "output_specification": [["If the stowaway wins, print \"Stowaway\" without quotes. Otherwise, print \"Controller\" again without quotes, then, separated by a space, print the number of a minute, at which the stowaway will be caught."]], "sample_test_input": ["5 3 2", "to head", "0001001"], "sample_test_output": ["Stowaway"], "note": []}
{"title": ["C. Chessboard Billiard"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["More formally, first one of four diagonal directions is chosen and the billiard ball moves in that direction. When it reaches the square located on the board's edge, the billiard ball reflects from it; it changes the direction of its movement by 90 degrees and continues moving. Specifically, having reached a corner square, the billiard ball is reflected twice and starts to move the opposite way. While it moves, the billiard ball can make an infinite number of reflections. At any square of its trajectory the billiard ball can stop and on that the move is considered completed."], [], ["It is considered that one billiard ball ", "a", " beats another billiard ball ", "b", " if ", "a", " can reach a point where ", "b", " is located."], ["You are suggested to find the maximal number of billiard balls, that pairwise do not beat each other and that can be positioned on a chessboard ", "n", " × ", "m", " in size."]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "2 ≤ ", "n", ", ", "m", " ≤ 10", "6", ")."]], "output_specification": [["Print a single number, the maximum possible number of billiard balls that do not pairwise beat each other."], ["Please do not use the ", "%lld", " specificator to read or write 64-bit numbers in C++. It is preferred to use ", "cin", " (also you may use the ", "%I64d", " specificator)."]], "sample_test_input": ["3 4"], "sample_test_output": ["2"], "note": []}
{"title": ["B. Facetook Priority Wall"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["This priority factor will be affected by three types of actions: "], [], ["X", " and ", "Y", " will be two distinct names. And each action will increase the priority factor between ", "X", " and ", "Y", " (and vice versa) by the above value of points (the priority factor between ", "X", " and ", "Y", " is the same as the priority factor between ", "Y", " and ", "X", ")."], ["You will be given ", "n", " actions with the above format (without the action number and the number of points), and you have to print all the distinct names in these actions sorted according to the priority factor with you."]], "input_specification": [["The first line contains your name. The second line contains an integer ", "n", ", which is the number of actions (", "1 ≤ ", "n", " ≤ 100", "). Then ", "n", " lines follow, it is guaranteed that each one contains exactly 1 action in the format given above. There is exactly one space between each two words in a line, and there are no extra spaces. All the letters are lowercase. All names in the input will consist of at least 1 letter and at most 10 small Latin letters."]], "output_specification": [["Print ", "m", " lines, where ", "m", " is the number of distinct names in the input (excluding yourself). Each line should contain just 1 name. The names should be sorted according to the priority factor with you in the descending order (the highest priority factor should come first). If two or more names have the same priority factor, print them in the alphabetical (lexicographical) order."], ["Note, that you should output all the names that are present in the input data (excluding yourself), even if that person has a zero priority factor."], ["The lexicographical comparison is performed by the standard \"", "<", "\" operator in modern programming languages. The line ", "a", " is lexicographically smaller than the line ", "b", ", if either ", "a", " is the prefix of ", "b", ", or if exists such an ", "i", " (", "1 ≤ ", "i", " ≤ ", "min", "(|", "a", "|, |", "b", "|)", "), that ", "a", "i", " < ", "b", "i", ", and for any ", "j", " (", "1 ≤ ", "j", " < ", "i", ") ", "a", "j", " = ", "b", "j", ", where ", "|", "a", "|", " and ", "|", "b", "|", " stand for the lengths of strings ", "a", " and ", "b", " correspondently."]], "sample_test_input": ["ahmed", "3", "ahmed posted on fatma's wall", "fatma commented on ahmed's post", "mona likes ahmed's post"], "sample_test_output": ["fatma", "mona"], "note": []}
{"title": ["E. Hide-and-Seek"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["If an obstacle has a common point with a line of vision, it's considered, that the boys can't see each other with this line of vision. If the mirror has a common point with the line of vision, it's considered, that the boys can see each other in the mirror, i.e. reflection takes place. The reflection process is governed by laws of physics — the angle of incidence is equal to the angle of reflection. The incident ray is in the same half-plane as the reflected ray, relative to the mirror. I.e. to see each other Victor and Peter should be to the same side of the line, containing the mirror (see example 1). If the line of vision is parallel to the mirror, reflection doesn't take place, and the mirror isn't regarded as an obstacle (see example 4)."], ["Victor got interested if he can see Peter, while standing at the same spot. Help him solve this problem."], []], "input_specification": [["The first line contains two numbers ", "x", "v", " and ", "y", "v", " — coordinates of Victor."], ["The second line contains two numbers ", "x", "p", " and ", "y", "p", " — coordinates of Peter."], ["The third line contains 4 numbers ", "x", "w", ", 1", ", ", "y", "w", ", 1", ", ", "x", "w", ", 2", ", ", "y", "w", ", 2", " — coordinates of the wall."], ["The forth line contains 4 numbers ", "x", "m", ", 1", ", ", "y", "m", ", 1", ", ", "x", "m", ", 2", ", ", "y", "m", ", 2", " — coordinates of the mirror."], ["All the coordinates are integer numbers, and don't exceed ", "10", "4", " in absolute value. It's guaranteed, that the segments don't have common points, Victor and Peter are not on any of the segments, coordinates of Victor and Peter aren't the same, the segments don't degenerate into points."]], "output_specification": [["Output ", "YES", ", if Victor can see Peter without leaving the initial spot. Otherwise output ", "NO", "."]], "sample_test_input": ["-1 3", "1 3", "0 2 0 4", "0 0 0 1"], "sample_test_output": ["NO"], "note": []}
{"title": ["C. Wonderful Randomized Sum"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "5", ") — amount of elements in the sequence. The second line contains ", "n", " integers ", "a", "i", " (", " - 10", "4", " ≤ ", "a", "i", " ≤ 10", "4", ") — the sequence itself."]], "output_specification": [["The first and the only line of the output should contain the answer to the problem."]], "sample_test_input": ["3", "-1 -2 -3"], "sample_test_output": ["6"], "note": []}
{"title": ["E. Helper"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Having this data, Valera's decided to draw up a timetable, according to which he will solve problems for his groupmates. For sure, Valera can't solve problems round the clock, that's why he's found for himself an optimum order of day and plans to stick to it during the whole exam period. Valera assigned time segments for sleep, breakfast, lunch and dinner. The rest of the time he can work."], ["Obviously, Valera can help a student with some subject, only if this subject is on the ", "list", ". It happened, that all the students, to whom Valera spoke, have different, but one-type problems, that's why Valera can solve any problem of subject ", "list", "i", " in ", "t", "i", " minutes."], ["Moreover, if Valera starts working at some problem, he can break off only for sleep or meals, but he can't start a new problem, not having finished the current one. Having solved the problem, Valera can send it instantly to the corresponding student via the Internet."], ["If this student's exam hasn't started yet, he can make a crib, use it to pass the exam successfully, and pay Valera the promised sum. Since Valera has little time, he asks you to write a program that finds the order of solving problems, which can bring Valera maximum profit."], []], "input_specification": [["The first line contains integers ", "m", ", ", "n", ", ", "k", " (", "1 ≤ ", "m", ", ", "n", " ≤ 100", ", ", "1 ≤ ", "k", " ≤ 30", ") — amount of subjects on the ", "list", ", amount of Valera's potential employers and the duration of the exam period in days."], ["The following ", "m", " lines contain the names of subjects ", "list", "i", " (", "list", "i", " is a non-empty string of at most 32 characters, consisting of lower case Latin letters). It's guaranteed that no two subjects are the same."], ["The ", "(", "m", " + 2)", "-th line contains ", "m", " integers ", "t", "i", " (", "1 ≤ ", "t", "i", " ≤ 1000", ") — time in minutes that Valera spends to solve problems of the ", "i", "-th subject. Then follow four lines, containing time segments for sleep, breakfast, lunch and dinner correspondingly."], ["Each line is in format ", "H1:M1-H2:M2", ", where ", "00 ≤ ", " ", "H1", ", ", "H2", " ", " ≤ 23", ", ", "00 ≤ ", " ", "M1", ", ", "M2", " ", " ≤ 59", ". Time ", "H1:M1", " stands for the first minute of some Valera's action, and time ", "H2:M2", " stands for the last minute of this action. No two time segments cross. It's guaranteed that Valera goes to bed before midnight, gets up earlier than he has breakfast, finishes his breakfast before lunch, finishes his lunch before dinner, and finishes his dinner before midnight. All these actions last less than a day, but not less than one minute. Time of the beginning and time of the ending of each action are within one and the same day. But it's possible that Valera has no time for solving problems."], ["Then follow ", "n", " lines, each containing the description of students. For each student the following is known: his exam subject ", "s", "i", " (", "s", "i", " is a non-empty string of at most 32 characters, consisting of lower case Latin letters), index of the exam day ", "d", "i", " (", "1 ≤ ", "d", "i", " ≤ ", "k", "), the exam time ", "time", "i", ", and sum of money ", "c", "i", " (", "0 ≤ ", "c", "i", " ≤ 10", "6", ", ", "c", "i", " — integer) that he's ready to pay for Valera's help. Exam time ", "time", "i", " is in the format ", "HH:MM", ", where ", "00 ≤ ", " ", "HH", " ", " ≤ 23", ", ", "00 ≤ ", " ", "MM", " ", " ≤ 59", ". Valera will get money, if he finishes to solve the problem strictly before the corresponding student's exam begins."]], "output_specification": [["In the first line output the maximum profit that Valera can get. The second line should contain number ", "p", " — amount of problems that Valera is to solve. In the following ", "p", " lines output the order of solving problems in chronological order in the following format: index of a student, to whom Valera is to help; index of the time, when Valera should start the problem; time, when Valera should start the problem (the first minute of his work); index of the day, when Valera should finish the problem; time, when Valera should finish the problem (the last minute of his work). To understand the output format better, study the sample tests."]], "sample_test_input": ["3 3 4", "calculus", "algebra", "history", "58 23 15", "00:00-08:15", "08:20-08:35", "09:30-10:25", "19:00-19:45", "calculus 1 09:36 100", "english 4 21:15 5000", "history 1 19:50 50"], "sample_test_output": ["150", "2", "1 1 08:16 1 09:29", "3 1 10:26 1 10:40"], "note": []}
{"title": ["E. Common ancestor"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["They say that two creatures with DNA sequences ", "s", "1", " and ", "s", "2", " can have a common ancestor if there exists such a DNA sequence ", "s", "3", " that throughout evolution it can result in ", "s", "1", " and ", "s", "2", ", perhaps after a different number of stages. Your task is to find out by the given ", "s", "1", " and ", "s", "2", " whether the creatures possessing such DNA sequences can have a common ancestor. If the answer is positive, you have to find the length of the shortest sequence of the common ancestor’s DNA."], []], "input_specification": [["The first line contains a non-empty DNA sequence ", "s", "1", ", the second line contains a non-empty DNA sequence ", "s", "2", ". The lengths of these lines do not exceed 50, the lines contain only lowercase Latin letters. The third line contains an integer ", "n", " (", "0 ≤ ", "n", " ≤ 50", ") — the number of permissible substitutions. Then follow ", "n", " lines each of which describes a substitution in the format ", "a", "i", "->", "b", "i", "c", "i", ". The characters ", "a", "i", ", ", "b", "i", ", and ", "c", "i", " are lowercase Latin letters. Lines ", "s", "1", " and ", "s", "2", " can coincide, the list of substitutions can contain similar substitutions."]], "output_specification": [["If ", "s", "1", " and ", "s", "2", " cannot have a common ancestor, print -1. Otherwise print the length of the shortest sequence ", "s", "3", ", from which ", "s", "1", " and ", "s", "2", " could have evolved."]], "sample_test_input": ["ababa", "aba", "2", "c->ba", "c->cc"], "sample_test_output": ["2"], "note": []}
{"title": ["B. Correct Solution?"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["—Shuffle the digits in this number in order to obtain the smallest possible number without leading zeroes."], ["—No problem! — said Bob and immediately gave her an answer."], ["Alice said a random number, so she doesn't know whether Bob's answer is correct. Help her to find this out, because impatient brother is waiting for the verdict."], []], "input_specification": [["The first line contains one integer ", "n", " (", "0 ≤ ", "n", " ≤ 10", "9", ") without leading zeroes. The second lines contains one integer ", "m", " (", "0 ≤ ", "m", " ≤ 10", "9", ") — Bob's answer, possibly with leading zeroes."]], "output_specification": [["Print ", "OK", " if Bob's answer is correct and ", "WRONG_ANSWER", " otherwise."]], "sample_test_input": ["3310", "1033"], "sample_test_output": ["OK"], "note": []}
{"title": ["A. Super Agent"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Now he is standing at the entrance, but to get inside he need to pass combination lock. Minute ago one of the workers entered the password on the terminal and opened the door. The terminal is a square digital keyboard ", "3 × 3", " with digits from ", "1", " to ", "9", "."], ["Pearlo knows that the password consists from distinct digits and is probably symmetric with respect to the central button of the terminal. He has heat sensor which allowed him to detect the digits which the worker pressed. Now he wants to check whether the password entered by the worker is symmetric with respect to the central button of the terminal. This fact can Help Pearlo to reduce the number of different possible password combinations."], []], "input_specification": [["Input contains the matrix of three rows of three symbols each. Symbol «", "X", "» means that the corresponding button was pressed, and «", ".", "» means that is was not pressed. The matrix may contain no «", "X", "», also it may contain no «", ".", "»."]], "output_specification": [["Print ", "YES", " if the password is symmetric with respect to the central button of the terminal and ", "NO", " otherwise."]], "sample_test_input": ["XX.", "...", ".XX"], "sample_test_output": ["YES"], "note": [["If you are not familiar with the term «central symmetry», you may look into http://en.wikipedia.org/wiki/Central_symmetry"]]}
{"title": ["E. Start of the season"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains one integer ", "n", " (", "2 ≤ ", "n", " ≤ 1000", "), ", "n", " is even."]], "output_specification": [["Output ", "n", " lines with ", "n", " numbers each — the required matrix. Separate numbers with spaces. If there are several solutions, output any."]], "sample_test_input": ["2"], "sample_test_output": ["0 1", "1 0"], "note": []}
{"title": ["A. Numbers"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Now he wonders what is an average value of sum of digits of the number ", "A", " written in all bases from ", "2", " to ", "A", " - 1", "."], ["Note that all computations should be done in base 10. You should find the result as an irreducible fraction, written in base 10."], []], "input_specification": [["Input contains one integer number ", "A", " (", "3 ≤ ", "A", " ≤ 1000", ")."]], "output_specification": [["Output should contain required average value in format «", "X/Y", "», where ", "X", " is the numerator and ", "Y", " is the denominator."]], "sample_test_input": ["5"], "sample_test_output": ["7/3"], "note": [["In the first sample number 5 written in all bases from 2 to 4 looks so: 101, 12, 11. Sums of digits are 2, 3 and 2, respectively."]]}
{"title": ["F1. Promising String (easy version)"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["We will call a non-empty string ", "balanced", " if it contains the same number of plus and minus signs. For example: strings \"", "+-", "-+", "\" and \"", "++-+-", "-", "\" are balanced, and strings \"", "+-", "-", "\", \"", "-", "-", "\" and \"\" are not balanced."], ["We will call a string ", "promising", " if the string can be made balanced by several (possibly zero) uses of the following operation:"], [], ["In particular, every balanced string is promising. However, the converse is not true: not every promising string is balanced."], ["For example, the string \"", "-+-", "-", "-", "\" is promising, because you can replace two adjacent minuses with plus and get a balanced string \"", "-++-", "\", or get another balanced string \"", "-+-+", "\"."], ["How many non-empty substrings of the given string $$$s$$$ are promising? Each non-empty promising substring must be counted in the answer as many times as it occurs in string $$$s$$$."], ["Recall that a substring is a sequence of consecutive characters of the string. For example, for string \"", "+-+", "\" its substring are: \"", "+-", "\", \"", "-+", "\", \"", "+", "\", \"", "+-+", "\" (the string is a substring of itself) and some others. But the following strings are not its substring: \"", "-", "-", "\", \"", "+", "+", "\", \"", "-", "++", "\"."]], "input_specification": [["The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 500$$$) —the number of test cases in the test."], ["Then the descriptions of test cases follow."], ["Each test case of input data consists of two lines. The first line consists of the number $$$n$$$ ($$$1 \\le n \\le 3000$$$): the length of $$$s$$$."], ["The second line of the test case contains the string $$$s$$$ of length $$$n$$$, consisting only of characters \"", "+", "\" and \"", "-", "\"."], ["It is guaranteed that the sum of values $$$n$$$ over all test cases does not exceed $$$3000$$$."]], "output_specification": [["For each test case, print a single number: the number of the promising non-empty substrings of string $$$s$$$. Each non-empty promising substring must be counted in the answer as many times as it occurs in string $$$s$$$."]], "sample_test_input": ["5", "3", "+-+", "5", "-+---", "4", "----", "7", "--+---+", "6", "+++---"], "sample_test_output": ["2\n4\n2\n7\n4\n"], "note": [["The following are the promising substrings for the first three test cases in the example:"]]}
{"title": ["C. Minimum Extraction"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["If $$$a$$$ has length strictly greater than $$$1$$$, then Yelisei can apply an operation called ", "minimum extraction", " to it: "], [], ["Thus, after each operation, the length of the array is reduced by $$$1$$$."], ["For example, if $$$a = [1, 6, -4, -2, -4]$$$, then the minimum element in it is $$$a_3 = -4$$$, which means that after this operation the array will be equal to $$$a=[1 {- (-4)}, 6 {- (-4)}, -2 {- (-4)}, -4 {- (-4)}] = [5, 10, 2, 0]$$$."], ["Since Yelisey likes big numbers, he wants the numbers in the array $$$a$$$ to be as big as possible."], ["Formally speaking, he wants to make the ", "minimum", " of the numbers in array $$$a$$$ to be ", "maximal possible", " (i.e. he want to maximize a minimum). To do this, Yelisey can apply the ", "minimum extraction", " operation to the array as many times as he wants (possibly, zero). Note that the operation cannot be applied to an array of length $$$1$$$."], ["Help him find what maximal value can the minimal element of the array have after applying several (possibly, zero) ", "minimum extraction", " operations to the array."]], "input_specification": [["The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases."], ["The next $$$2t$$$ lines contain descriptions of the test cases."], ["In the description of each test case, the first line contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the original length of the array $$$a$$$. The second line of the description lists $$$n$$$ space-separated integers $$$a_i$$$ ($$$-10^9 \\leq a_i \\leq 10^9$$$) — elements of the array $$$a$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["Print $$$t$$$ lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer — the maximal possible minimum in $$$a$$$, which can be obtained by several applications of the described operation to it."]], "sample_test_input": ["8\n1\n10\n2\n0 0\n3\n-1 2 0\n4\n2 10 1 7\n2\n2 3\n5\n3 2 -4 -2 0\n2\n-1 1\n1\n-2\n"], "sample_test_output": ["10\n0\n2\n5\n2\n2\n2\n-2\n"], "note": [["In the first example test case, the original length of the array $$$n = 1$$$. Therefore ", "minimum extraction", " cannot be applied to it. Thus, the array remains unchanged and the answer is $$$a_1 = 10$$$."], ["In the second set of input data, the array will always consist only of zeros."], ["In the third set, the array will be changing as follows: $$$[\\color{blue}{-1}, 2, 0] \\to [3, \\color{blue}{1}] \\to [\\color{blue}{2}]$$$. The minimum elements are highlighted with $$$\\color{blue}{\\text{blue}}$$$. The maximal one is $$$2$$$."], ["In the fourth set, the array will be modified as $$$[2, 10, \\color{blue}{1}, 7] \\to [\\color{blue}{1}, 9, 6] \\to [8, \\color{blue}{5}] \\to [\\color{blue}{3}]$$$. Similarly, the maximum of the minimum elements is $$$5$$$."]]}
{"title": ["B. Getting Zero"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["You are given $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$. What is the minimum number of operations you need to make each $$$a_i$$$ equal to $$$0$$$?"]], "input_specification": [["The first line contains the single integer $$$n$$$ ($$$1 \\le n \\le 32768$$$) — the number of integers."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i < 32768$$$)."]], "output_specification": [["Print $$$n$$$ integers. The $$$i$$$-th integer should be equal to the minimum number of operations required to make $$$a_i$$$ equal to $$$0$$$."]], "sample_test_input": ["4\n19 32764 10240 49\n"], "sample_test_output": ["14 4 4 15 "], "note": [["Let's consider each $$$a_i$$$: "]]}
{"title": ["C. Water the Trees"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You want to water these trees, so they all grow to the ", "same", " height."], ["The watering process goes as follows. You start watering trees at day $$$1$$$. During the $$$j$$$-th day you can: "], [], ["Note that you can't water more than one tree in a day. "], ["Your task is to determine the ", "minimum", " number of days required to water the trees so they grow to the same height."], ["You have to answer $$$t$$$ independent test cases."]], "input_specification": [["The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) — the number of test cases."], ["The first line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$) — the number of trees."], ["The second line of the test case contains $$$n$$$ integers $$$h_1, h_2, \\ldots, h_n$$$ ($$$1 \\le h_i \\le 10^9$$$), where $$$h_i$$$ is the height of the $$$i$$$-th tree."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$ ($$$\\sum n \\le 3 \\cdot 10^5$$$)."]], "output_specification": [["For each test case, print one integer — the ", "minimum", " number of days required to water the trees, so they grow to the same height."]], "sample_test_input": ["3\n3\n1 2 4\n5\n4 4 3 5 5\n7\n2 5 4 8 3 7 4\n"], "sample_test_output": ["4\n3\n16\n"], "note": [["Consider the first test case of the example. The initial state of the trees is $$$[1, 2, 4]$$$."], []]}
{"title": ["E. Robot on the Board 1"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The robot is able to move from the current cell to one of the four cells adjacent by side."], ["The sequence of commands $$$s$$$ executed by the robot is given. Each command is denoted by one of the symbols '", "L", "', '", "R", "', '", "D", "' or '", "U", "', and triggers the movement to left, right, down or up, respectively."], ["The robot can start its movement in ", "any", " cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in $$$s$$$. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is ", "not considered", " successfully executed."], ["The robot's task is to execute as many commands as possible without falling off the board. For example, on board $$$3 \\times 3$$$, if the robot starts a sequence of actions $$$s=$$$\"", "RRDLUU", "\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell $$$(2, 1)$$$ (second row, first column) then all commands will be executed successfully and the robot will stop at the cell $$$(1, 2)$$$ (first row, second column)."], [], ["Determine the cell from which the robot should start its movement in order to execute as many commands as possible."]], "input_specification": [["The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases."], ["The next $$$2t$$$ lines contain descriptions of the test cases."], ["In the description of each test case, the first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^6$$$) — the height and width of the field that the robot is located on. The second line of the description is a string $$$s$$$ consisting solely of characters '", "L", "', '", "R", "', '", "D", "' and '", "U", "' — the sequence of commands the robot executes. The string has a length from $$$1$$$ to $$$10^6$$$ commands."], ["It is guaranteed that the total length of $$$s$$$ over all test cases does not exceed $$$10^6$$$."]], "output_specification": [["Print $$$t$$$ lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers $$$r$$$ ($$$1 \\leq r \\leq n$$$) and $$$c$$$ ($$$1 \\leq c \\leq m$$$), separated by a space — the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible."], ["If there are several such cells, you may output any of them."]], "sample_test_input": ["4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n"], "sample_test_output": ["1 1\n1 2\n2 1\n3 2\n"], "note": []}
{"title": ["E1. Minibuses on Venus (easy version)"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Maxim is a minibus driver on Venus."], ["To ride on Maxim's minibus, you need a ticket. Each ticket has a number consisting of $$$n$$$ digits. However, as we know, the residents of Venus use a numeral system with base $$$k$$$, rather than the decimal system. Therefore, the ticket number can be considered as a sequence of $$$n$$$ integers from $$$0$$$ to $$$k-1$$$, inclusive."], ["The residents of Venus consider a ticket to be ", "lucky", " if there is a digit on it that is equal to the sum of the remaining digits, modulo $$$k$$$. For example, if $$$k=10$$$, then the ticket $$$7135$$$ is lucky because $$$7 + 1 + 5 \\equiv 3 \\pmod{10}$$$. On the other hand, the ticket $$$7136$$$ is not lucky because no digit is equal to the sum of the others modulo $$$10$$$."], ["Once, while on a trip, Maxim wondered: how many lucky tickets exist? At the same time, Maxim understands that this number can be very large, so he is interested only in the answer modulo some prime number $$$m$$$."], []], "input_specification": [["The only line of the input contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le k \\le 30$$$, $$$10^8 \\le m \\le 10^9 + 7$$$, $$$m$$$ is a prime number) — the number of digits on the ticket, the base of the numeral system on Venus, and the module for answer calculation."]], "output_specification": [["Print one integer — the number of lucky tickets modulo $$$m$$$, i. e. the remainder after dividing the answer by $$$m$$$."]], "sample_test_input": ["3 2 1000000007\n"], "sample_test_output": ["4\n"], "note": [["In the first example, there are only four lucky tickets: $$$000$$$, $$$011$$$, $$$101$$$, and $$$110$$$."]]}
{"title": ["E2. Minibuses on Venus (medium version)"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Maxim is a minibus driver on Venus."], ["To ride on Maxim's minibus, you need a ticket. Each ticket has a number consisting of $$$n$$$ digits. However, as we know, the residents of Venus use a numeral system with base $$$k$$$, rather than the decimal system. Therefore, the ticket number can be considered as a sequence of $$$n$$$ integers from $$$0$$$ to $$$k-1$$$, inclusive."], ["The residents of Venus consider a ticket to be ", "lucky", " if there is a digit on it that is equal to the sum of the remaining digits, modulo $$$k$$$. For example, if $$$k=10$$$, then the ticket $$$7135$$$ is lucky because $$$7 + 1 + 5 \\equiv 3 \\pmod{10}$$$. On the other hand, the ticket $$$7136$$$ is not lucky because no digit is equal to the sum of the others modulo $$$10$$$."], ["Once, while on a trip, Maxim wondered: how many lucky tickets exist? At the same time, Maxim understands that this number can be very large, so he is interested only in the answer modulo some prime number $$$m$$$."], []], "input_specification": [["The only line of the input contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \\le n \\le 10^{18}$$$, $$$1 \\le k \\le 100$$$, $$$10^8 \\le m \\le 10^9 + 7$$$, $$$m$$$ is a prime number) — the number of digits on the ticket, the base of the numeral system on Venus, and the module for answer calculation."]], "output_specification": [["Print one integer — the number of lucky tickets modulo $$$m$$$, i. e. the remainder after dividing the answer by $$$m$$$."]], "sample_test_input": ["3 2 1000000007\n"], "sample_test_output": ["4\n"], "note": [["In the first example, there are only four lucky tickets: $$$000$$$, $$$011$$$, $$$101$$$, and $$$110$$$."]]}
{"title": ["F. Robot on the Board 2"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The robot is able to move from the current cell to one of the four cells adjacent by side."], ["Each cell has one of the symbols '", "L", "', '", "R", "', '", "D", "' or '", "U", "' written on it, indicating the direction in which the robot will move when it gets in that cell — left, right, down or up, respectively."], ["The robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. "], [], ["Robot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops."], ["Determine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board)."]], "input_specification": [["The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10000$$$) — the number of test cases in the test."], ["Each test case's description is preceded by a blank line. Next is a line that contains integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 2000$$$; $$$1 \\le m \\le 2000$$$) — the height and width of the board. This line followed by $$$n$$$ lines, the $$$i$$$-th of which describes the $$$i$$$-th line of the board. Each of them is exactly $$$m$$$ letters long and consists of symbols '", "L", "', '", "R", "', '", "D", "' and '", "U", "'."], ["It is guaranteed that the sum of sizes of all boards in the input does not exceed $$$4\\cdot10^6$$$."]], "output_specification": [["For each test case, output three integers $$$r$$$, $$$c$$$ and $$$d$$$ ($$$1 \\le r \\le n$$$; $$$1 \\le c \\le m$$$; $$$d \\ge 0$$$), which denote that the robot should start moving from cell $$$(r, c)$$$ to make the maximum number of moves $$$d$$$. If there are several answers, output any of them."]], "sample_test_input": ["7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n"], "sample_test_output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n"], "note": []}
{"title": ["A. Garland"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Initially, all the light bulbs are turned off. Your task is to turn all the light bulbs on. You can perform the following operation any number of times: select a light bulb and switch its state (turn it on if it was off, and turn it off if it was on). The only restriction on the above operation is that you can apply the operation to a light bulb only if the previous operation was applied to a light bulb of a different color (the first operation can be applied to any light bulb)."], ["Calculate the minimum number of operations to turn all the light bulbs on, or report that this is impossible."], []], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases."], ["The single line of each test case contains $$$s$$$ — a sequence of $$$4$$$ characters, where each character is a decimal digit. The $$$i$$$-th character denotes the color of the $$$i$$$-th light bulb."]], "output_specification": [["For each test case, print one integer — the minimum number of operations to turn all the light bulbs on. If it is impossible to turn all the bulbs on, print ", "-1", "."]], "sample_test_input": ["3", "9546", "0000", "3313"], "sample_test_output": ["4\n-1\n6\n"], "note": [["In the first example, all the colors are different, so you can just turn all the bulbs on in $$$4$$$ operations."], ["In the second example, it is impossible to turn all the bulbs on, because after you switch one light bulb, it is impossible to turn the others on."], ["In the third example, you can proceed as follows: turn the first light bulb on, turn the third light bulb on, turn the fourth light bulb on, turn the third light bulb off, turn the second light bulb on, turn the third light bulb on."]]}
{"title": ["C. Sum on Subarrays"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For example, the array $$$a = [1, -3, 1]$$$ has $$$6$$$ non-empty subarrays:"], [], ["You are given two integers $$$n$$$ and $$$k$$$. Construct an array $$$a$$$ consisting of $$$n$$$ integers such that:"]], "input_specification": [["The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases."], ["Each test case consists of one line containing two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 30$$$; $$$0 \\le k \\le \\dfrac{(n+1) \\cdot n}{2}$$$)."]], "output_specification": [["For each test case, print $$$n$$$ integers — the elements of the array meeting the constraints. It can be shown that the answer always exists. If there are multiple answers, print any of them."]], "sample_test_input": ["4", "3 2", "2 0", "2 2", "4 6"], "sample_test_output": ["1 -3 1\n-13 -42\n-13 42\n-3 -4 10 -2\n"], "note": []}
{"title": ["E. Colorful Operations"], "time_limit": ["time limit per test", "4 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of input contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\le n,q \\le 10^6$$$) — the length of array $$$a$$$ and the number of queries you have to perform."], ["Each of the next $$$q$$$ lines contains the query given in the form described in the problem statement."]], "output_specification": [["Print the answers to the queries of the third type on separate lines."]], "sample_test_input": ["5 8\nColor 2 4 2\nAdd 2 2\nQuery 3\nColor 4 5 3\nColor 2 2 3\nAdd 3 3\nQuery 2\nQuery 5\n"], "sample_test_output": ["2\n5\n3\n"], "note": [["The first sample test is explained below. Blue, red and green represent colors $$$1$$$, $$$2$$$ and $$$3$$$ respectively."]]}
{"title": ["F. Traveling in Berland"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You want to travel all over Berland, starting in some city, visiting all the other cities and returning to the starting city. Unfortunately, you can only drive along the Berland Ring Highway, which connects all $$$n$$$ cities. The road was designed by a very titled and respectable minister, so it is one-directional — it can only be traversed clockwise, only from the city $$$i$$$ to the city $$$(i \\bmod n) + 1$$$ (i.e. from $$$1$$$ to $$$2$$$, from $$$2$$$ in $$$3$$$, ..., from $$$n$$$ to $$$1$$$)."], ["The fuel tank of your car holds up to $$$k$$$ liters of fuel. To drive from the $$$i$$$-th city to the next one, $$$a_i$$$ liters of fuel are needed (and are consumed in the process)."], ["Every city has a fuel station; a liter of fuel in the $$$i$$$-th city costs $$$b_i$$$ burles. Refueling between cities is not allowed; if fuel has run out between cities, then your journey is considered incomplete."], ["For each city, calculate the minimum cost of the journey if you start and finish it in that city."], []], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases."], ["The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$3 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le k \\le 10^9$$$) — the number of cities and the volume of fuel tank, respectively."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le k$$$)."], ["The third line contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$1 \\le b_i \\le 2$$$)."], ["The sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case, print $$$n$$$ integers, where the $$$i$$$-th of them is equal to the minimum cost of the journey if you start and finish in the $$$i$$$-th city."]], "sample_test_input": ["4", "3 5", "3 4 4", "1 2 2", "5 7", "1 3 2 5 1", "2 1 1 1 2", "4 3", "1 2 1 3", "2 2 2 2", "3 2", "2 2 2", "1 2 1"], "sample_test_output": ["17 19 17 \n13 12 12 12 14 \n14 14 14 14 \n8 8 8 \n"], "note": []}
{"title": ["F2. Korney Korneevich and XOR (hard version)"], "time_limit": ["time limit per test", "1.5 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Korney Korneevich dag up an array $$$a$$$ of length $$$n$$$. Korney Korneevich has recently read about the operation ", "bitwise XOR", ", so he wished to experiment with it. For this purpose, he decided to find all integers $$$x \\ge 0$$$ such that there exists an ", "increasing", " subsequence of the array $$$a$$$, in which the bitwise XOR of numbers is equal to $$$x$$$."], ["It didn't take a long time for Korney Korneevich to find all such $$$x$$$, and he wants to check his result. That's why he asked you to solve this problem!"], ["A sequence $$$s$$$ is a subsequence of a sequence $$$b$$$ if $$$s$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) elements."], ["A sequence $$$s_1, s_2, \\ldots , s_m$$$ is called increasing if $$$s_1 < s_2 < \\ldots < s_m$$$."], []], "input_specification": [["The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^6$$$)."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 5000$$$) — the elements of the array $$$a$$$."]], "output_specification": [["In the first line print a single integer $$$k$$$ — the number of found $$$x$$$ values."], ["In the second line print $$$k$$$ integers in ", "increasing", " order $$$x_1, x_2, \\ldots x_k$$$ ($$$0 \\le x_1 < \\ldots < x_k$$$) — found $$$x$$$ values."]], "sample_test_input": ["4\n4 2 2 4\n"], "sample_test_output": ["4\n0 2 4 6 \n"], "note": [["In the first test case:"]]}
{"title": ["B. Treasure Hunt"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["This is an interactive problem."], ["Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don't know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements."], ["The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you'll find a treasure chest immediately and, consequently, you'll put a flag there immediately as well."], ["When you are standing at the junction you can see for each of the ", "adjacent", " vertices its ", "degree", " and if there is a ", "flag", " there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction $$$v$$$ might be different each time you come in the junction $$$v$$$. However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to $$$v$$$ vertex."], ["Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting!"], []], "input_specification": [], "output_specification": [], "sample_test_input": [], "sample_test_output": [], "note": []}
{"title": ["D. Omkar and the Meaning of Life"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A query consists of an array $$$a_1, a_2, \\ldots, a_n$$$ of integers between $$$1$$$ and $$$n$$$. $$$a$$$ is ", "not", " required to be a permutation. Omkar will first compute the pairwise sum of $$$a$$$ and $$$p$$$, meaning that he will compute an array $$$s$$$ where $$$s_j = p_j + a_j$$$ for all $$$j = 1, 2, \\ldots, n$$$. Then, he will find the smallest index $$$k$$$ such that $$$s_k$$$ occurs more than once in $$$s$$$, and answer with $$$k$$$. If there is no such index $$$k$$$, then he will answer with $$$0$$$."], ["You can perform at most $$$2n$$$ queries. Figure out the meaning of life $$$p$$$."], []], "input_specification": [], "output_specification": [], "sample_test_input": ["5\n\n2\n\n0\n\n1\n"], "sample_test_output": ["\n? 4 4 2 3 2\n\n? 3 5 1 5 5\n\n? 5 2 4 3 1\n\n! 3 2 1 5 4\n"], "note": [["In the sample, the hidden permutation $$$p$$$ is $$$[3, 2, 1, 5, 4]$$$. Three queries were made."], ["The first query is $$$a = [4, 4, 2, 3, 2]$$$. This yields $$$s = [3 + 4, 2 + 4, 1 + 2, 5 + 3, 4 + 2] = [7, 6, 3, 8, 6]$$$. $$$6$$$ is the only number that appears more than once, and it appears first at index $$$2$$$, making the answer to the query $$$2$$$."], ["The second query is $$$a = [3, 5, 1, 5, 5]$$$. This yields $$$s = [3 + 3, 2 + 5, 1 + 1, 5 + 5, 4 + 5] = [6, 7, 2, 10, 9]$$$. There are no numbers that appear more than once here, so the answer to the query is $$$0$$$."], ["The third query is $$$a = [5, 2, 4, 3, 1]$$$. This yields $$$s = [3 + 5, 2 + 2, 1 + 4, 5 + 3, 4 + 1] = [8, 4, 5, 8, 5]$$$. $$$5$$$ and $$$8$$$ both occur more than once here. $$$5$$$ first appears at index $$$3$$$, while $$$8$$$ first appears at index $$$1$$$, and $$$1 < 3$$$, making the answer to the query $$$1$$$."], ["Note that the sample is only meant to provide an example of how the interaction works; it is not guaranteed that the above queries represent a correct strategy with which to determine the answer."]]}
{"title": ["A. Windblume Ode"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You have obtained the elegant bow known as the Windblume Ode. Inscribed in the weapon is an array of $$$n$$$ ($$$n \\ge 3$$$) positive ", "distinct", " integers (i.e. different, no duplicates are allowed)."], ["Find the largest subset (i.e. having the maximum number of elements) of this array such that its sum is a composite number. A positive integer $$$x$$$ is called composite if there exists a positive integer $$$y$$$ such that $$$1 < y < x$$$ and $$$x$$$ is divisible by $$$y$$$."], ["If there are multiple subsets with this largest size with the composite sum, you can output any of them. It can be proven that under the constraints of the problem such a non-empty subset always exists."], []], "input_specification": [["Each test consists of multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows."], ["The first line of each test case contains an integer $$$n$$$ ($$$3 \\leq n \\leq 100$$$) — the length of the array."], ["The second line of each test case contains $$$n$$$ ", "distinct", " integers $$$a_{1},a_{2},\\dots,a_{n}$$$ ($$$1 \\leq a_{i} \\leq 200$$$) — the elements of the array."]], "output_specification": [["Each test case should have two lines of output."], ["The first line should contain a single integer $$$x$$$: the size of the largest subset with composite sum. The next line should contain $$$x$$$ space separated integers representing the indices of the subset of the initial array."]], "sample_test_input": ["4\n3\n8 1 2\n4\n6 9 4 2\n9\n1 2 3 4 5 6 7 8 9\n3\n200 199 198\n"], "sample_test_output": ["2\n2 1\n4\n2 1 4 3\n9\n6 9 1 2 3 4 5 7 8\n3\n1 2 3 \n"], "note": [["In the first test case, the subset $$$\\{a_2, a_1\\}$$$ has a sum of $$$9$$$, which is a composite number. The only subset of size $$$3$$$ has a prime sum equal to $$$11$$$. Note that you could also have selected the subset $$$\\{a_1, a_3\\}$$$ with sum $$$8 + 2 = 10$$$, which is composite as it's divisible by $$$2$$$."], ["In the second test case, the sum of all elements equals to $$$21$$$, which is a composite number. Here we simply take the whole array as our subset."]]}
{"title": ["C. Lucky Permutation"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["One day Petya dreamt of a lexicographically ", "k", "-th permutation of integers from ", "1", " to ", "n", ". Determine how many lucky numbers in the permutation are located on the positions whose indexes are also lucky numbers."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "k", " ", "(1 ≤ ", "n", ", ", "k", " ≤ 10", "9", ")", " — the number of elements in the permutation and the lexicographical number of the permutation."]], "output_specification": [["If the ", "k", "-th permutation of numbers from ", "1", " to ", "n", " does not exist, print the single number \"-1\" (without the quotes). Otherwise, print the answer to the problem: the number of such indexes ", "i", ", that ", "i", " and ", "a", "i", " are both lucky numbers."]], "sample_test_input": ["7 4"], "sample_test_output": ["1"], "note": [["A permutation is an ordered set of ", "n", " elements, where each integer from ", "1", " to ", "n", " occurs exactly once. The element of permutation in position with index ", "i", " is denoted as ", "a", "i", " (", "1 ≤ ", "i", " ≤ ", "n", "). Permutation ", "a", " is lexicographically smaller that permutation ", "b", " if there is such a ", "i", " (", "1 ≤ ", "i", " ≤ ", "n", "), that ", "a", "i", " < ", "b", "i", ", and for any ", "j", " (", "1 ≤ ", "j", " < ", "i", ") ", "a", "j", " = ", "b", "j", ". Let's make a list of all possible permutations of ", "n", " elements and sort it in the order of lexicographical increasing. Then the lexicographically ", "k", "-th permutation is the ", "k", "-th element of this list of permutations."], ["In the first sample the permutation looks like that:"], ["1 2 3 4 6 7 5"], ["The only suitable position is 4."], ["In the second sample the permutation looks like that:"], ["2 1 3 4"], ["The only suitable position is 4."]]}
{"title": ["A. Help Vasilisa the Wise 2"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The box's lock looks as follows: it contains ", "4", " identical deepenings for gems as a ", "2 × 2", " square, and some integer numbers are written at the lock's edge near the deepenings. The example of a lock is given on the picture below."], [], ["The box is accompanied with ", "9", " gems. Their shapes match the deepenings' shapes and each gem contains one number from ", "1", " to ", "9", " (each number is written on exactly one gem). The box will only open after it is decorated with gems correctly: that is, each deepening in the lock should be filled with exactly one gem. Also, the sums of numbers in the square's rows, columns and two diagonals of the square should match the numbers written at the lock's edge. For example, the above lock will open if we fill the deepenings with gems with numbers as is shown on the picture below."], []], "input_specification": [["The input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers ", "r", "1", " and ", "r", "2", " that define the required sums of numbers in the rows of the square. The second line contains space-separated integers ", "c", "1", " and ", "c", "2", " that define the required sums of numbers in the columns of the square. The third line contains space-separated integers ", "d", "1", " and ", "d", "2", " that define the required sums of numbers on the main and on the side diagonals of the square (", "1 ≤ ", "r", "1", ", ", "r", "2", ", ", "c", "1", ", ", "c", "2", ", ", "d", "1", ", ", "d", "2", " ≤ 20", "). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement."]], "output_specification": [["Print the scheme of decorating the box with stones: two lines containing two space-separated integers from ", "1", " to ", "9", ". The numbers should be pairwise different. If there is no solution for the given lock, then print the single number \"", "-1", "\" (without the quotes)."], ["If there are several solutions, output any."]], "sample_test_input": ["3 7", "4 6", "5 5"], "sample_test_output": ["1 2", "3 4"], "note": [["Pay attention to the last test from the statement: it is impossible to open the box because for that Vasilisa the Wise would need 4 identical gems containing number \"5\". However, Vasilisa only has one gem with each number from ", "1", " to ", "9", "."]]}
{"title": ["B. Help Kingdom of Far Far Away 2"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The King issued yet another order: to introduce financial format to represent numbers denoting amounts of money. The formal rules of storing a number in the financial format are as follows: "], [], ["For example, by the above given rules number 2012 will be stored in the financial format as \"", "$2,012.00", "\" and number -12345678.9 will be stored as \"", "($12,345,678.90)", "\"."], ["The merchants of Far Far Away visited you again and expressed much hope that you supply them with the program that can convert arbitrary numbers to the financial format. Can you help them?"]], "input_specification": [["The input contains a number that needs to be converted into financial format. The number's notation length does not exceed ", "100", " characters, including (possible) signs \"", "-", "\" (minus) and \"", ".", "\" (decimal point). The number's notation is correct, that is: "]], "output_specification": [["Print the number given in the input in the financial format by the rules described in the problem statement."]], "sample_test_input": ["2012"], "sample_test_output": ["$2,012.00"], "note": [["Pay attention to the second and third sample tests. They show that the sign of a number in the financial format (and consequently, the presence or absence of brackets) is determined solely by the sign of the initial number. It does not depend on the sign of the number you got after translating the number to the financial format."]]}
{"title": ["F. Defender of Childhood Dreams"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You find yourself playing with Teucer again in the city of Liyue. As you take the eccentric little kid around, you notice something interesting about the structure of the city."], ["Liyue can be represented as a directed graph containing $$$n$$$ nodes. Nodes are labeled from $$$1$$$ to $$$n$$$. There is a directed edge from node $$$a$$$ to node $$$b$$$ if and only if $$$a < b$$$."], ["A path between nodes $$$a$$$ and $$$b$$$ is defined as a sequence of edges such that you can start at $$$a$$$, travel along all of these edges in the corresponding direction, and end at $$$b$$$. The length of a path is defined by the number of edges. A rainbow path of length $$$x$$$ is defined as a path in the graph such that there exists at least 2 distinct colors among the set of $$$x$$$ edges."], ["Teucer's favorite number is $$$k$$$. You are curious about the following scenario: If you were to label each edge with a color, what is the minimum number of colors needed to ensure that all paths of length $$$k$$$ or longer are rainbow paths?"], ["Teucer wants to surprise his older brother with a map of Liyue. He also wants to know a valid coloring of edges that uses the minimum number of colors. Please help him with this task!"], []], "input_specification": [["The only line of input contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\leq k < n \\leq 1000$$$). "]], "output_specification": [["On the first line, output $$$c$$$, the minimum colors you need to satisfy the above requirements."], ["On the second line, print a valid edge coloring as an array of $$$\\frac{n(n-1)}{2}$$$ integers ranging from $$$1$$$ to $$$c$$$. Exactly $$$c$$$ distinct colors should exist in the construction. Print the edges in increasing order by the start node first, then by the second node."], ["For example, if $$$n=4$$$, the edge colors will correspond to this order of edges: ($$$1$$$, $$$2$$$), ($$$1$$$, $$$3$$$), ($$$1$$$, $$$4$$$), ($$$2$$$, $$$3$$$), ($$$2$$$, $$$4$$$), ($$$3$$$, $$$4$$$)"]], "sample_test_input": ["5 3\n"], "sample_test_output": ["2\n1 2 2 2 2 2 2 1 1 1\n"], "note": [["The corresponding construction for the first test case looks like this: "], []]}
{"title": ["B. Meeting"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Some points on the plane contain radiators for the generals not to freeze in winter. Each radiator is characterized by the number ", "r", "i", " — the radius of the area this radiator can heat. That is, if the distance between some general and the given radiator is less than or equal to ", "r", "i", ", than the general feels comfortable and warm. Here distance is defined as Euclidean distance, so the distance between points ", "(", "x", "1", ", ", "y", "1", ")", " and ", "(", "x", "2", ", ", "y", "2", ")", " is "], ["Each general who is located outside the radiators' heating area can get sick. Thus, you should bring him a warm blanket. Your task is to count the number of warm blankets you should bring to the Super Duper Secret Place."], ["The generals who are already comfortable do not need a blanket. Also the generals never overheat, ever if they are located in the heating area of several radiators. The radiators can be located at any integer points on the plane, even inside the rectangle (under the table) or on the perimeter (directly under some general). Even in this case their radius does not change."], []], "input_specification": [["The first input line contains coordinates of two opposite table corners ", "x", "a", ", ", "y", "a", ", ", "x", "b", ", ", "y", "b", " (", "x", "a", " ≠ ", "x", "b", ", ", "y", "a", " ≠ ", "y", "b", ")", ". The second line contains integer ", "n", " — the number of radiators (", "1 ≤ ", "n", " ≤ 10", "3", "). Then ", "n", " lines contain the heaters' coordinates as \"", "x", "i", " ", "y", "i", " ", "r", "i", "\", the numbers are separated by spaces. All input data numbers are integers. The absolute value of all coordinates does not exceed ", "1000", ", ", "1 ≤ ", "r", "i", " ≤ 1000", ". Several radiators can be located at the same point."]], "output_specification": [["Print the only number — the number of blankets you should bring."]], "sample_test_input": ["2 5 4 2", "3", "3 1 2", "5 3 1", "1 3 2"], "sample_test_output": ["4"], "note": [["In the first sample the generals are sitting at points: ", "(2, 2)", ", ", "(2, 3)", ", ", "(2, 4)", ", ", "(2, 5)", ", ", "(3, 2)", ", ", "(3, 5)", ", ", "(4, 2)", ", ", "(4, 3)", ", ", "(4, 4)", ", ", "(4, 5)", ". Among them, 4 generals are located outside the heating range. They are the generals at points: ", "(2, 5)", ", ", "(3, 5)", ", ", "(4, 4)", ", ", "(4, 5)", "."], ["In the second sample the generals are sitting at points: ", "(5, 2)", ", ", "(5, 3)", ", ", "(6, 2)", ", ", "(6, 3)", ". All of them are located inside the heating range."]]}
{"title": ["E. Competition"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["The squares of the ", "n", "-degree staircase contain ", "m", " sportsmen. "], ["A sportsman needs one second to move to a side-neighboring square of the staircase. Before the beginning of the competition each sportsman must choose one of the shortest ways to the secondary diagonal. "], ["After the starting whistle the competition begins and all sportsmen start moving along the chosen paths. When a sportsman reaches a cell of the secondary diagonal, he stops and moves no more. The competition ends when all sportsmen reach the secondary diagonal. The competition is considered successful if during it no two sportsmen were present in the same square simultaneously. Any square belonging to the secondary diagonal also cannot contain more than one sportsman. If a sportsman at the given moment of time leaves a square and another sportsman comes to it, then they are not considered to occupy the same square simultaneously. Note that other extreme cases (for example, two sportsmen moving towards each other) are impossible as the chosen ways are the shortest ones."], ["You are given positions of ", "m", " sportsmen on the staircase. Your task is to choose among them the maximum number of sportsmen for who the competition can be successful, that is, so that there existed such choice of shortest ways for the sportsmen at which no two sportsmen find themselves in the same square simultaneously. All other sportsmen that are not chosen will be removed from the staircase before the competition starts. "]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 10", "5", "). Then ", "m", " lines contain coordinates of sportsmen on the staircase as pairs of integers ", "r", "i", ", ", "c", "i", " (", "1 ≤ ", "r", "i", ", ", "c", "i", " ≤ ", "n", ", ", "n", " - ", "c", "i", " < ", "r", "i", "), where ", "r", "i", " is the number of the staircase row, ", "c", "i", " is the number of the staircase column (to understand the principle of numbering rows and columns see the explanatory pictures). No two sportsmen stand on the same square of the staircase."]], "output_specification": [["In the first line print the number of the chosen sportsmen. In the second line print the numbers of chosen sportsmen in any order, separating the numbers with spaces. If there are several answers, you are permitted to print any of them. The sportsmen are numbered starting from one in the order in which they are given in the input data."]], "sample_test_input": ["3 3", "2 3", "3 2", "3 3"], "sample_test_output": ["3", "1 2 3 "], "note": [["A note to the first sample. "]]}
{"title": ["D. Missile Silos"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The documents give the formal definition: the Super Duper Secret Missile Silo is located at some place (which is either city or a point on a road) if and only if the shortest distance from this place to the capital along the roads of the country equals exactly ", "l", "."], ["Bob wants to know how many missile silos are located in Berland to sell the information then to enemy spies. Help Bob."], []], "input_specification": [["The first line contains three integers ", "n", ", ", "m", " and ", "s", " (", "2 ≤ ", "n", " ≤ 10", "5", ", ", ", ", "1 ≤ ", "s", " ≤ ", "n", ") — the number of cities, the number of roads in the country and the number of the capital, correspondingly. Capital is the city no. ", "s", ". "], ["Then ", "m", " lines contain the descriptions of roads. Each of them is described by three integers ", "v", "i", ", ", "u", "i", ", ", "w", "i", " (", "1 ≤ ", "v", "i", ", ", "u", "i", " ≤ ", "n", ", ", "v", "i", " ≠ ", "u", "i", ", ", "1 ≤ ", "w", "i", " ≤ 1000", "), where ", "v", "i", ", ", "u", "i", " are numbers of the cities connected by this road and ", "w", "i", " is its length. The last input line contains integer ", "l", " (", "0 ≤ ", "l", " ≤ 10", "9", ") — the distance from the capital to the missile silos. It is guaranteed that: "]], "output_specification": [["Print the single number — the number of Super Duper Secret Missile Silos that are located in Berland."]], "sample_test_input": ["4 6 1", "1 2 1", "1 3 3", "2 3 1", "2 4 1", "3 4 1", "1 4 2", "2"], "sample_test_output": ["3"], "note": [["In the first sample the silos are located in cities ", "3", " and ", "4", " and on road ", "(1, 3)", " at a distance ", "2", " from city ", "1", " (correspondingly, at a distance ", "1", " from city ", "3", ")."], ["In the second sample one missile silo is located right in the middle of the road ", "(1, 2)", ". Two more silos are on the road ", "(4, 5)", " at a distance ", "3", " from city ", "4", " in the direction to city ", "5", " and at a distance ", "3", " from city ", "5", " to city ", "4", "."]]}
{"title": ["B. Superset"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["You are given a set consisting of ", "n", " points on a plane. Find any good superset of the given set whose size would not exceed ", "2·10", "5", " points."]], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "4", ") — the number of points in the initial set. Next ", "n", " lines describe the set's points. Each line contains two integers ", "x", "i", " and ", "y", "i", " (", " - 10", "9", " ≤ ", "x", "i", ", ", "y", "i", " ≤ 10", "9", ") — a corresponding point's coordinates. It is guaranteed that all the points are different."]], "output_specification": [["Print on the first line the number of points ", "m", " (", "n", " ≤ ", "m", " ≤ 2·10", "5", ") in a good superset, print on next ", "m", " lines the points. The absolute value of the points' coordinates should not exceed ", "10", "9", ". Note that you should not minimize ", "m", ", it is enough to find any good superset of the given set, whose size does not exceed ", "2·10", "5", "."], ["All points in the superset should have integer coordinates."]], "sample_test_input": ["2", "1 1", "2 2"], "sample_test_output": ["3", "1 1", "2 2", "1 2"], "note": []}
{"title": ["C. Winning Strategy"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Having taken part in several ACM ICPC v2.0 finals and having not won any medals, the students and the university governors realized that it's high time they changed something about the preparation process. Specifically, as the first innovation it was decided to change the teams' formation process. Having spent considerable amount of time on studying the statistics of other universities' performance, they managed to receive some interesting information: the dependence between the probability of winning a medal and the number of team members that participated in the finals in the past. More formally, we know ", "n", " + 1", " real numbers ", "p", "0", " ≤ ", "p", "1", " ≤ ... ≤ ", "p", "n", ", where ", "p", "i", " is the probability of getting a medal on the finals if the team has ", "i", " participants of previous finals, and other ", "n", " - ", "i", " participants arrived to the finals for the first time."], ["Despite such useful data, the university governors are unable to determine such team forming tactics that would provide the maximum probability of winning a medal at ACM ICPC v2.0 finals on average (we are supposed to want to provide such result to the far future and we are also supposed to have an endless supply of students). And how about you, can you offer such optimal tactic? At the first stage the university governors want to know the value of maximum average probability."], ["More formally, suppose that the university sends a team to the ", "k", "-th world finals. The team has ", "a", "k", " participants of previous finals (", "0 ≤ ", "a", "k", " ≤ ", "n", "). Since each person can participate in the finals no more than twice, the following condition must be true: ", ". Your task is to choose sequence ", " so that the limit ", "Ψ", " exists and it's value is maximal:"], [], ["As ", " is an infinite sequence, you should only print the maximum value of the ", "Ψ", " limit."]], "input_specification": [["The first line contains an integer ", "n", " (", "3 ≤ ", "n", " ≤ 100", "), ", "n", " is the number of team participants. The second line contains ", "n", " + 1", " real numbers with no more than 6 digits after decimal point ", "p", "i", " (", "0 ≤ ", "i", " ≤ ", "n", ", 0 ≤ ", "p", "i", " ≤ 1", ") — the probability of that the team will win a medal if it contains ", "i", " participants who has already been on the finals. Also the condition ", "p", "i", " ≤ ", "p", "i", " + 1", " should be fulfilled for all ", "0 ≤ ", "i", " ≤ ", "n", " - 1", "."]], "output_specification": [["Print the only real number — the expected average number of medals won per year if the optimal strategy is used. The result may have absolute or relative error ", "10", " - 6", "."]], "sample_test_input": ["3", "0.115590 0.384031 0.443128 0.562356"], "sample_test_output": ["0.4286122500"], "note": [["In the second test, no matter what participants the team contains, it is doomed to be successful."]]}
{"title": ["E. Leaders"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A relationship graph is some undirected graph whose vertices correspond to people. A simple path is a path with no repeated vertices. Long and frighteningly expensive research showed that a pair of people has maximum leadership qualities if a graph of relationships has a simple path between them with an odd number of edges. The scientists decided to call such pairs of different people ", "leader pairs", ". Secret services provided the scientists with the relationship graph so that the task is simple — we have to learn to tell the dictator whether the given pairs are leader pairs or not. Help the scientists cope with the task."], []], "input_specification": [["The first line contains integers ", "n", " and ", "m", " (", "1 ≤ ", "n", " ≤ 10", "5", ", 0 ≤ ", "m", " ≤ 10", "5", ") — the number of vertices and edges in the relationship graph correspondingly. Next ", "m", " lines contain pairs of integers ", "a", " and ", "b", " which mean that there is an edge between the ", "a", "-th and the ", "b", "-th vertices (the vertices are numbered starting from ", "1", ", ", "1 ≤ ", "a", ", ", "b", " ≤ ", "n", "). It is guaranteed that the graph has no loops or multiple edges."], ["Next line contains number ", "q", " (", "1 ≤ ", "q", " ≤ 10", "5", ") — the number of pairs the scientists are interested in. Next ", "q", " lines contain these pairs (in the same format as the edges, the queries can be repeated, a query can contain a pair of the identical vertices)."]], "output_specification": [["For each query print on a single line \"Yes\" if there's a simple odd path between the pair of people; otherwise, print \"No\"."]], "sample_test_input": ["7 7", "1 3", "1 4", "2 3", "2 4", "5 6", "6 7", "7 5", "8", "1 2", "1 3", "1 4", "2 4", "1 5", "5 6", "5 7", "6 7"], "sample_test_output": ["No", "Yes", "Yes", "Yes", "No", "Yes", "Yes", "Yes"], "note": [["Notes to the samples:"], ["1) Between vertices 1 and 2 there are 2 different simple paths in total: 1-3-2 and 1-4-2. Both of them consist of an even number of edges. "], ["2) Vertices 1 and 3 are connected by an edge, that's why a simple odd path for them is 1-3."], ["5) Vertices 1 and 5 are located in different connected components, there's no path between them."]]}
{"title": ["B. Help King"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Once upon a time in a far away kingdom lived the King. The King had a beautiful daughter, Victoria. They lived happily, but not happily ever after: one day a vicious dragon attacked the kingdom and stole Victoria. The King was full of grief, yet he gathered his noble knights and promised half of his kingdom and Victoria's hand in marriage to the one who will save the girl from the infernal beast."], ["Having travelled for some time, the knights found the dragon's lair and all of them rushed there to save Victoria. Each knight spat on the dragon once and, as the dragon had quite a fragile and frail heart, his heart broke and poor beast died. As for the noble knights, they got Victoria right to the King and started brawling as each one wanted the girl's hand in marriage."], ["The problem was that all the noble knights were equally noble and equally handsome, and Victoria didn't want to marry any of them anyway. Then the King (and he was a very wise man and didn't want to hurt anybody's feelings) decided to find out who will get his daughter randomly, i.e. tossing a coin. However, there turned out to be ", "n", " noble knights and the coin only has two sides. The good thing is that when a coin is tossed, the coin falls on each side with equal probability. The King got interested how to pick one noble knight using this coin so that all knights had equal probability of being chosen (the probability in that case should always be equal to ", "1 / ", "n", "). First the King wants to know the expected number of times he will need to toss a coin to determine the winner. Besides, while tossing the coin, the King should follow the optimal tossing strategy (i.e. the strategy that minimizes the expected number of tosses). Help the King in this challenging task."], []], "input_specification": [["The first line contains a single integer ", "n", " from the problem's statement (", "1 ≤ ", "n", " ≤ 10000", ")."]], "output_specification": [["Print the sought expected number of tosses as an irreducible fraction in the following form: \"", "a", "/", "b", "\" (without the quotes) without leading zeroes."]], "sample_test_input": ["2"], "sample_test_output": ["1/1"], "note": []}
{"title": ["E. Ship's Shortest Path"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["And it's well known that the shortest distance between any 2 points is the length of the line segment between these 2 points. But unfortunately there is an island in the sea, so sometimes you won't be able to move your ship in the line segment between the 2 points."], ["You can ", "only", " move to safe points. A point is called safe if it's on the line segment between the start and end points, or if it's on the island's edge."], ["But you are too lucky, you have got some clever and strong workers and they can help you in your trip, they can help you move the ship in the sea and they will take 1 Egyptian pound for each moving unit in the sea, and they can carry the ship (yes, they are very strong) and walk on the island and they will take 2 Egyptian pounds for each moving unit in the island. The money which you will give to them will be divided between all workers, so the number of workers does not matter here."], ["You can move your ship on the island edge, and it will be considered moving in the sea."], ["Now you have a sea map, and you have to decide what is the minimum cost for your trip."], ["Your starting point is (", "xStart", ", ", "yStart", "), and the end point is (", "xEnd", ", ", "yEnd", "), both points will be different."], ["The island will be a convex polygon and there will be no more than 2 polygon points on the same line, also the starting and the end points won't be inside or on the boundary of the island. The points for the polygon will be given in the anti-clockwise order."], []], "input_specification": [["The first line contains 4 integers, ", "xStart", ", ", "yStart", ", ", "xEnd", " and ", "yEnd", " (", " - 100 ≤ ", "xStart", ", ", "yStart", ", ", "xEnd", ", ", "yEnd", " ≤ 100", "). The second line contains an integer ", "n", ", which is the number of points in the polygon (", "3 ≤ ", "n", " ≤ 30", "), followed by a line containing ", "n", " pairs of integers ", "x", " and ", "y", ", which are the coordinates of the points (", " - 100 ≤ ", "x", ", ", "y", " ≤ 100", "), the polygon points will be distinct."]], "output_specification": [["Print one line which contains the minimum possible cost. The absolute or relative error in the answer should not exceed ", "10", " - 6", "."]], "sample_test_input": ["1 7 6 7", "4", "4 2 4 12 3 12 3 2"], "sample_test_output": ["6.000000000"], "note": []}
{"title": ["B. Mice"], "time_limit": ["time limit per test", "0.5 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["If there are several ways to choose closest pieces then mice will choose it in a way that would minimize the number of hungry mice. To check this theory scientists decided to conduct an experiment. They located ", "N", " mice and ", "M", " pieces of cheese on a cartesian plane where all mice are located on the line ", "y", " = ", "Y", "0", " and all pieces of cheese — on another line ", "y", " = ", "Y", "1", ". To check the results of the experiment the scientists need a program which simulates the behavior of a flock of hungry mice."], ["Write a program that computes the minimal number of mice which will remain hungry, i.e. without cheese."], []], "input_specification": [["The first line of the input contains four integer numbers ", "N", " (", "1 ≤ ", "N", " ≤ 10", "5", "), ", "M", " (", "0 ≤ ", "M", " ≤ 10", "5", "), ", "Y", "0", " (", "0 ≤ ", "Y", "0", " ≤ 10", "7", "), ", "Y", "1", " (", "0 ≤ ", "Y", "1", " ≤ 10", "7", ", ", "Y", "0", " ≠ ", "Y", "1", "). The second line contains a strictly increasing sequence of ", "N", " numbers — ", "x", " coordinates of mice. Third line contains a strictly increasing sequence of ", "M", " numbers — ", "x", " coordinates of cheese. All coordinates are integers and do not exceed ", "10", "7", " by absolute value."]], "output_specification": [["The only line of output should contain one number — the minimal number of mice which will remain without cheese."]], "sample_test_input": ["3 2 0 2", "0 1 3", "2 5"], "sample_test_output": ["1"], "note": [["All the three mice will choose the first piece of cheese. Second and third mice will eat this piece. The first one will remain hungry, because it was running towards the same piece, but it was late. The second piece of cheese will remain uneaten."]]}
{"title": ["B. Sale"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains two space-separated integers ", "n", " and ", "m", " (", "1 ≤ ", "m", " ≤ ", "n", " ≤ 100", ") — amount of TV sets at the sale, and amount of TV sets that Bob can carry. The following line contains ", "n", " space-separated integers ", "a", "i", " (", " - 1000 ≤ ", "a", "i", " ≤ 1000", ") — prices of the TV sets. "]], "output_specification": [["Output the only number — the maximum sum of money that Bob can earn, given that he can carry at most ", "m", " TV sets."]], "sample_test_input": ["5 3", "-6 0 35 -2 4"], "sample_test_output": ["8"], "note": []}
{"title": ["E. Collisions"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The balls collide elastically, i.e. if two balls weighing ", "m", "1", " and ", "m", "2", " and with speeds ", "v", "1", " and ", "v", "2", " collide, their new speeds will be: "], [], ["Your task is to find out, where each ball will be ", "t", " seconds after."]], "input_specification": [["The first line contains two integers ", "n", " and ", "t", " (", "1 ≤ ", "n", " ≤ 10, 0 ≤ ", "t", " ≤ 100", ") — amount of balls and duration of the process. Then follow ", "n", " lines, each containing three integers: ", "x", "i", ", ", "v", "i", ", ", "m", "i", " (", "1 ≤ |", "v", "i", "|, ", "m", "i", " ≤ 100, |", "x", "i", "| ≤ 100", ") — coordinate, speed and weight of the ball with index ", "i", " at time moment ", "0", "."], ["It is guaranteed that no two balls have the same coordinate initially. Also each collision will be a collision of not more than two balls (that is, three or more balls never collide at the same point in all times from segment ", "[0;", "t", "]", ")."]], "output_specification": [["Output ", "n", " numbers — coordinates of the balls ", "t", " seconds after. Output the numbers accurate to at least 4 digits after the decimal point."]], "sample_test_input": ["2 9", "3 4 5", "0 7 8"], "sample_test_output": ["68.538461538", "44.538461538"], "note": []}
{"title": ["C. Happy Farm 5"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For that a young player Vasya decided to make the shepherd run round the cows along one and the same closed path. It is very important that the cows stayed strictly inside the area limited by the path, as otherwise some cows will sooner or later be eaten. To be absolutely sure in the cows' safety, Vasya wants the path completion time to be minimum."], ["The new game is launched for different devices, including mobile phones. That's why the developers decided to quit using the arithmetics with the floating decimal point and use only the arithmetics of integers. The cows and the shepherd in the game are represented as points on the plane with integer coordinates. The playing time is modeled by the turns. During every turn the shepherd can either stay where he stands or step in one of eight directions: horizontally, vertically, or diagonally. As the coordinates should always remain integer, then the length of a horizontal and vertical step is equal to ", "1", ", and the length of a diagonal step is equal to ", ". The cows do not move. You have to minimize the number of moves the shepherd needs to run round the whole herd."], []], "input_specification": [["The first line contains an integer ", "N", " which represents the number of cows in the herd (", "1 ≤ ", "N", " ≤ 10", "5", "). Each of the next ", "N", " lines contains two integers ", "X", "i", " and ", "Y", "i", " which represent the coordinates of one cow of (", "|", "X", "i", "|, |", "Y", "i", "| ≤ 10", "6", "). Several cows can stand on one point."]], "output_specification": [["Print the single number — the minimum number of moves in the sought path."]], "sample_test_input": ["4", "1 1", "5 1", "5 3", "1 3"], "sample_test_output": ["16"], "note": [["Picture for the example test: The coordinate grid is painted grey, the coordinates axes are painted black, the cows are painted red and the sought route is painted green."]]}
{"title": ["D. Bombing"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The enemy has ", "N", " strategically important objects. Their positions are known due to the intelligence service. The aim of the strike is to deactivate at least ", "K", " important objects of the enemy. The bombing impact point is already determined and has coordinates of ", "[", "X", "0", "; ", "Y", "0", "]", "."], ["The nuclear warhead is marked by the estimated impact radius ", "R", " ≥ 0", ". All the buildings that are located closer than ", "R", " to the bombing epicentre will be destroyed. All the buildings that are located further than ", "R", " from the epicentre, can also be deactivated with some degree of probability. Let's assume that ", "D", " is the distance between a building and the epicentre. This building's deactivation probability ", "P", "(", "D", ", ", "R", ")", " is calculated according to the following formula: "], [], [], []], "input_specification": [["The first line contains an integer ", "N", " which represents the number of the enemy's objects (", "1 ≤ ", "N", " ≤ 100", "). The second line contains two integers: ", "K", " is the required number of deactivated objects, and ", "ε", " is the maximally permitted probability of not completing the task, given in per mils (", "1 ≤ ", "K", " ≤ ", "N", ", ", "1 ≤ ε ≤ 999", "). The third line contains ", "X", "0", " and ", "Y", "0", " which are the coordinates of the strike impact point. The next ", "N", " lines contain two numbers ", "X", "i", " and ", "Y", "i", " each which are the coordinates of every strategically important object. All the coordinates are integer, their absolute values do not exceed ", "1000", "."], ["Let us remind you that there are a thousand per mils in unity (number one)."], ["There can be several objects in one point."]], "output_specification": [["Print the sought estimated impact radius of the warhead. The absolute or relative measure of the inaccuracy of your answer should not exceed ", "10", " - 6", "."]], "sample_test_input": ["1", "1 500", "5 5", "1 2"], "sample_test_output": ["3.84257761518762740"], "note": []}
{"title": ["D. Triangles"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains two non-negative integer numbers ", "N", " and ", "M", " (", "0 ≤ ", "N", " ≤ 500", ", ", "0 ≤ ", "M", " ≤ 500", ") — the number of red and blue points respectively. The following ", "N", " lines contain two integer numbers each — coordinates of red points. The following ", "M", " lines contain two integer numbers each — coordinates of blue points. All coordinates do not exceed ", "10", "9", " by absolute value."]], "output_specification": [["Output one integer — the number of distinct triangles with vertices in red points which do not contain any blue point inside."]], "sample_test_input": ["4 1", "0 0", "10 0", "10 10", "5 4", "2 1"], "sample_test_output": ["2"], "note": []}
{"title": ["A. Cheaterius's Problem"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["After a hard night Cheaterius made ", "n", " amulets. Everyone of them represents a square ", "2 × 2", ", every quarter contains 1 to 6 dots. Now he wants sort them into piles, every pile must contain similar amulets. Two amulets are called similar if they can be rotated by 90, 180 or 270 degrees so that the following condition is met: the numbers of dots in the corresponding quarters should be the same. It is forbidden to turn over the amulets."], ["Write a program that by the given amulets will find the number of piles on Cheaterius' desk."]], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 1000", "), where ", "n", " is the number of amulets. Then the amulet's descriptions are contained. Every description occupies two lines and contains two numbers (from 1 to 6) in each line. Between every pair of amulets the line \"", "**", "\" is located."]], "output_specification": [["Print the required number of piles."]], "sample_test_input": ["4", "31", "23", "**", "31", "23", "**", "13", "32", "**", "32", "13"], "sample_test_output": ["1"], "note": []}
{"title": ["B. Young Photographer"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["What is the minimum distance that Bob should move to have a chance to take pictures of each sportsman? Bob can take a picture of a sportsman, if he stands within the segment that this sportsman covers on the racetrack."], []], "input_specification": [["The first line of the input file contains integers ", "n", " and ", "x", "0", " (", "1 ≤ ", "n", " ≤ 100", "; ", "0 ≤ ", "x", "0", " ≤ 1000", "). The following ", "n", " lines contain pairs of integers ", "a", "i", ", ", "b", "i", " (", "0 ≤ ", "a", "i", ", ", "b", "i", " ≤ 1000", "; ", "a", "i", " ≠ ", "b", "i", ")."]], "output_specification": [["Output the required minimum distance in the same units as the positions on the racetrack. If there is no such a position, output -1."]], "sample_test_input": ["3 3", "0 7", "14 2", "4 6"], "sample_test_output": ["1"], "note": []}
{"title": ["D. Two Paths"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The «Two Paths» company, where Bob's brother works, has won a tender to repair two paths in Flatland. A path is a sequence of different cities, connected sequentially by roads. The company is allowed to choose by itself the paths to repair. The only condition they have to meet is that the two paths shouldn't cross (i.e. shouldn't have common cities)."], ["It is known that the profit, the «Two Paths» company will get, equals the product of the lengths of the two paths. Let's consider the length of each road equals 1, and the length of a path equals the amount of roads in it. Find the maximum possible profit for the company."], []], "input_specification": [["The first line contains an integer ", "n", " (", "2 ≤ ", "n", " ≤ 200", "), where ", "n", " is the amount of cities in the country. The following ", "n", " - 1", " lines contain the information about the roads. Each line contains a pair of numbers of the cities, connected by the road ", "a", "i", ", ", "b", "i", " (", "1 ≤ ", "a", "i", ", ", "b", "i", " ≤ ", "n", ")."]], "output_specification": [["Output the maximum possible profit."]], "sample_test_input": ["4", "1 2", "2 3", "3 4"], "sample_test_output": ["1"], "note": []}
{"title": ["A. Letter"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of the input data contains numbers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 50", "), ", "n", " — amount of lines, and ", "m", " — amount of columns on Bob's sheet. The following ", "n", " lines contain ", "m", " characters each. Character «", ".", "» stands for a non-shaded square on the sheet, and «", "*", "» — for a shaded square. It is guaranteed that Bob has shaded at least one square."]], "output_specification": [["Output the required rectangle of the minimum cost. Study the output data in the sample tests to understand the output format better."]], "sample_test_input": ["6 7", ".......", "..***..", "..*....", "..***..", "..*....", "..***.."], "sample_test_output": ["***", "*..", "***", "*..", "***"], "note": []}
{"title": ["D. Evolution of Weasels"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["How can you find out whether basilisks evolved from weasels? Certainly, a good first step is to sequence both of their DNAs. Then you can try to check whether there is a sequence of possible mutations from the DNA of the weasel to the DNA of the basilisk. "], ["Your friend Ron is a talented alchemist and has studied DNA sequences in many of his experiments. He has found out that DNA strings consist of the letters ", "A", ", ", "B", " and ", "C", " and that single mutations can only remove or add substrings at any position in the string (a substring is a contiguous sequence of characters). The substrings that can be removed or added by a mutation are ", "AA", ", ", "BB", ", ", "CC", ", ", "ABAB", " or ", "BCBC", ". During a sequence of mutations a DNA string may even become empty."], ["Ron has agreed to sequence the DNA of the weasel and the basilisk for you, but finding out whether there is a sequence of possible mutations that leads from one to the other is too difficult for him, so you have to do it on your own. "], []], "input_specification": [["Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\le t\\le 100$$$) — the number of test cases. The descriptions of the $$$t$$$ test cases follow."], ["The first line of each test case contains a string $$$u$$$ ($$$1\\le |u|\\le 200$$$) — the DNA of the weasel."], ["The second line of each test case contains a string $$$v$$$ ($$$1\\le |v|\\le 200$$$) — the DNA of the basilisk. "], ["The values $$$|u|$$$, $$$|v|$$$ denote the lengths of the strings $$$u$$$ and $$$v$$$. It is guaranteed that both strings $$$u$$$ and $$$v$$$ consist of the letters ", "A", ", ", "B", " and ", "C", "."]], "output_specification": [["For each test case, print ", "YES", " if there is a sequence of mutations to get from $$$u$$$ to $$$v$$$ and ", "NO", " otherwise. "]], "sample_test_input": ["8\nA\nB\nB\nC\nC\nA\nAA\nBB\nBB\nCC\nCC\nAA\nABAB\nBCBC\nABC\nCBA\n"], "sample_test_output": ["NO\nNO\nNO\nYES\nYES\nYES\nYES\nNO\n"], "note": []}
{"title": ["D. Exact Change"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The store may run out of some flavors, so you'll decide which one to buy after arriving there. But there are two major flaws in this plan: "], [], ["Coins are heavy, so you'd like to take the least possible number of coins in total. That's why you are wondering: what is the minimum total number of coins you should take with you, so you can buy a bag of chips of any flavor in exact change?"]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases."], ["The first line of each test case contains the single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — the number of flavors in the store."], ["The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — the cost of one bag of each flavor."]], "output_specification": [["For each test case, print one integer — the minimum number of coins you need to buy one bag of any flavor you'll choose in exact change."]], "sample_test_input": ["4\n1\n1337\n3\n10 8 10\n5\n1 2 3 4 5\n3\n7 77 777\n"], "sample_test_output": ["446\n4\n3\n260\n"], "note": [["In the first test case, you should, for example, take with you $$$445$$$ coins of value $$$3$$$ and $$$1$$$ coin of value $$$2$$$. So, $$$1337 = 445 \\cdot 3 + 1 \\cdot 2$$$."], ["In the second test case, you should, for example, take $$$2$$$ coins of value $$$3$$$ and $$$2$$$ coins of value $$$2$$$. So you can pay either exactly $$$8 = 2 \\cdot 3 + 1 \\cdot 2$$$ or $$$10 = 2 \\cdot 3 + 2 \\cdot 2$$$."], ["In the third test case, it's enough to take $$$1$$$ coin of value $$$3$$$ and $$$2$$$ coins of value $$$1$$$."]]}
{"title": ["E. Replace the Numbers"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You have to perform $$$q$$$ queries. Each query is of one of two types: "], [], ["Find the resulting array after performing all the queries."]], "input_specification": [["The first line contains a single integer $$$q$$$ ($$$1 \\le q \\le 5 \\cdot 10^5$$$) — the number of queries."], ["Next $$$q$$$ lines contain queries (one per line). Each query is of one of two types: "], []], "output_specification": [["In a single line, print $$$k$$$ integers — the resulting array after performing all the queries, where $$$k$$$ is the number of queries of the first type."]], "sample_test_input": ["7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n"], "sample_test_output": ["3 2 2 3 2 "], "note": [["In the first example, the array changes as follows:"], ["$$$[]$$$ $$$\\rightarrow$$$ $$$[3]$$$ $$$\\rightarrow$$$ $$$[3, 1]$$$ $$$\\rightarrow$$$ $$$[3, 2]$$$ $$$\\rightarrow$$$ $$$[3, 2, 2]$$$ $$$\\rightarrow$$$ $$$[3, 2, 2, 1]$$$ $$$\\rightarrow$$$ $$$[3, 2, 2, 1, 2]$$$ $$$\\rightarrow$$$ $$$[3, 2, 2, 3, 2]$$$."], ["In the second example, the array changes as follows:"], ["$$$[]$$$ $$$\\rightarrow$$$ $$$[1]$$$ $$$\\rightarrow$$$ $$$[1, 2]$$$ $$$\\rightarrow$$$ $$$[1, 2, 1]$$$ $$$\\rightarrow$$$ $$$[1, 2, 1]$$$."], ["In the third example, the array changes as follows:"], ["$$$[]$$$ $$$\\rightarrow$$$ $$$[]$$$ $$$\\rightarrow$$$ $$$[1]$$$ $$$\\rightarrow$$$ $$$[1, 4]$$$ $$$\\rightarrow$$$ $$$[1, 4, 2]$$$ $$$\\rightarrow$$$ $$$[1, 4, 4]$$$ $$$\\rightarrow$$$ $$$[1, 3, 3]$$$ $$$\\rightarrow$$$ $$$[1, 3, 3, 2]$$$ $$$\\rightarrow$$$ $$$[1, 3, 3, 7]$$$."]]}
{"title": ["B. Toys"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Vittorio takes several sheets of paper and writes a letter on each side of every sheet so that it is possible to spell any of the three names by arranging some of the sheets in a row (sheets can be reordered and flipped as needed). The three names do not have to be spelled at the same time, it is sufficient that it is possible to spell each of them using all the available sheets (and the same sheet can be used to spell different names)."], ["Find the minimum number of sheets required. In addition, produce a list of sheets with minimum cardinality which can be used to spell the three names (if there are multiple answers, print any)."], []], "input_specification": [["The first line contains a string $$$t$$$ consisting of uppercase letters of the English alphabet ($$$1\\le |t| \\le 1000$$$) — the name of the teddy bear."], ["The second line contains a string $$$o$$$ consisting of uppercase letters of the English alphabet ($$$1\\le |o| \\le 1000$$$) — the name of the owl."], ["The third line contains a string $$$r$$$ consisting of uppercase letters of the English alphabet ($$$1\\le |r| \\le 1000$$$) — the name of the raccoon."], ["The values $$$|t|$$$, $$$|o|$$$, $$$|r|$$$ denote the length of the three names $$$t$$$, $$$o$$$, $$$r$$$."]], "output_specification": [["The first line of the output contains a single integer $$$m$$$ — the minimum number of sheets required."], ["Then $$$m$$$ lines follow: the $$$j$$$-th of these lines contains a string of two uppercase letters of the English alphabet — the letters appearing on the two sides of the $$$j$$$-th sheet."], ["Note that you can print the sheets and the two letters of each sheet in any order."]], "sample_test_input": ["AA\nGA\nMA\n"], "sample_test_output": ["2\nAG\nAM\n"], "note": [["In the ", "first sample", ", the solution uses two sheets: the first sheet has ", "A", " on one side and ", "G", " on the other side; the second sheet has ", "A", " on one side and ", "M", " on the other side."], ["The name ", "AA", " can be spelled using the ", "A", " side of both sheets. The name ", "GA", " can be spelled using the ", "G", " side of the first sheet and the ", "A", " side of the second sheet. Finally, the name ", "MA", " can be spelled using the ", "M", " side of the second sheet and the ", "A", " side of the first sheet."]]}
{"title": ["F. MEX counting"], "time_limit": ["time limit per test", "4 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You are given integers $$$n, k$$$, and an array $$$[b_1, b_2, \\ldots, b_n]$$$."], ["Find the number of arrays $$$[a_1, a_2, \\ldots, a_n]$$$, for which the following conditions hold:"], [], ["As this number can be very big, output it modulo $$$998\\,244\\,353$$$."], [], []], "input_specification": [["The first line of the input contains two integers $$$n, k$$$ ($$$1 \\le n \\le 2000$$$, $$$0 \\le k \\le 50$$$)."], ["The second line of the input contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$-k \\le b_i \\le n+k$$$) — elements of the array $$$b$$$."]], "output_specification": [["Output a single integer — the number of arrays which satisfy the conditions from the statement, modulo $$$998\\,244\\,353$$$."]], "sample_test_input": ["4 0\n0 0 0 0\n"], "sample_test_output": ["256\n"], "note": []}
{"title": ["C. Game Master"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. "], ["You are the game master and want to organize a tournament. There will be a total of $$$n-1$$$ battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. "], ["In the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament."], []], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) — the number of players."], ["The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$, $$$a_i \\neq a_j$$$ for $$$i \\neq j$$$), where $$$a_i$$$ is the strength of the $$$i$$$-th player on the first map. "], ["The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$1 \\leq b_i \\leq 10^9$$$, $$$b_i \\neq b_j$$$ for $$$i \\neq j$$$), where $$$b_i$$$ is the strength of the $$$i$$$-th player on the second map. "], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$."]], "output_specification": [["For each test case print a string of length $$$n$$$. $$$i$$$-th character should be \"", "1", "\" if the $$$i$$$-th player can win the tournament, or \"", "0", "\" otherwise."]], "sample_test_input": ["3\n4\n1 2 3 4\n1 2 3 4\n4\n11 12 20 21\n44 22 11 30\n1\n1000000000\n1000000000\n"], "sample_test_output": ["0001\n1111\n1\n"], "note": [["In the first test case, the $$$4$$$-th player will beat any other player on any game, so he will definitely win the tournament."], ["In the second test case, everyone can be a winner. "], ["In the third test case, there is only one player. Clearly, he will win the tournament."]]}
{"title": ["B. Build the Permutation"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["If such permutations exist, find any such permutation."], [], []], "input_specification": [["The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The description of test cases follows."], ["The only line of each test case contains three integers $$$n$$$, $$$a$$$ and $$$b$$$ ($$$2 \\leq n \\leq 10^5$$$, $$$0 \\leq a,b \\leq n$$$)."], ["The sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$."]], "output_specification": [["For each test case, if there is no permutation with the requested properties, output $$$-1$$$."], ["Otherwise, print the permutation that you are found. If there are several such permutations, you may print any of them."]], "sample_test_input": ["3\n4 1 1\n6 1 2\n6 4 0\n"], "sample_test_output": ["1 3 2 4\n4 2 3 1 5 6\n-1\n"], "note": [["In the first test case, one example of such permutations is $$$[1, 3, 2, 4]$$$. In it $$$p_1 < p_2 > p_3$$$, and $$$2$$$ is the only such index, and $$$p_2> p_3 < p_4$$$, and $$$3$$$ the only such index."], ["One can show that there is no such permutation for the third test case."]]}
{"title": ["A. Beautiful Sequence"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A sequence $$$a$$$ is ", "beautiful", ", if and only if there exists at least one subsequence of $$$a$$$ satisfying that this subsequence is good. For example, $$$[4,3,2]$$$ is a beautiful sequence, since its subsequence $$$[4,2]$$$ is good, while $$$[5,3,4]$$$ is not a beautiful sequence."], ["A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly, zero or all) elements. "], ["Now you are given a sequence, check whether it is beautiful or not."], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$) — the number of test cases. Their description follows."], ["The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — the length of the given sequence."], ["The second line of each test case contains $$$n$$$ integers $$$a_{1}, a_{2}, \\ldots, a_{n}$$$ ($$$1 \\le a_{i} \\le 10^9$$$), representing the sequence."]], "output_specification": [["For each test case, output \"", "YES", "\" or \"", "NO", "\"(without quotes) in one line, representing whether the given sequence is beautiful."], ["You can output the answer in any case (upper or lower). For example, the strings \"", "yEs", "\", \"", "yes", "\", \"", "Yes", "\", and \"", "YES", "\" will be recognized as positive responses."]], "sample_test_input": ["7", "3", "3 2 1", "4", "2 4 3 5", "5", "2 3 5 5 6", "2", "3 1", "5", "2 4 5 2 3", "4", "5 6 7 8", "6", "6 5 4 3 2 1"], "sample_test_output": ["YES\nYES\nNO\nYES\nYES\nNO\nYES\n"], "note": [["In the first test case, the good subsequence is $$$b=[3,2]$$$, where $$$b_{2} = 2$$$."], ["In the second test case, the good subsequence is $$$b=[2,4,3]$$$, where $$$b_{3} = 3$$$."], ["In the fourth test case, the good subsequence is $$$b=[1]$$$, where $$$b_{1} = 1$$$."], ["In the fifth test case, the good subsequence is $$$b=[2,2]$$$, where $$$b_{2} = 2$$$."]]}
{"title": ["C. Make It Permutation"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["You want to make the final array a permutation of ", "any", " positive length. Please output the minimum cost of doing that. Note that you can make the array empty during the operations, but the final array must contain at least one integer."], ["A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array)."]], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Their description follows."], ["The first line of each test case contains three integers $$$n$$$, $$$c$$$, $$$d$$$ ($$$1 \\le n \\le 10^5$$$, $$$1 \\le c,d \\le 10^9$$$)."], ["The second line of each test case contains $$$n$$$ integers $$$a_{1}, a_{2}, \\ldots, a_{n}$$$ ($$$1 \\le a_{i} \\le 10^9$$$)."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case, output in one line the minimum cost to make the final array a permutation."]], "sample_test_input": ["8", "3 3 3", "1 2 3", "5 1 5", "1 2 3 5 6", "5 2 3", "1 1 1 3 3", "5 1 10", "2 4 6 8 10", "6 2 8", "7 3 5 4 4 8", "4 10 1", "1 2 6 7", "4 3 3", "2 5 8 7", "2 1000000000 1", "1000000000 1"], "sample_test_output": ["0\n2\n8\n14\n20\n3\n12\n999999998\n"], "note": [["In the first test case, the array is already a permutation, so there's no need for operations."], ["In the second test case, we can remove numbers $$$5$$$, $$$6$$$ to get the permutation $$$[1,2,3]$$$ in cost $$$2$$$. Note that we can also get a permutation by inserting a number $$$4$$$, but it costs $$$5$$$."], ["In the third test case, we can just remove all the numbers except for the first number $$$1$$$. It costs $$$8$$$, and the final array is $$$[1]$$$, which is a permutation of length $$$1$$$."], ["In the fourth test case, we can remove all the numbers except for $$$2$$$, and insert a number $$$1$$$ to the first position. It costs $$$4+10=14$$$, and the final array is $$$[1,2]$$$, which is a permutation of length $$$2$$$."]]}
{"title": ["B. Candies"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You can use the two following spells in any order at most $$$40$$$ times in total."], [], ["Construct a sequence of spells, such that after using them in order, you will have ", "exactly", " $$$n$$$ candies, or determine it's impossible."]], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Their description follows."], ["Each test case contains one line with a single integer $$$n$$$ ($$$2 \\le n \\le 10^9$$$) — the required final number of candies."]], "output_specification": [["For each test case, output the following."], ["If it's possible to eventually have $$$n$$$ candies within $$$40$$$ spells, in the first line print an integer $$$m$$$ ($$$1 \\le m \\le 40$$$), representing the total number of spells you use."], ["In the second print $$$m$$$ integers $$$a_{1}, a_{2}, \\ldots, a_{m}$$$ ($$$a_{i}$$$ is $$$1$$$ or $$$2$$$) separated by spaces, where $$$a_{i} = 1$$$ means that you use the first spell in the $$$i$$$-th step, while $$$a_{i} = 2$$$ means that you use the second spell in the $$$i$$$-th step."], ["Note that you ", "do not", " have to minimize $$$m$$$, and if there are multiple solutions, you may output any one of them."], ["If it's impossible, output $$$-1$$$ in one line."]], "sample_test_input": ["4", "2", "3", "7", "17"], "sample_test_output": ["-1\n1\n2 \n2\n2 2 \n4\n2 1 1 1 \n"], "note": [["For $$$n=3$$$, you can just use the second spell once, and then have $$$2 \\cdot 1 + 1 = 3$$$ candies."], ["For $$$n=7$$$, you can use the second spell twice. After the first step, you will have $$$3$$$ candies. And after the second step, you will have $$$2 \\cdot 3 + 1 = 7$$$ candies."]]}
{"title": ["G. Treasure Hunt"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["This is an interactive problem."], ["Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don't know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements."], ["The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you'll find a treasure chest immediately and, consequently, you'll put a flag there immediately as well."], ["When you are standing at the junction you can see for each of the ", "adjacent", " vertices its ", "degree", " and if there is a ", "flag", " there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction $$$v$$$ might be different each time you come in the junction $$$v$$$. However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to $$$v$$$ vertex."], ["Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting!"], []], "input_specification": [], "output_specification": [], "sample_test_input": [], "sample_test_output": [], "note": []}
{"title": ["K. Treasure Hunt"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["This is an interactive problem."], ["Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don't know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements."], ["The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you'll find a treasure chest immediately and, consequently, you'll put a flag there immediately as well."], ["When you are standing at the junction you can see for each of the ", "adjacent", " vertices its ", "degree", " and if there is a ", "flag", " there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction $$$v$$$ might be different each time you come in the junction $$$v$$$. However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to $$$v$$$ vertex."], ["Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting!"], []], "input_specification": [], "output_specification": [], "sample_test_input": [], "sample_test_output": [], "note": []}
{"title": ["C. Infinite Replacement"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["In one move, you can replace any letter 'a' in the string $$$s$$$ with a string $$$t$$$. Note that after the replacement string $$$s$$$ might contain letters other than 'a'."], ["You can perform an arbitrary number of moves (including zero). How many different strings can you obtain? Print the number, or report that it is infinitely large."], ["Two strings are considered different if they have different length, or they differ at some index."], []], "input_specification": [["The first line contains a single integer $$$q$$$ ($$$1 \\le q \\le 10^4$$$) — the number of testcases."], ["The first line of each testcase contains a non-empty string $$$s$$$, consisting only of Latin letters 'a'. The length of $$$s$$$ doesn't exceed $$$50$$$."], ["The second line contains a non-empty string $$$t$$$, consisting of lowercase Latin letters. The length of $$$t$$$ doesn't exceed $$$50$$$."]], "output_specification": [["For each testcase, print the number of different strings $$$s$$$ that can be obtained after an arbitrary amount of moves (including zero). If the number is infinitely large, print ", "-1", ". Otherwise, print the number."]], "sample_test_input": ["3", "aaaa", "a", "aa", "abc", "a", "b"], "sample_test_output": ["1\n-1\n2\n"], "note": [["In the first example, you can replace any letter 'a' with the string \"a\", but that won't change the string. So no matter how many moves you make, you can't obtain a string other than the initial one."], ["In the second example, you can replace the second letter 'a' with \"abc\". String $$$s$$$ becomes equal to \"aabc\". Then the second letter 'a' again. String $$$s$$$ becomes equal to \"aabcbc\". And so on, generating infinitely many different strings."], ["In the third example, you can either leave string $$$s$$$ as is, performing zero moves, or replace the only 'a' with \"b\". String $$$s$$$ becomes equal to \"b\", so you can't perform more moves on it."]]}
{"title": ["H. Omkar and Tours"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "512 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Every city has an enjoyment value $$$e$$$. Each road has a capacity $$$c$$$, denoting the maximum number of vehicles that can be on it, and an associated toll $$$t$$$. However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. (In other words, they pay $$$\\max t$$$ over all the roads on which they traveled.) If a vehicle traverses no roads, they pay $$$0$$$ toll."], ["Omkar has decided to host $$$q$$$ tour groups. Each tour group consists of $$$v$$$ vehicles starting at city $$$x$$$. (Keep in mind that a tour group with $$$v$$$ vehicles can travel only on roads with capacity $$$\\geq v$$$.) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city $$$y$$$ with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from $$$x$$$ to $$$y$$$? (This trip from $$$x$$$ to $$$y$$$ will always be on the shortest path from $$$x$$$ to $$$y$$$.)"], ["In the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee that he can reimburse the group regardless of which city they choose."], []], "input_specification": [["The first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq q \\leq 2 \\cdot 10^5$$$), representing the number of cities and the number of groups, respectively."], ["The next line contains $$$n$$$ integers $$$e_1, e_2, \\ldots, e_n$$$ ($$$1 \\leq e_i \\leq 10^9$$$), where $$$e_i$$$ represents the enjoyment value for city $$$i$$$."], ["The next $$$n-1$$$ lines each contain four integers $$$a$$$, $$$b$$$, $$$c$$$, and $$$t$$$ ($$$1 \\leq a,b \\leq n$$$, $$$1 \\leq c \\leq 10^9$$$, $$$1 \\leq t \\leq 10^9$$$), representing an road between city $$$a$$$ and city $$$b$$$ with capacity $$$c$$$ and toll $$$t$$$."], ["The next $$$q$$$ lines each contain two integers $$$v$$$ and $$$x$$$ ($$$1 \\leq v \\leq 10^9$$$, $$$1 \\leq x \\leq n$$$), representing the number of vehicles in the tour group and the starting city, respectively."]], "output_specification": [["Output $$$q$$$ lines. The $$$i$$$-th line should contain two integers: the highest possible enjoyment value of a city reachable by the $$$i$$$-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the $$$i$$$-th tour group."]], "sample_test_input": ["5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n"], "sample_test_output": ["3 8\n3 0\n3 2\n"], "note": [["A map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls."], [], ["For the first query, a tour group of size $$$1$$$ starting at city $$$3$$$ can reach cities $$$1$$$, $$$2$$$, $$$3$$$, $$$4$$$, and $$$5$$$. Thus, the largest enjoyment value that they can reach is $$$3$$$. If the tour group chooses to go to city $$$4$$$, Omkar will have to pay $$$8$$$ per vehicle, which is the maximum."], ["For the second query, a tour group of size $$$9$$$ starting at city $$$5$$$ can reach only city $$$5$$$. Thus, the largest reachable enjoyment value is still $$$3$$$, and Omkar will pay $$$0$$$ per vehicle."], ["For the third query, a tour group of size $$$6$$$ starting at city $$$2$$$ can reach cities $$$2$$$ and $$$4$$$. The largest reachable enjoyment value is again $$$3$$$. If the tour group chooses to go to city $$$4$$$, Omkar will have to pay $$$2$$$ per vehicle, which is the maximum."], ["A map of the second sample is shown below:"], [], ["For the first query, a tour group of size $$$5$$$ starting at city $$$1$$$ can only reach city $$$1$$$. Thus, their maximum enjoyment value is $$$1$$$ and the cost Omkar will have to pay is $$$0$$$ per vehicle."], ["For the second query, a tour group of size $$$4$$$ starting at city $$$1$$$ can reach cities $$$1$$$ and $$$2$$$. Thus, their maximum enjoyment value is $$$2$$$ and Omkar will pay $$$1$$$ per vehicle."], ["For the third query, a tour group of size $$$3$$$ starting at city $$$1$$$ can reach cities $$$1$$$, $$$2$$$, and $$$3$$$. Thus, their maximum enjoyment value is $$$3$$$ and Omkar will pay $$$1$$$ per vehicle."]]}
{"title": ["C. Two Arrays"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Let's define a transformation of the array $$$a$$$:"], [], ["Is it possible to perform some transformation of the array $$$a$$$ ", "exactly once", ", so that the resulting array is equal to $$$b$$$?"]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Descriptions of test cases follow."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — the size of arrays $$$a$$$ and $$$b$$$."], ["The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-100 \\le a_i \\le 100$$$)."], ["The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$-100 \\le b_i \\le 100$$$)."]], "output_specification": [["For each test case, print \"", "YES", "\" (without quotes) if it is possible to perform a transformation of the array $$$a$$$, so that the resulting array is equal to $$$b$$$. Print \"", "NO", "\" (without quotes) otherwise."], ["You can print each letter in any case (upper or lower)."]], "sample_test_input": ["3\n3\n-1 1 0\n0 0 2\n1\n0\n2\n5\n1 2 3 4 5\n1 2 3 4 5\n"], "sample_test_output": ["YES\nNO\nYES\n"], "note": [["In the first test case, we can make the following transformation:"], [], ["In the second test case there is no suitable transformation."]]}
{"title": ["B. Squares"], "time_limit": ["time limit per test", "0.5 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A square (", "x", "; ", "y", ") is considered bad, if at least one of the two conditions is fulfilled:"], [], ["Your task is to find the minimum number of bad cells one will have to visit on the way from (", "x", "1", "; ", "y", "1", ") to (", "x", "2", "; ", "y", "2", ")."]], "input_specification": [["The only line contains integers ", "a", ", ", "b", ", ", "x", "1", ", ", "y", "1", ", ", "x", "2", " and ", "y", "2", " — the parameters of the bad squares, the coordinates of the initial and the final squares correspondingly (", "2 ≤ ", "a", ", ", "b", " ≤ 10", "9", " and ", "|", "x", "1", "|", ",", "|", "y", "1", "|", ",", "|", "x", "2", "|", ",", "|", "y", "2", "| ≤ 10", "9", "). It is guaranteed that the initial and the final square aren't bad."]], "output_specification": [["Print a single number — the minimum number of bad cells that one will have to visit in order to travel from square (", "x", "1", "; ", "y", "1", ") to square (", "x", "2", "; ", "y", "2", ")."]], "sample_test_input": ["2 2 1 0 0 1"], "sample_test_output": ["1"], "note": [["In the third sample one of the possible paths in (3;-1)->(3;0)->(3;1)->(3;2)->(4;2)->(4;3)->(4;4)->(4;5)->(4;6)->(4;7)->(3;7). Squares (3;1) and (4;4) are bad."]]}
{"title": ["A. Punctuation"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Your task is to add spaces to the text by the following rules:"], [], ["It is guaranteed that there is at least one word between any two punctuation marks. The text begins and ends with a Latin letter."]], "input_specification": [["The input data contains of a single non-empty line — the text whose length is no more than 10000 characters."]], "output_specification": [["Print the text, edited according to the rules. In this problem you should follow the output format very strictly. For example, extra space at the end of the output line is considered as wrong answer. Note that a newline character at the end of the line doesn't matter."]], "sample_test_input": ["galileo galilei was an   italian physicist  ,mathematician,astronomer"], "sample_test_output": ["galileo galilei was an italian physicist, mathematician, astronomer"], "note": []}
{"title": ["A. Prime Permutation"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Your task is to find out if it is possible to rearrange characters in string ", "s", " so that for any prime number ", "p", " ≤ |", "s", "|", " and for any integer ", "i", " ranging from ", "1", " to ", "|", "s", "| / ", "p", " (inclusive) the following condition was fulfilled ", "s", "p", " = ", "s", "p", " × ", "i", ". If the answer is positive, find one way to rearrange the characters."], []], "input_specification": [["The only line contains the initial string ", "s", ", consisting of small Latin letters (", "1 ≤ |", "s", "| ≤ 1000", ")."]], "output_specification": [["If it is possible to rearrange the characters in the string so that the above-mentioned conditions were fulfilled, then print in the first line \"", "YES", "\" (without the quotes) and print on the second line one of the possible resulting strings. If such permutation is impossible to perform, then print the single string \"", "NO", "\"."]], "sample_test_input": ["abc"], "sample_test_output": ["YES", "abc"], "note": [["In the first sample any of the six possible strings will do: \"abc\", \"acb\", \"bac\", \"bca\", \"cab\" or \"cba\"."], ["In the second sample no letter permutation will satisfy the condition at ", "p", " = 2", " (", "s", "2", " = ", "s", "4", ")."], ["In the third test any string where character \"y\" doesn't occupy positions 2, 3, 4, 6 will be valid."]]}
{"title": ["B. Smile House"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petya wondered whether he can raise his mood infinitely, moving along some cycle? And if he can, then what minimum number of rooms he will need to visit during one period of a cycle?"], []], "input_specification": [["The first line contains two positive integers ", "n", " and ", "m", " (", "), where ", "n", " is the number of rooms, and ", "m", " is the number of doors in the Smile House. Then follows the description of the doors: ", "m", " lines each containing four integers ", "i", ", ", "j", ", ", "c", "ij", " и ", "c", "ji", " (", "1 ≤ ", "i", ", ", "j", " ≤ ", "n", ", ", "i", " ≠ ", "j", ",  - 10", "4", " ≤ ", "c", "ij", ", ", "c", "ji", " ≤ 10", "4", "). It is guaranteed that no more than one door connects any two rooms. No door connects the room with itself."]], "output_specification": [["Print the minimum number of rooms that one needs to visit during one traverse of the cycle that can raise mood infinitely. If such cycle does not exist, print number ", "0", "."]], "sample_test_input": ["4 4", "1 2 -10 3", "1 3 1 -10", "2 4 -10 -1", "3 4 0 -3"], "sample_test_output": ["4"], "note": [["Cycle is such a sequence of rooms ", "a", "1", ", ", "a", "2", ", ..., ", "a", "k", ", that ", "a", "1", " is connected with ", "a", "2", ", ", "a", "2", " is connected with ", "a", "3", ", ..., ", "a", "k", " - 1", " is connected with ", "a", "k", ", ", "a", "k", " is connected with ", "a", "1", ". Some elements of the sequence can coincide, that is, the cycle should not necessarily be simple. The number of rooms in the cycle is considered as ", "k", ", the sequence's length. Note that the minimum possible length equals two."]]}
{"title": ["E. Lucky Queries"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Petya brought home string ", "s", " with the length of ", "n", ". The string only consists of lucky digits. The digits are numbered from the left to the right starting with ", "1", ". Now Petya should execute ", "m", " queries of the following form:"], [], ["Subsequence of a string ", "s", " is a string that can be obtained from ", "s", " by removing zero or more of its elements. A string is called non-decreasing if each successive digit is not less than the previous one."], ["Help Petya process the requests."]], "input_specification": [["The first line contains two integers ", "n", " and ", "m", " (", "1 ≤ ", "n", " ≤ 10", "6", ", 1 ≤ ", "m", " ≤ 3·10", "5", ") — the length of the string ", "s", " and the number of queries correspondingly. The second line contains ", "n", " lucky digits without spaces — Petya's initial string. Next ", "m", " lines contain queries in the form described in the statement."]], "output_specification": [["For each query ", "count", " print an answer on a single line."]], "sample_test_input": ["2 3", "47", "count", "switch 1 2", "count"], "sample_test_output": ["2", "1"], "note": [["In the first sample the chronology of string ", "s", " after some operations are fulfilled is as follows (the sought maximum subsequence is marked with ", "bold", "): "]]}
{"title": ["C. Help Greg the Dwarf"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The worst part is that merely several minutes ago Dwarf Greg in some unintelligible way got inside your house and asked you to help him solve a problem. The point is that a short time ago Greg decided to order a new coffin (knowing his peculiar character, you are not surprised at all). But the problem is: a very long in both directions L-shaped corridor leads to Greg's crypt, and you can't drag just any coffin through that corridor. That's why he asked you to help."], [], ["You've formalized the task on a plane like this: let the corridor's width before and after the turn be equal to ", "a", " and ", "b", " correspondingly (see the picture). The corridor turns directly at a right angle, the coffin is a rectangle whose length and width are equal to ", "l", " and ", "w", " (", "l", " ≥ ", "w", ") correspondingly. Dwarf Greg has already determined the coffin's length (", "l", "), which is based on his height; your task is to determine the coffin's maximally possible width (", "w", "), at which it can be brought to the crypt. Besides, due to its large mass (pure marble!) the coffin is equipped with rotating wheels; therefore it is impossible to lift it off the ground, however, arbitrary moves and rotations of the coffin in the plane become possible. The coffin may be rotated arbitrarily just before you drag it into crypt and move through the corridor."], ["Greg promised that if you help him, he will grant you immortality (I wonder how?). And if you don't, well... trust me, you don't want to know what happens if you don't help him..."]], "input_specification": [["The first line contains three space-separated integers ", "a", ", ", "b", " and ", "l", " from the problem's statement (", "1 ≤ ", "a", ", ", "b", ", ", "l", " ≤ 10", "4", ")."]], "output_specification": [["Print the maximally possible width of a coffin with absolute or relative error no more than ", "10", " - 7", ". If a coffin with the given length and positive width (the coffin that would meet the conditions from the problem's statement) does not exist, print \"", "My poor head =(", "\" (without quotes)."], ["It is guaranteed that if the answer is positive, it will be not less than ", "10", " - 7", ". All the hacks will also be checked to meet that condition."]], "sample_test_input": ["2 2 1"], "sample_test_output": ["1.0000000"], "note": [["In the first example the answer is restricted by the coffin's length (remember — coffin's widths should not be larger than it's length)."], ["In the second example it is possible to drag the coffin through the corridor thanks to rotating wheels: firstly, drag it forward by one side while it will not be hampered by the wall, then move it forward by adjacent side perpendicularly to the initial movement direction (remember — arbitrary moves and rotations of the coffin are possible)."]]}
{"title": ["D. Help Monks"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], [], ["However, the monastery wasn't doing so well lately and the wise prior Ku Sean Sun had to cut some disks at the edges and use the gold for the greater good. Wouldn't you think that the prior is entitled to have an air conditioning system? Besides, staying in the monastery all year is sooo dull… One has to have a go at something new now and then, go skiing, for example… Ku Sean Sun realize how big a mistake he had made only after a while: after he cut the edges, the diameters of some disks got the same; that means that some moves that used to be impossible to make, were at last possible (why, gods never prohibited to put a disk on a disk of the same diameter). Thus, the possible Armageddon can come earlier than was initially planned by gods. Much earlier. So much earlier, in fact, that Ku Sean Sun won't even have time to ski all he wants or relax under the air conditioner."], ["The wise prior could never let that last thing happen and he asked one very old and very wise witch PikiWedia to help him. May be she can determine the least number of moves needed to solve the gods' problem. However, the witch laid out her cards and found no answer for the prior. Then he asked you to help him."]], "input_specification": [["The first line contains an integer ", "n", " — the number of disks (", "1 ≤ ", "n", " ≤ 20", "). The second line contains ", "n", " integers ", "d", "i", " — the disks' diameters after Ku Sean Sun cut their edges. The diameters are given from the bottom to the top (", "1 ≤ ", "d", "i", " ≤ 20", ", besides, ", "d", "i", " ≥ ", "d", "i", " + 1", " for any ", "1 ≤ ", "i", " < ", "n", ")."]], "output_specification": [["Print on the first line number ", "m", " — the smallest number of moves to solve the gods' problem. Print on the next ", "m", " lines the description of moves: two space-separated positive integers ", "s", "i", " and ", "t", "i", " that determine the number of the pillar from which the disk is moved and the number of pillar where the disk is moved, correspondingly (", "1 ≤ ", "s", "i", ", ", "t", "i", " ≤ 3", ", ", "s", "i", " ≠ ", "t", "i", "). "]], "sample_test_input": ["3", "3 2 1"], "sample_test_output": ["7", "1 3", "1 2", "3 2", "1 3", "2 1", "2 3", "1 3"], "note": [["Pay attention to the third test demonstrating that the order of disks should remain the same in the end, even despite the disks' same radius. If this condition was not necessary to fulfill, the gods' task could have been solved within a smaller number of moves (three — simply moving the three disks from the first pillar on the third one)."]]}
{"title": ["D. Plus and xor"], "time_limit": ["time limit per test", "0.5 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For example, if ", "X", " = 109", "10", " = 1101101", "2", ", ", "Y", " = 41", "10", " = 101001", "2", ", then: "], [], ["Write a program, which takes two non-negative integers ", "A", " and ", "B", " as an input and finds two non-negative integers ", "X", " and ", "Y", ", which satisfy the following conditions: "]], "input_specification": [["The first line contains integer number ", "A", " and the second line contains integer number ", "B", " (", "0 ≤ ", "A", ", ", "B", " ≤ 2", "64", " - 1", ")."]], "output_specification": [["The only output line should contain two integer non-negative numbers ", "X", " and ", "Y", ". Print the only number ", "-1", " if there is no answer."]], "sample_test_input": ["142", "76"], "sample_test_output": ["33 109"], "note": []}
{"title": ["E. Points"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of input contains one integer number ", "N", " (", "1 ≤ ", "N", " ≤ 100 000", ") — the number of points. Each of the following ", "N", " lines contain two integer numbers ", "X", " and ", "Y", " (", " - 10 000 ≤ ", "X", ", ", "Y", " ≤ 10 000", ") — the coordinates of points. Two or more points may coincide."]], "output_specification": [["The only line of output should contain the required sum of squares of distances between all pairs of points."]], "sample_test_input": ["4", "1 1", "-1 -1", "1 -1", "-1 1"], "sample_test_output": ["32"], "note": []}
{"title": ["A. Help Far Away Kingdom"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Most damage those strange creatures inflicted upon the kingdom was that they loved high precision numbers. As a result, the Kingdom healers had already had three appointments with the merchants who were asked to sell, say, exactly ", "0.273549107", " beer barrels. To deal with the problem somehow, the King issued an order obliging rounding up all numbers to the closest integer to simplify calculations. Specifically, the order went like this:"], [], ["Merchants found the algorithm very sophisticated and they asked you (the ACMers) to help them. Can you write a program that would perform the rounding according to the King’s order?"]], "input_specification": [["The first line contains a single number to round up — the integer part (a non-empty set of decimal digits that do not start with ", "0", " — with the exception of a case when the set consists of a single digit — in this case 0 can go first), then follows character «", ".", "» (a dot), and then follows the fractional part (any non-empty set of decimal digits). The number's length does not exceed ", "1000", " characters, including the dot. There are no other characters in the input data."]], "output_specification": [["If the last number of the integer part is not equal to ", "9", ", print the rounded-up number without leading zeroes. Otherwise, print the message \"", "GOTO Vasilisa.", "\" (without the quotes)."]], "sample_test_input": ["0.0"], "sample_test_output": ["0"], "note": []}
{"title": ["C. Beavermuncher-0xFF"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["And the whole point is that the population of beavers on the Earth has reached incredible sizes! Each day their number increases in several times and they don't even realize how much their unhealthy obsession with trees harms the nature and the humankind. The amount of oxygen in the atmosphere has dropped to 17 per cent and, as the best minds of the world think, that is not the end."], ["In the middle of the 50-s of the previous century a group of soviet scientists succeed in foreseeing the situation with beavers and worked out a secret technology to clean territory. The technology bears a mysterious title \"Beavermuncher-0xFF\". Now the fate of the planet lies on the fragile shoulders of a small group of people who has dedicated their lives to science."], ["The prototype is ready, you now need to urgently carry out its experiments in practice.", " "], ["You are given a tree, completely occupied by beavers. A tree is a connected undirected graph without cycles. The tree consists of ", "n", " vertices, the ", "i", "-th vertex contains ", "k", "i", " beavers. "], ["\"Beavermuncher-0xFF\" works by the following principle: being at some vertex ", "u", ", it can go to the vertex ", "v", ", if they are connected by an edge, and eat ", "exactly one", " beaver located at the vertex ", "v", ". It is impossible to move to the vertex ", "v", " if there are no beavers left in ", "v", ". \"Beavermuncher-0xFF\" ", "cannot", " just stand at some vertex and eat beavers in it. \"Beavermuncher-0xFF\" must move without stops."], ["Why does the \"Beavermuncher-0xFF\" works like this? Because the developers have not provided place for the battery in it and eating beavers is necessary for converting their mass into pure energy."], ["It is guaranteed that the beavers will be shocked by what is happening, which is why they will not be able to move from a vertex of the tree to another one. As for the \"Beavermuncher-0xFF\", it can move along each edge in both directions while conditions described above are fulfilled."], ["The root of the tree is located at the vertex ", "s", ". This means that the \"Beavermuncher-0xFF\" begins its mission at the vertex ", "s", " and it must return there at the end of experiment, because no one is going to take it down from a high place. "], ["Determine the maximum number of beavers \"Beavermuncher-0xFF\" can eat and return to the starting vertex."], []], "input_specification": [["The first line contains integer ", "n", " — the number of vertices in the tree (", "1 ≤ ", "n", " ≤ 10", "5", "). The second line contains ", "n", " integers ", "k", "i", " (", "1 ≤ ", "k", "i", " ≤ 10", "5", ") — amounts of beavers on corresponding vertices. Following ", "n", " - 1", " lines describe the tree. Each line contains two integers separated by space. These integers represent two vertices connected by an edge. Vertices are numbered from ", "1", " to ", "n", ". The last line contains integer ", "s", " — the number of the starting vertex (", "1 ≤ ", "s", " ≤ ", "n", ")."]], "output_specification": [["Print the maximum number of beavers munched by the \"Beavermuncher-0xFF\"."], ["Please, do not use ", "%lld", " specificator to write 64-bit integers in C++. It is preferred to use ", "cout", " (also you may use ", "%I64d", ")."]], "sample_test_input": ["5", "1 3 1 3 2", "2 5", "3 4", "4 5", "1 5", "4"], "sample_test_output": ["6"], "note": []}
{"title": ["E. Martian Food"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Their signature dish is served on a completely black plate with the radius of ", "R", ", flat as a pancake."], ["First, they put a perfectly circular portion of the Golden Honduras on the plate. It has the radius of ", "r", " and is located as close to the edge of the plate as possible staying entirely within the plate. I. e. Golden Honduras touches the edge of the plate from the inside. It is believed that the proximity of the portion of the Golden Honduras to the edge of a plate demonstrates the neatness and exactness of the Martians."], ["Then a perfectly round portion of Pink Guadeloupe is put on the plate. The Guadeloupe should not overlap with Honduras, should not go beyond the border of the plate, but should have the maximum radius. I. e. Pink Guadeloupe should touch the edge of the plate from the inside, and touch Golden Honduras from the outside. For it is the size of the Rose Guadeloupe that shows the generosity and the hospitality of the Martians."], ["Further, the first portion (of the same perfectly round shape) of Green Bull Terrier is put on the plate. It should come in contact with Honduras and Guadeloupe, should not go beyond the border of the plate and should have maximum radius."], ["Each of the following portions of the Green Bull Terrier must necessarily touch the Golden Honduras, the previous portion of the Green Bull Terrier and touch the edge of a plate, but should not go beyond the border."], ["To determine whether a stranger is worthy to touch the food, the Martians ask him to find the radius of the ", "k", "-th portion of the Green Bull Terrier knowing the radii of a plate and a portion of the Golden Honduras. And are you worthy?"], []], "input_specification": [["The first line contains integer ", "t", " (", "1 ≤ ", "t", " ≤ 10", "4", ") — amount of testcases."], ["Each of the following ", "t", " lines contain three positive integers: the radii of the plate and a portion of the Golden Honduras ", "R", " and ", "r", " (", "1 ≤ ", "r", " < ", "R", " ≤ 10", "4", ") and the number ", "k", " (", "1 ≤ ", "k", " ≤ 10", "4", ")."], ["In the pretests ", "1 ≤ ", "k", " ≤ 2", "."]], "output_specification": [["Print ", "t", " lines — the radius of the ", "k", "-th portion of the Green Bull Terrier for each test. The absolute or relative error of the answer should not exceed ", "10", " - 6", "."]], "sample_test_input": ["2", "4 3 1", "4 2 2"], "sample_test_output": ["0.9230769231", "0.6666666667"], "note": [["Dish from the first sample looks like this:"], [], ["Dish from the second sample looks like this:"], []]}
{"title": ["E. Parade"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [[]], "input_specification": [["The first input line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 100000", "). Then follow ", "n", " lines, each containing three integers ", "h", "i", ", ", "l", "i", ", ", "r", "i", " (", "1 ≤ ", "h", "i", " ≤ 10", "9", ",  - 10", "9", " ≤ ", "l", "i", " < ", "r", "i", " ≤ 10", "9", ")."]], "output_specification": [["In the first line output integer ", "m", " — amount of vertices of the enveloping polyline. The next ", "m", " lines should contain 2 integers each — the position and the height of the polyline’s vertex. Output the coordinates of each vertex in the order of traversing the polyline from west to east. Remember that the first and the last vertices of the polyline should have the height of 0."]], "sample_test_input": ["2", "3 0 2", "4 1 3"], "sample_test_output": ["6", "0 0", "0 3", "1 3", "1 4", "3 4", "3 0"], "note": []}
{"title": ["C. Three Base Stations"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["TELE3, a cellular communication provider planned to locate three base stations so as to provide every house in the village with cellular communication. The base station having power ", "d", " located in the point ", "t", " provides with communication all the houses on the segment ", "[", "t", " - ", "d", ", ", "t", " + ", "d", "]", " (including boundaries)."], ["To simplify the integration (and simply not to mix anything up) all the three stations are planned to possess the equal power of ", "d", ". Which minimal value of ", "d", " is enough to provide all the houses in the village with cellular communication."], []], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 2·10", "5", ") which represents the number of houses in the village. The second line contains the coordinates of houses — the sequence ", "x", "1", ", ", "x", "2", ", ..., ", "x", "n", " of integer numbers (", "1 ≤ ", "x", "i", " ≤ 10", "9", "). It is possible that two or more houses are located on one point. The coordinates are given in a arbitrary order."]], "output_specification": [["Print the required minimal power ", "d", ". In the second line print three numbers — the possible coordinates of the base stations' location. Print the coordinates with 6 digits after the decimal point. The positions of the stations can be any from ", "0", " to ", "2·10", "9", " inclusively. It is accepted for the base stations to have matching coordinates. If there are many solutions, print any of them."]], "sample_test_input": ["4", "1 2 3 4"], "sample_test_output": ["0.500000", "1.500000 2.500000 3.500000"], "note": []}
{"title": ["D. New Game with a Chess Piece"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [[], ["The guys haven’t yet thought what to call the game or the best size of the board for it. Your task is to write a program that can determine the outcome of the game depending on the board size."]], "input_specification": [["The first input line contains two integers ", "t", " and ", "k", " (", "1 ≤ ", "t", " ≤ 20", ", ", "1 ≤ ", "k", " ≤ 10", "9", "). Each of the following ", "t", " lines contains two numbers ", "n", ", ", "m", " — the board’s length and width (", "1 ≤ ", "n", ", ", "m", " ≤ 10", "9", ")."]], "output_specification": [["Output ", "t", " lines that can determine the outcomes of the game on every board. Write «+» if the first player is a winner, and «-» otherwise."]], "sample_test_input": ["10 2", "1 1", "1 2", "2 1", "2 2", "1 3", "2 3", "3 1", "3 2", "3 3", "4 3"], "sample_test_output": ["-", "+", "+", "-", "-", "+", "-", "+", "+", "+"], "note": []}
{"title": ["E. Two Paths"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "input.txt"], "output_file": ["output", "output.txt"], "problem_statement": [["During one journey the traveler could walk along one and the same road several times in one or several directions but in that case he wrote a new entry for each time in his journal. Besides, the archaeologists think that the direction the traveler took on a road had no effect upon the entry: the entry that looks like «", "a", " ", "b", "» could refer to the road from ", "a", " to ", "b", " as well as to the road from ", "b", " to ", "a", "."], ["The archaeologists want to put the pages in the right order and reconstruct the two travel paths but unfortunately, they are bad at programming. That’s where you come in. Go help them!"], []], "input_specification": [["The first input line contains integer ", "m", " (", "1 ≤ ", "m", " ≤ 10000", "). Each of the following ", "m", " lines describes one paper. Each description consists of two integers ", "a", ", ", "b", " (", "1 ≤ ", "a", ", ", "b", " ≤ 10000", ", ", "a", " ≠ ", "b", ")."]], "output_specification": [["In the first line output the number ", "L", "1", ". That is the length of the first path, i.e. the amount of papers in its description. In the following line output ", "L", "1", " space-separated numbers — the indexes of the papers that describe the first path. In the third and fourth lines output similarly the length of the second path ", "L", "2", " and the path itself. Both paths must contain at least one road, i.e. condition ", "L", "1", " > 0", " and ", "L", "2", " > 0", " must be met. The papers are numbered from ", "1", " to ", "m", " according to the order of their appearance in the input file. The numbers should be output in the order in which the traveler passed the corresponding roads. If the answer is not unique, output any."], ["If it’s impossible to find such two paths, output «", "-1", "»."], ["Don’t forget that each paper should be used exactly once, i.e ", "L", "1", " + ", "L", "2", " = ", "m", "."]], "sample_test_input": ["2", "4 5", "4 3"], "sample_test_output": ["1", "2 ", "1", "1"], "note": []}
{"title": ["A. 123-sequence"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains an integer ", "n", " (", "1 ≤ ", "n", " ≤ 10", "6", "). The second line contains a sequence of integers ", "a", "1", ", ", "a", "2", ", ..., ", "a", "n", " (", "1 ≤ ", "a", "i", " ≤ 3", ")."]], "output_specification": [["Print the minimum number of replacements needed to be performed to make all the numbers in the sequence equal."]], "sample_test_input": ["9", "1 3 2 2 2 1 1 2 3"], "sample_test_output": ["5"], "note": [["In the example all the numbers equal to 1 and 3 should be replaced by 2."]]}
{"title": ["B. Right Triangles"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line contains two positive integer numbers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 1000", "). The following ", "n", " lines consist of ", "m", " characters each, describing the field. Only ", "'.'", " and ", "'*'", " are allowed."]], "output_specification": [["Output a single number — total number of square triangles in the field. Please, do not use ", "%lld", " specificator to read or write 64-bit integers in C++. It is preffered to use ", "cout", " (also you may use ", "%I64d", ")."]], "sample_test_input": ["2 2", "**", "*."], "sample_test_output": ["1"], "note": []}
{"title": ["A. Flag"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of the input contains numbers ", "n", " and ", "m", " (", "1 ≤ ", "n", ", ", "m", " ≤ 100", "), ", "n", " — the amount of rows, ", "m", " — the amount of columns on the flag of Berland. Then there follows the description of the flag: each of the following ", "n", " lines contain ", "m", " characters. Each character is a digit between ", "0", " and ", "9", ", and stands for the colour of the corresponding square."]], "output_specification": [["Output ", "YES", ", if the flag meets the new ISO standard, and ", "NO", " otherwise."]], "sample_test_input": ["3 3", "000", "111", "222"], "sample_test_output": ["YES"], "note": []}
{"title": ["B. Burglar and Matches"], "time_limit": ["time limit per test", "0.5 second"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[]], "input_specification": [["The first line of the input contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 2·10", "8", ") and integer ", "m", " (", "1 ≤ ", "m", " ≤ 20", "). The ", "i", " + 1", "-th line contains a pair of numbers ", "a", "i", " and ", "b", "i", " (", "1 ≤ ", "a", "i", " ≤ 10", "8", ", 1 ≤ ", "b", "i", " ≤ 10", "). All the input numbers are integer."]], "output_specification": [["Output the only number — answer to the problem."]], "sample_test_input": ["7 3", "5 10", "2 5", "3 6"], "sample_test_output": ["62"], "note": []}
{"title": ["A. Cottage Village"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The architect bureau, where Peter works, was commissioned to build a new house in «Flatville». The customer wants his future house to be on the ", "Оx", "-axis, to be square in shape, have a side ", "t", ", and touch at least one of the already built houses. For sure, its sides should be parallel to the coordinate axes, its centre should be on the ", "Ox", "-axis and it shouldn't overlap any of the houses in the village."], ["Peter was given a list of all the houses in «Flatville». Would you help him find the amount of possible positions of the new house?"], []], "input_specification": [["The first line of the input data contains numbers ", "n", " and ", "t", " (", "1 ≤ ", "n", ", ", "t", " ≤ 1000", "). Then there follow ", "n", " lines, each of them contains two space-separated integer numbers: ", "x", "i", " ", "a", "i", ", where ", "x", "i", " — ", "x", "-coordinate of the centre of the ", "i", "-th house, and ", "a", "i", " — length of its side (", " - 1000 ≤ ", "x", "i", " ≤ 1000", ", ", "1 ≤ ", "a", "i", " ≤ 1000", ")."]], "output_specification": [["Output the amount of possible positions of the new house."]], "sample_test_input": ["2 2", "0 4", "6 2"], "sample_test_output": ["4"], "note": [["It is possible for the ", "x", "-coordinate of the new house to have non-integer value."]]}
{"title": ["E. Round Table"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You have come up with a better seating arrangement, which is given as a permutation $$$p_1, p_2, \\dots, p_n$$$. More specifically, you want to change the seats of the people so that at the end person $$$p_{i+1}$$$ is sitting to the right of person $$$p_i$$$ (with person $$$p_1$$$ sitting to the right of person $$$p_n$$$). Notice that for each seating arrangement there are $$$n$$$ permutations that describe it (which can be obtained by rotations)."], ["In order to achieve that, you can swap two people sitting at adjacent places; but there is a catch: for all $$$1 \\le x \\le n-1$$$ you cannot swap person $$$x$$$ and person $$$x+1$$$ (notice that you ", "can", " swap person $$$n$$$ and person $$$1$$$). What is the minimum number of swaps necessary? It can be proven that any arrangement can be achieved."], []], "input_specification": [["Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\le t\\le 10\\,000$$$) — the number of test cases. The descriptions of the $$$t$$$ test cases follow."], ["The first line of each test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 200\\,000$$$) — the number of people sitting at the table. "], ["The second line contains $$$n$$$ distinct integers $$$p_1, p_2, \\dots, p_n$$$ ($$$1 \\le p_i \\le n$$$, $$$p_i \\ne p_j$$$ for $$$i \\ne j$$$) — the desired final order of the people around the table."], ["The sum of the values of $$$n$$$ over all test cases does not exceed $$$200\\,000$$$."]], "output_specification": [["For each test case, print the minimum number of swaps necessary to achieve the desired order."]], "sample_test_input": ["3\n4\n2 3 1 4\n5\n5 4 3 2 1\n7\n4 1 6 5 3 7 2\n"], "sample_test_output": ["1\n10\n22\n"], "note": [["In the ", "first test case", ", we can swap person $$$4$$$ and person $$$1$$$ (who are adjacent) in the initial configuration and get the order $$$[4, 2, 3, 1]$$$ which is equivalent to the desired one. Hence in this case a single swap is sufficient."]]}
{"title": ["D. The Winter Hike"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There are $$$n^2$$$ of your friends in the top left corner of the grid. That is, in each cell $$$(x, y)$$$ with $$$1 \\leq x, y \\leq n$$$ there is exactly one friend. Some of the other cells are covered with snow."], ["Your friends want to get to the bottom right corner of the grid. For this in each cell $$$(x, y)$$$ with $$$n+1 \\leq x, y \\leq 2n$$$ there should be exactly one friend. It doesn't matter in what cell each of friends will be."], ["You have decided to help your friends to get to the bottom right corner of the grid."], ["For this, you can give instructions of the following types: "], [], ["Note how friends on the grid border behave in these instructions."], [], ["You can give such instructions any number of times. You can give instructions of different types. If after any instruction one of your friends is in the cell covered with snow he becomes ill."], ["In order to save your friends you can remove snow from some cells before giving the first instruction: "], [], ["You can do this operation any number of times."]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases."], ["The first line of each test case contains the single integer $$$n$$$ ($$$1 \\leq n \\leq 250$$$)."], ["Each of the next $$$2n$$$ lines contains $$$2n$$$ integers $$$c_{i, 1}, c_{i, 2}, \\ldots, c_{i, 2n}$$$ ($$$0 \\leq c_{i, j} \\leq 10^9$$$) — costs of removing snow from cells. If $$$c_{i, j} = 0$$$ for some $$$i, j$$$ than there is no snow in cell $$$(i, j)$$$. Otherwise, cell $$$(i, j)$$$ is covered with snow."], ["It is guaranteed that $$$c_{i, j} = 0$$$ for $$$1 \\leq i, j \\leq n$$$."], ["It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$250$$$."]], "output_specification": [["For each test case output one integer — the minimal number of coins you should spend."]], "sample_test_input": ["4\n1\n0 8\n1 99\n2\n0 0 0 0\n0 0 0 0\n9 9 2 2\n9 9 9 9\n2\n0 0 4 2\n0 0 2 4\n4 2 4 2\n2 4 2 4\n4\n0 0 0 0 0 0 0 2\n0 0 0 0 0 0 2 0\n0 0 0 0 0 2 0 0\n0 0 0 0 2 0 0 0\n0 0 0 2 2 0 2 2\n0 0 2 0 1 6 2 1\n0 2 0 0 2 4 7 4\n2 0 0 0 2 0 1 6\n"], "sample_test_output": ["100\n22\n14\n42\n"], "note": [["In the first test case you can remove snow from the cells $$$(2, 1)$$$ and $$$(2, 2)$$$ for $$$100$$$ coins. Then you can give instructions "], [], ["In the second test case you can remove all snow from the columns $$$3$$$ and $$$4$$$ for $$$22$$$ coins. Then you can give instructions "]]}
{"title": ["B. Integers Shop"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Tomorrow Vasya will go to this shop and will buy some segments there. He will get all integers that appear in at least one of bought segments. The total cost of the purchase is the sum of costs of all segments in it."], ["After shopping, Vasya will get some more integers as a gift. He will get integer $$$x$$$ as a gift if and only if all of the following conditions are satisfied: "], [], ["Vasya can get integer $$$x$$$ as a gift only once so he won't have the same integers after receiving a gift."], ["For example, if Vasya buys segment $$$[2, 4]$$$ for $$$20$$$ coins and segment $$$[7, 8]$$$ for $$$22$$$ coins, he spends $$$42$$$ coins and receives integers $$$2, 3, 4, 7, 8$$$ from these segments. He also gets integers $$$5$$$ and $$$6$$$ as a gift."], ["Due to the technical issues only the first $$$s$$$ segments (that is, segments $$$[l_1, r_1], [l_2, r_2], \\ldots, [l_s, r_s]$$$) will be available tomorrow in the shop."], ["Vasya wants to get (to buy or to get as a gift) as many integers as possible. If he can do this in differents ways, he selects the cheapest of them."], ["For each $$$s$$$ from $$$1$$$ to $$$n$$$, find how many coins will Vasya spend if only the first $$$s$$$ segments will be available."]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases."], ["The first line of each test case contains the single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) — the number of segments in the shop."], ["Each of next $$$n$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, $$$c_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq 10^9, 1 \\leq c_i \\leq 10^9$$$) — the ends of the $$$i$$$-th segments and its cost."], ["It is guaranteed that the total sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case output $$$n$$$ integers: the $$$s$$$-th ($$$1 \\leq s \\leq n$$$) of them should be the number of coins Vasia will spend in the shop if only the first $$$s$$$ segments will be available."]], "sample_test_input": ["3\n2\n2 4 20\n7 8 22\n2\n5 11 42\n5 11 42\n6\n1 4 4\n5 8 9\n7 8 7\n2 10 252\n1 11 271\n1 10 1\n"], "sample_test_output": ["20\n42\n42\n42\n4\n13\n11\n256\n271\n271\n"], "note": [["In the first test case if $$$s = 1$$$ then Vasya can buy only the segment $$$[2, 4]$$$ for $$$20$$$ coins and get $$$3$$$ integers."], ["The way to get $$$7$$$ integers for $$$42$$$ coins in case $$$s = 2$$$ is described in the statement."], ["In the second test case note, that there can be the same segments in the shop."]]}
{"title": ["E. New School"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["To ", "start lessons", " you should assign the teacher to each group of students. Such assignment should satisfy the following requirements:"], [], ["The average of set $$$x_1, x_2, \\ldots, x_k$$$ of $$$k$$$ integers is $$$\\frac{x_1 + x_2 + \\ldots + x_k}{k}$$$."], ["Recently you have heard that one of the students will refuse to study in your school. After this, the size of one group will decrease by $$$1$$$ while all other groups will remain unchanged."], ["You don't know who will refuse to study. For each student determine if you can start lessons in case of his refusal."], ["Note, that it is ", "not guaranteed", " that it is possible to start lessons before any refusal."]], "input_specification": [["The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases."], ["The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq m \\leq n \\leq 10^5$$$) — the number of teachers and the number of groups of students."], ["The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^5$$$) — the ages of teachers."], ["The next $$$2m$$$ lines contains descriptions of groups. "], ["The first line of description of group contains a single integer $$$k_i$$$ ($$$2 \\leq k_i \\leq 10^5$$$) — the number of students in this group. "], ["The second line of description of group contains $$$k_i$$$ integers $$$b_{i, 1}, b_{i, 2}, \\ldots, b_{i, k_i}$$$ ($$$1 \\leq b_{i, j} \\leq 10^5$$$) — the ages of students of this group."], ["It is guaranteed that the total sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$ and that the total sum of $$$k_1 + k_2 + \\ldots + k_m$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$"]], "output_specification": [["For each test case output string of symbols $$$0$$$ and $$$1$$$ of length $$$k_1 + k_2 + \\ldots + k_m$$$. The $$$i$$$-th symbol of this string should be equals $$$1$$$ if it is possible to start lessons in case of the $$$i$$$-th student refuse and it should be equals $$$0$$$ otherwise."], ["Students are numbered by integers from $$$1$$$ to $$$k_1 + k_2 + \\ldots + k_m$$$ in the order they appear in the input. Thus, students of the $$$1$$$-st group are numbered by integers $$$1$$$, $$$2$$$, $$$\\ldots$$$, $$$k_1$$$, students of the $$$2$$$-nd group are numbered by integers $$$k_1 + 1$$$, $$$k_1 + 2$$$, $$$\\ldots$$$, $$$k_1 + k_2$$$ and so on."]], "sample_test_input": ["2\n1 1\n30\n3\n25 16 37\n4 2\n9 12 12 6\n2\n4 5\n3\n111 11 11\n"], "sample_test_output": ["101\n00100\n"], "note": [["In the first test case there is one group of students with average age $$$\\frac{25+16+37}{3}=26$$$ and one teacher with age $$$30$$$. There exists only one assignment that allows to start lessons."], ["If the student with age $$$16$$$ will refuse to study, the average age of students in this group will become $$$\\frac{25+37}{2}=31$$$ so there won't be any assignment that allows to start lessons."], ["In the second test case it is impossible to start lessons initially. However, if the $$$3$$$-rd student with age $$$111$$$ will refuse to study, the average ages of groups will become $$$\\frac{4 + 5}{2}=4.5$$$ and $$$\\frac{11+11}{2} = 11$$$ correspondingly. Then it is possible to assing the first group to the first teacher and the second group to the third teacher."]]}
{"title": ["E. Monsters"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Now you want to defeat all the monsters. First, you choose some vertex $$$s$$$ and defeat the monster on that vertex (since you haven't defeated any monsters before, $$$a_{s}$$$ has to be $$$0$$$). Then, you can move through the edges. If you want to move from vertex $$$u$$$ to vertex $$$v$$$, then the following must hold: either the monster on vertex $$$v$$$ has been defeated before, or you can defeat it now. For the second case, you defeat the monster on vertex $$$v$$$ and reach vertex $$$v$$$."], ["You can pass the vertices and the edges any number of times. Determine whether you can defeat all the monsters or not."], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Their description follows."], ["The first line of each test case contains two integers $$$n$$$, $$$m$$$ ($$$1 \\le n, m \\le 2 \\cdot 10^5$$$) — the number of vertices and edges in the graph respectively. "], ["The second line of each test case contains $$$n$$$ integers $$$a_{1}, a_{2}, \\ldots, a_{n}$$$ ($$$0 \\le a_{i} \\le n$$$) — the dangers of monsters on corresponding vertices."], ["For the following $$$m$$$ lines, each line contains two integers $$$u$$$, $$$v$$$ ($$$1 \\le u, v \\le n$$$), describing an edge connecting vertex $$$u$$$ and vertex $$$v$$$. It is guaranteed that there are no multi-edges or self-loops in the graph."], ["It is guaranteed that both the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases do not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case, output \"", "YES", "\" if you can defeat all the monsters, or \"", "NO", "\" otherwise."], ["You can output the answer in any case (upper or lower). For example, the strings \"", "yEs", "\", \"", "yes", "\", \"", "Yes", "\", and \"", "YES", "\" will be recognized as positive responses."]], "sample_test_input": ["5", "4 3", "2 1 0 3", "1 2", "2 3", "3 4", "6 6", "0 1 2 3 0 1", "1 2", "2 3", "3 4", "4 5", "4 6", "5 6", "4 3", "0 1 2 0", "1 2", "2 3", "1 3", "4 6", "1 1 1 0", "1 2", "3 2", "4 3", "2 4", "4 1", "1 3", "5 5", "0 1 3 2 0", "1 2", "2 3", "3 4", "4 5", "3 5"], "sample_test_output": ["YES\nYES\nNO\nYES\nNO\n"], "note": [["In the first test case, you can start at vertex $$$3$$$ and defeat the monster on it, before you go to vertices $$$2$$$, $$$1$$$ in this order, defeating the monsters on them as well. Then you return to vertex $$$3$$$, and go to vertex $$$4$$$, defeating the monster on it."], ["In the third test case, there is no path to vertex $$$4$$$ if you start at vertex $$$1$$$. Also, there is no path to vertices $$$1$$$, $$$2$$$, and $$$3$$$ if you start at vertex $$$4$$$."]]}
{"title": ["D. Social Network"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["William arrived at a conference dedicated to cryptocurrencies. Networking, meeting new people, and using friends' connections are essential to stay up to date with the latest news from the world of cryptocurrencies."], ["The conference has $$$n$$$ participants, who are initially unfamiliar with each other. William can introduce any two people, $$$a$$$ and $$$b$$$, who were not familiar before, to each other. "], ["William has $$$d$$$ conditions, $$$i$$$'th of which requires person $$$x_i$$$ to have a connection to person $$$y_i$$$. Formally, two people $$$x$$$ and $$$y$$$ have a connection if there is such a chain $$$p_1=x, p_2, p_3, \\dots, p_k=y$$$ for which for all $$$i$$$ from $$$1$$$ to $$$k - 1$$$ it's true that two people with numbers $$$p_i$$$ and $$$p_{i + 1}$$$ know each other."], ["For every $$$i$$$ ($$$1 \\le i \\le d$$$) William wants you to calculate the maximal number of acquaintances one person can have, assuming that William satisfied all conditions from $$$1$$$ and up to and including $$$i$$$ and performed ", "exactly", " $$$i$$$ introductions. The conditions are being checked after William performed $$$i$$$ introductions. The answer for each $$$i$$$ must be calculated independently. It means that when you compute an answer for $$$i$$$, you should assume that no two people have been introduced to each other yet."]], "input_specification": [["The first line contains two integers $$$n$$$ and $$$d$$$ ($$$2 \\le n \\le 10^3, 1 \\le d \\le n - 1$$$), the number of people, and number of conditions, respectively."], ["Each of the next $$$d$$$ lines each contain two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n, x_i \\neq y_i$$$), the numbers of people which must have a connection according to condition $$$i$$$."]], "output_specification": [["Output $$$d$$$ integers. $$$i$$$th number must equal the number of acquaintances the person with the maximal possible acquaintances will have, if William performed $$$i$$$ introductions and satisfied the first $$$i$$$ conditions."]], "sample_test_input": ["7 6\n1 2\n3 4\n2 4\n7 6\n6 5\n1 7\n"], "sample_test_output": ["1\n1\n3\n3\n3\n6\n"], "note": [["The explanation for the first test case:"], ["In this explanation, the circles and the numbers in them denote a person with the corresponding number. The line denotes that William introduced two connected people. The person marked with red has the most acquaintances. These are not the only correct ways to introduce people."]]}
{"title": ["C. Complex Market Analysis"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["While performing complex market analysis William encountered the following problem:"], ["For a given array $$$a$$$ of size $$$n$$$ and a natural number $$$e$$$, calculate the number of pairs of natural numbers $$$(i, k)$$$ which satisfy the following conditions: "], []], "input_specification": [["Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$). Description of the test cases follows."], ["The first line of each test case contains two integers $$$n$$$ and $$$e$$$ $$$(1 \\le e \\le n \\le 2 \\cdot 10^5)$$$, the number of items in the array and number $$$e$$$, respectively."], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ $$$(1 \\le a_i \\le 10^6)$$$, the contents of the array."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$."]], "output_specification": [["For each test case output the answer in the following format:"], ["Output one line containing the number of pairs of numbers $$$(i, k)$$$ which satisfy the conditions."]], "sample_test_input": ["6\n7 3\n10 2 1 3 1 19 3\n3 2\n1 13 1\n9 3\n2 4 2 1 1 1 1 4 2\n3 1\n1 1 1\n4 1\n1 2 1 1\n2 2\n1 2\n"], "sample_test_output": ["2\n0\n4\n0\n5\n0\n"], "note": [["In the first example test case two pairs satisfy the conditions: "], [], ["In the second example test case there are no pairs that satisfy the conditions."], ["In the third example test case four pairs satisfy the conditions: "], [], ["In the fourth example test case there are no pairs that satisfy the conditions."]]}
{"title": ["H. Last Number"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You will perform the following operation $$$n-1$$$ times."], [], ["It's easy to show that there will be exactly one number left after $$$n-1$$$ operations. Output that number."]], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^5$$$) — the number of test cases. Their description follows."], ["For each test case, one single line contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^9$$$) — the initial size of the multiset $$$S$$$."]], "output_specification": [["For each test case, output an integer denoting the only number left after $$$n-1$$$ operations."]], "sample_test_input": ["5", "2", "4", "7", "15", "177567"], "sample_test_output": ["1\n2\n2\n4\n33914\n"], "note": [["We show how the multiset $$$S$$$ changes for $$$n=4$$$."], []]}
{"title": ["G. The Maximum Prefix"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You generate this array in the following way. "], [], ["After the array is generated, you calculate $$$s_{i} = a_{1} + a_{2} + a_{3}+ \\ldots + a_{i}$$$. Specially, $$$s_{0} = 0$$$. Then you let $$$S$$$ equal to $$$\\displaystyle \\max_{i=0}^{k}{s_{i}}$$$. That is, $$$S$$$ is the maximum prefix sum of the array $$$a$$$."], ["You are given $$$n+1$$$ integers $$$h_{0} , h_{1}, \\ldots ,h_{n}$$$. The ", "score", " of an array $$$a$$$ with maximum prefix sum $$$S$$$ is $$$h_{S}$$$. Now, for each $$$k$$$, you want to know the expected score for an array of length $$$k$$$ modulo $$$10^9+7$$$."]], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases. Their description follows."], ["The first line contains an integer $$$n$$$ ($$$1\\le n \\le 5000$$$)."], ["Then for the following $$$n$$$ lines, each line contains two integers $$$x_{i}$$$ and $$$y_{i}$$$ ($$$0 \\le x_{i} < 10^9 + 7$$$, $$$1\\le y_{i} < 10^9 + 7$$$, $$$x_{i} \\le y_{i}$$$), indicating $$$p_{i} = \\frac{x_{i}}{y_{i}}$$$."], ["The next line contains $$$n+1$$$ integers $$$h_{0},h_{1}, \\ldots, h_{n}$$$ ($$$0 \\le h_{i} < 10^9 + 7$$$)."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$."]], "output_specification": [["For each test case, output $$$n$$$ integers in one single line, the $$$i$$$-th of which denotes the expected score for an array of length $$$i$$$, modulo $$$10^9 + 7$$$."], ["Formally, let $$$M = 10^9 + 7$$$. It can be shown that the answer can be expressed as an irreducible fraction $$$\\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \\not \\equiv 0 \\pmod{M}$$$. Output the integer equal to $$$p \\cdot q^{-1} \\bmod M$$$. In other words, output such an integer $$$x$$$ that $$$0 \\le x < M$$$ and $$$x \\cdot q \\equiv p \\pmod{M}$$$."]], "sample_test_input": ["4", "2", "1 2", "1 2", "1 2 3", "3", "1 3", "1 4", "5 5", "1 1 1 1", "3", "2 5", "4 6", "0 2", "4 3 2 1", "5", "5 6", "5 7", "1 6", "1 3", "4 7", "9 0 4 5 2 4"], "sample_test_output": ["500000005 750000007 \n1 1 1 \n200000005 333333339 333333339 \n500000005 880952391 801587311 781746041 789304620 \n"], "note": [["In the first test case, if we choose $$$k=1$$$, there are $$$2$$$ possible arrays with equal probabilities: $$$[1]$$$ and $$$[-1]$$$. The $$$S$$$ values for them are $$$1$$$ and $$$0$$$. So the expected score is $$$\\frac{1}{2}h_{0} + \\frac{1}{2}h_{1} = \\frac{3}{2}$$$. If we choose $$$k=2$$$, there are $$$4$$$ possible arrays with equal probabilities: $$$[1,1]$$$, $$$[1,-1]$$$, $$$[-1,1]$$$, $$$[-1,-1]$$$, and the $$$S$$$ values for them are $$$2,1,0,0$$$. So the expected score is $$$\\frac{1}{2}h_{0} + \\frac{1}{4}h_{1} + \\frac{1}{4}h_{2} = \\frac{7}{4}$$$."], ["In the second test case, no matter what the $$$S$$$ value is, the score is always $$$1$$$, so the expected score is always $$$1$$$."]]}
{"title": ["F. M-tree"], "time_limit": ["time limit per test", "2.5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For a good tree, each leaf $$$u$$$ has a positive integer $$$c_{u}$$$ written on it, and we define the value of the leaf as $$$c_{u} + \\mathrm{dep}_{u}$$$, where $$$\\mathrm{dep}_{u}$$$ represents the number of edges of the path from vertex $$$u$$$ to the root (also known as the depth of $$$u$$$). The ", "value", " of a good tree is the ", "maximum", " value of all its leaves."], ["Now, you are given an array of $$$n$$$ integers $$$a_{1}, a_{2}, \\ldots, a_{n}$$$, which are the integers that should be written on the leaves. You need to construct a good tree with $$$n$$$ leaves and write the integers from the array $$$a$$$ to all the leaves. Formally, you should assign each leaf $$$u$$$ an index $$$b_{u}$$$, where $$$b$$$ is a permutation of length $$$n$$$, and represent that the integer written on leaf $$$u$$$ is $$$c_u = a_{b_{u}}$$$. Under these constraints, you need to ", "minimize", " the value of the good tree."], ["You have $$$q$$$ queries. Each query gives you $$$x$$$, $$$y$$$ and changes $$$a_{x}$$$ to $$$y$$$, and after that, you should output the minimum value of a good tree based on the current array $$$a$$$. "], ["A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array)."], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Their description follows."], ["The first line contains three integers $$$n$$$, $$$m$$$, and $$$q$$$ ($$$1\\le n,q \\le 2 \\cdot 10^5$$$, $$$2\\le m \\le 2\\cdot 10^5$$$, $$$n \\equiv 1 \\pmod {m - 1}$$$) — the number of the leaves, the constant $$$m$$$, and the number of queries."], ["The second line contains $$$n$$$ integers $$$a_{1},a_{2}, \\ldots, a_{n}$$$ ($$$1 \\le a_{i} \\le n$$$) — the initial array."], ["For the following $$$q$$$ lines, each line contains two integers $$$x$$$ and $$$y$$$ ($$$1\\le x,y\\le n$$$), representing a query changing $$$a_{x}$$$ to $$$y$$$."], ["It is guaranteed that both the sum of $$$n$$$ and the sum of $$$q$$$ do not exceed $$$2\\cdot 10^5$$$."]], "output_specification": [["For each test case, output $$$q$$$ integers in one line, the $$$i$$$-th of which is the minimum tree value after the $$$i$$$-th change."]], "sample_test_input": ["3", "5 3 3", "3 3 4 4 5", "1 4", "2 4", "3 5", "5 2 4", "3 3 4 4 5", "1 4", "2 5", "3 5", "4 5", "7 3 4", "1 2 2 3 3 3 4", "1 4", "2 1", "5 5", "6 6"], "sample_test_output": ["6 6 6\n7 7 7 8\n6 6 6 7\n"], "note": [["In the first test case, after the first query, the current array $$$a$$$ is $$$[4,3,4,4,5]$$$. We can construct such a good tree:"], [], ["The first number inside a vertex is its index (in this problem, the indices do not matter, but help to understand the figure). If a vertex is a leaf, the second number inside the vertex is the integer written on it."]]}
{"title": ["C. Anonymity Is Important"], "time_limit": ["time limit per test", "1.5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["That's why in the testing lab \"De-vitro\" doctors came up with an experimental way to report the results. Let's assume that $$$n$$$ people took the tests in the order of the queue. Then the chief doctor Sam can make several statements, in each telling if there is a sick person among the people in the queue from $$$l$$$-th to $$$r$$$-th (inclusive), for some values $$$l$$$ and $$$r$$$."], ["During the process, Sam will check how well this scheme works and will be interested in whether it is possible to find out the test result of $$$i$$$-th person from the information he announced. And if it can be done, then is that patient sick or not."], ["Help Sam to test his scheme."], []], "input_specification": [["The first line contains two integers $$$n$$$, $$$q$$$ ($$$1 \\le n, q \\le 2 \\cdot 10^5$$$) — the number of people and the number of queries."], ["In each of the next $$$q$$$ lines, the description of the query is given. The first number in the line is $$$t$$$ ($$$t = 0$$$ or $$$t = 1$$$) — the type of the query."], ["If $$$t = 0$$$, the line contains three more integers $$$l, r, x$$$ ($$$1 \\le l \\le r \\le n$$$, $$$x = 0$$$ or $$$x = 1$$$). This query means that Sam tells that among the people in the queue from $$$l$$$-th to $$$r$$$-th (inclusive): "], [], ["If $$$t = 1$$$, the line contains one more integer $$$j$$$ ($$$1 \\le j \\le n$$$) — the position of the patient in the queue, for which Sam wants to know the status."]], "output_specification": [["After each Sam question (query with $$$t = 1$$$) print:"]], "sample_test_input": ["6 9\n0 4 5 0\n1 5\n1 6\n0 4 6 1\n1 6\n0 2 5 1\n0 2 2 0\n1 3\n1 2\n"], "sample_test_output": ["NO\nN/A\nYES\nYES\nNO\n"], "note": [["In the first test for the five first queries:"]]}
{"title": ["B. Power Walking"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Sam has $$$n$$$ power-ups, the $$$i$$$-th has type $$$a_i$$$. A child's strength is equal to the number of ", "different", " types among power-ups he has."], ["For a team of size $$$k$$$, Sam will distribute all $$$n$$$ power-ups to $$$k$$$ children in such a way that each of the $$$k$$$ children receives at least one power-up, and each power-up is given to someone."], ["For each integer $$$k$$$ from $$$1$$$ to $$$n$$$, find the ", "minimum", " sum of strengths of a team of $$$k$$$ children Sam can get."], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 3 \\cdot 10^5$$$) — the number of test cases. Description of the test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$). "], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — types of Sam's power-ups."], ["It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$."]], "output_specification": [["For every test case print $$$n$$$ integers."], ["The $$$k$$$-th integer should be equal to the minimum sum of strengths of children in the team of size $$$k$$$ that Sam can get."]], "sample_test_input": ["2\n3\n1 1 2\n6\n5 1 2 2 2 4\n"], "sample_test_output": ["2 2 3 \n4 4 4 4 5 6 \n"], "note": [["One of the ways to give power-ups to minimise the sum of strengths in the first test case: "], []]}
{"title": ["B. Repetitions Decoding"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["More formally:"], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 30\\,000$$$) — the number of test cases. Description of the test cases follows."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 500$$$). "], ["The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$)  — the initial array. "], ["It is guaranteed that the sum of $$$n^2$$$ over all test cases does not exceed $$$250\\,000$$$."]], "output_specification": [["For each test case print answer in the following format."], ["If you cannot turn the array into a concatenation of tandem repeats, print a single integer $$$-1$$$."], ["Otherwise print the number of operations $$$q$$$ ($$$0 \\le q \\le 2 \\cdot n^2$$$) that you want to do. Then print the descriptions of operations."], ["In each of the following $$$q$$$ lines print two integers $$$p$$$ and $$$c$$$ ($$$1 \\le c \\le 10^9$$$), which mean that you insert the integer $$$c$$$ twice after $$$p$$$ elements of the array. If the length of the array is $$$m$$$ before the operation, then the condition $$$0 \\le p \\le m$$$ should be satisfied."], ["Then you should print any way to split the resulting array into tandem repeats. First, print a single integer $$$d$$$, and then print a sequence $$$t_1, t_2, \\ldots, t_d$$$ of even integers of size $$$d$$$ ($$$d, t_i \\ge 1$$$). These numbers are the lengths of the subsegments from left to right."], ["Note that the size of the resulting array $$$a$$$ is $$$m = n + 2 \\cdot q$$$. The following statements must hold: "], []], "sample_test_input": ["4\n2\n5 7\n2\n5 5\n6\n1 3 1 2 2 3\n6\n3 2 1 1 2 3\n"], "sample_test_output": ["-1\n0\n1\n2\n4\n1 3\n5 3\n5 3\n10 3\n2\n8 6 \n5\n0 3\n8 3\n5 3 \n6 2 \n7 1\n4\n2 6 6 2"], "note": [["In the first test case, you cannot apply operations to the array to make it possible to split it into tandem repeats."], ["In the second test case the array is already a tandem repeat $$$[5, 5] = \\underbrace{([5] + [5])}_{t_1 = 2}$$$, thus we can do no operations at all."], ["In the third test case, initially, we have the following array: $$$$$$[1, 3, 1, 2, 2, 3].$$$$$$ After the first insertion with $$$p = 1, c = 3$$$: $$$$$$[1, \\textbf{3, 3}, 3, 1, 2, 2, 3].$$$$$$ After the second insertion with $$$p = 5, c = 3$$$: $$$$$$[1, 3, 3, 3, 1, \\textbf{3, 3}, 2, 2, 3].$$$$$$ After the third insertion with $$$p = 5, c = 3$$$: $$$$$$[1, 3, 3, 3, 1, \\textbf{3, 3}, 3, 3, 2, 2, 3].$$$$$$ After the fourth insertion with $$$p = 10, c = 3$$$: $$$$$$[1, 3, 3, 3, 1, 3, 3, 3, 3, 2, \\textbf{3, 3}, 2, 3].$$$$$$ The resulting array can be represented as a concatenation of tandem repeats: $$$$$$\\underbrace{([1, 3, 3, 3] + [1, 3, 3, 3])}_{t_1 = 8} + \\underbrace{([3, 2, 3] + [3, 2, 3])}_{t_2 = 6}.$$$$$$"], ["In the fourth test case, initially, we have the following array: $$$$$$[3, 2, 1, 1, 2, 3].$$$$$$ After the first insertion with $$$p = 0, c = 3$$$: $$$$$$[\\textbf{3, 3}, 3, 2, 1, 1, 2, 3].$$$$$$ After the second insertion with $$$p = 8, c = 3$$$: $$$$$$[3, 3, 3, 2, 1, 1, 2, 3, \\textbf{3, 3}].$$$$$$ After the third insertion with $$$p = 5, c = 3$$$ $$$$$$[3, 3, 3, 2, 1, \\textbf{3, 3}, 1, 2, 3, 3, 3].$$$$$$ After the fourth insertion with $$$p = 6, c = 2$$$: $$$$$$[3, 3, 3, 2, 1, 3, \\textbf{2, 2}, 3, 1, 2, 3, 3, 3].$$$$$$ After the fifth insertion with $$$p = 7, c = 1$$$: $$$$$$[3, 3, 3, 2, 1, 3, 2, \\textbf{1, 1}, 2, 3, 1, 2, 3, 3, 3].$$$$$$ The resulting array can be represented as a concatenation of tandem repeats: $$$$$$\\underbrace{([3] + [3])}_{t_1 = 2} + \\underbrace{([3, 2, 1] + [3, 2, 1])}_{t_2 = 6} + \\underbrace{([1, 2, 3] + [1, 2, 3])}_{t_3 = 6} + \\underbrace{([3] + [3])}_{t_4 = 2}.$$$$$$"]]}
{"title": ["F. Covering Circle"], "time_limit": ["time limit per test", "6 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["You are given $$$n$$$ distinct points with integer coordinates $$$A_1, A_2, \\ldots, A_n$$$. All points were generated from the square $$$[-10^8, 10^8] \\times [-10^8, 10^8]$$$ uniformly and independently."], ["You are given positive integers $$$k$$$, $$$l$$$, such that $$$k \\leq l \\leq n$$$. You want to select a subsegment $$$A_i, A_{i+1}, \\ldots, A_{i+l-1}$$$ of the points array (for some $$$1 \\leq i \\leq n + 1 - l$$$), and some circle on the plane, containing $$$\\geq k$$$ points of the selected subsegment (inside or on the border)."], ["What is the smallest possible radius of that circle?"], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. Descriptions of test cases follow."], ["The first line of each test case contains three integers $$$n$$$, $$$l$$$, $$$k$$$ ($$$2 \\leq k \\leq l \\leq n \\leq 50\\,000$$$, $$$k \\leq 20$$$)."], ["Each of the next $$$n$$$ lines contains two integers $$$x_i$$$, $$$y_i$$$ ($$$-10^8 \\leq x_i, y_i \\leq 10^8$$$) — the coordinates of the point $$$A_i$$$. It is guaranteed that all points are distinct and were generated independently from uniform distribution on $$$[-10^8, 10^8] \\times [-10^8, 10^8]$$$."], ["It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$50\\,000$$$."], ["In the first test, points were not generated from the uniform distribution on $$$[-10^8, 10^8] \\times [-10^8, 10^8]$$$ for simplicity. It is ", "the only", " such test and your solution ", "must", " pass it."], ["Hacks are disabled in this problem."]], "output_specification": [["For each test case print a single real number — the answer to the problem."], ["Your answer will be considered correct if its absolute or relative error does not exceed $$$10^{-9}$$$. Formally let your answer be $$$a$$$, jury answer be $$$b$$$. Your answer will be considered correct if $$$\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-9}$$$."]], "sample_test_input": ["4\n3 2 2\n0 0\n0 4\n3 0\n5 4 3\n1 1\n0 0\n2 2\n0 2\n2 0\n8 3 2\n0 3\n1 0\n0 2\n1 1\n0 1\n1 2\n0 0\n1 3\n5 4 4\n1 1\n-3 3\n2 2\n5 3\n5 5\n"], "sample_test_output": ["2.00000000000000000000\n1.00000000000000000000\n0.50000000000000000000\n4.00000000000000000000\n"], "note": [["In the first test case, we can select subsegment $$$A_1, A_2$$$ and a circle with center $$$(0, 2)$$$ and radius $$$2$$$."], ["In the second test case, we can select subsegment $$$A_1, A_2, A_3, A_4$$$ and a circle with center $$$(1, 2)$$$ and radius $$$1$$$."]]}
{"title": ["E. Breaking the Wall"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The wall consists of $$$n$$$ sections, aligned in a row. The $$$i$$$-th section initially has durability $$$a_i$$$. If durability of some section becomes $$$0$$$ or less, this section is considered broken."], ["To attack the opponent, Monocarp needs to break at least two sections of the wall (any two sections: possibly adjacent, possibly not). To do this, he plans to use an onager — a special siege weapon. The onager can be used to shoot any section of the wall; the shot deals $$$2$$$ damage to the target section and $$$1$$$ damage to adjacent sections. In other words, if the onager shoots at the section $$$x$$$, then the durability of the section $$$x$$$ decreases by $$$2$$$, and the durability of the sections $$$x - 1$$$ and $$$x + 1$$$ (if they exist) decreases by $$$1$$$ each. "], ["Monocarp can shoot at any sections any number of times, ", "he can even shoot at broken sections", "."], ["Monocarp wants to calculate the minimum number of onager shots needed to break at least two sections. Help him!"], []], "input_specification": [["The first line contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of sections."], ["The second line contains the sequence of integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$), where $$$a_i$$$ is the initial durability of the $$$i$$$-th section."]], "output_specification": [["Print one integer — the minimum number of onager shots needed to break at least two sections of the wall."]], "sample_test_input": ["5\n20 10 30 10 20\n"], "sample_test_output": ["10\n"], "note": [["In the first example, it is possible to break the $$$2$$$-nd and the $$$4$$$-th section in $$$10$$$ shots, for example, by shooting the third section $$$10$$$ times. After that, the durabilities become $$$[20, 0, 10, 0, 20]$$$. Another way of doing it is firing $$$5$$$ shots at the $$$2$$$-nd section, and another $$$5$$$ shots at the $$$4$$$-th section. After that, the durabilities become $$$[15, 0, 20, 0, 15]$$$."], ["In the second example, it is enough to shoot the $$$2$$$-nd section once. Then the $$$1$$$-st and the $$$3$$$-rd section will be broken."], ["In the third example, it is enough to shoot the $$$2$$$-nd section twice (then the durabilities become $$$[5, 2, 4, 8, 5, 8]$$$), and then shoot the $$$3$$$-rd section twice (then the durabilities become $$$[5, 0, 0, 6, 5, 8]$$$). So, four shots are enough to break the $$$2$$$-nd and the $$$3$$$-rd section."]]}
{"title": ["D. Guess the Permutation"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Jury initially had a sequence $$$a$$$ of length $$$n$$$, such that $$$a_i = i$$$."], ["The jury chose three integers $$$i$$$, $$$j$$$, $$$k$$$, such that $$$1 \\leq i < j < k \\leq n$$$, $$$j - i > 1$$$. After that, Jury reversed subsegments $$$[i, j - 1]$$$ and $$$[j, k]$$$ of the sequence $$$a$$$."], ["Reversing a subsegment $$$[l, r]$$$ of the sequence $$$a$$$ means reversing the order of elements $$$a_l, a_{l+1}, \\ldots, a_r$$$ in the sequence, i. e. $$$a_l$$$ is swapped with $$$a_r$$$, $$$a_{l+1}$$$ is swapped with $$$a_{r-1}$$$, etc."], ["You are given the number $$$n$$$ and you should find $$$i$$$, $$$j$$$, $$$k$$$ after asking some questions."], ["In one question you can choose two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$) and ask the number of inversions on the subsegment $$$[l, r]$$$ of the sequence $$$a$$$. You will be given the number of pairs $$$(i, j)$$$ such that $$$l \\leq i < j \\leq r$$$, and $$$a_i > a_j$$$."], ["Find the chosen numbers $$$i$$$, $$$j$$$, $$$k$$$ after at most $$$40$$$ questions."], ["The numbers $$$i$$$, $$$j$$$, and $$$k$$$ are fixed before the start of your program and do not depend on your queries."], []], "input_specification": [["Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. Description of the test cases follows."], ["The single line of each test case contains a single integer $$$n$$$ ($$$4 \\leq n \\leq 10^9$$$). After reading it you should start an interaction process by asking questions for that test case. After giving an answer you should:"]], "output_specification": [], "sample_test_input": ["2 \n5 \n\n4 \n\n3 \n\n3 \n\n5 \n\n2 \n\n2 \n\n1 "], "sample_test_output": ["\n\n? 1 5\n\n? 2 5\n\n? 3 5\n\n! 1 3 5\n\n? 1 5\n\n? 2 5\n\n? 3 5\n\n! 2 4 5"], "note": [["In the first test case, $$$i = 1$$$, $$$j = 3$$$, $$$k = 5$$$, so the sequence $$$a$$$ is $$$[2, 1, 5, 4, 3]$$$."], ["In the second test case, $$$i = 2$$$, $$$j = 4$$$, $$$k = 5$$$, so the sequence $$$a$$$ is $$$[1, 3, 2, 5, 4]$$$."]]}
{"title": ["A. Hard Way"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["He calls a point on the downtown's border (that is the border of the triangle) ", "safe", " if he can reach this point from ", "at least one point", " of the line $$$y = 0$$$ walking along some ", "straight line", ", without crossing the interior of the triangle."], []], "input_specification": [["Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Description of the test cases follows."], ["Each test case contains three lines, each of them contains two integers $$$x_i$$$, $$$y_i$$$ ($$$0 \\le x_i, y_i \\le 10^9$$$) — coordinates of the vertices of the downtown's border."]], "output_specification": [["For each test case print a single number — the answer to the problem."], ["Your answer will be considered correct if its absolute or relative error does not exceed $$$10^{-9}$$$. Formally let your answer be $$$a$$$, jury answer be $$$b$$$. Your answer will be considered correct if $$$\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-9}$$$."]], "sample_test_input": ["5", "8 10", "10 4", "6 2", "4 6", "0 1", "4 2", "14 1", "11 2", "13 2", "0 0", "4 0", "2 4", "0 1", "1 1", "0 0"], "sample_test_output": ["0.0000000\n0\n2.0000\n0.00\n1\n"], "note": [["In the picture, the downtowns of the first three test cases are illustrated. Triangles are enumerated according to the indices of test cases they belong to."], [], ["In the first two test cases, all points on the borders of the downtowns are safe, thus the answers are $$$0$$$."], ["In the following picture unsafe points for the third test case are marked with black color:"]]}
{"title": ["B. Make It Increasing"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["Output the minimum number of operations that must be done for a sequence of integers to become strictly increasing (that is, for the condition $$$a_1 \\lt a_2 \\lt \\dots \\lt a_n$$$ to be satisfied). Or determine that it is impossible to obtain such a sequence. Note that elements ", "cannot", " be swapped. The only possible operation is described above."], ["For example, let $$$n = 3$$$ and a sequence of numbers $$$[3, 6, 5]$$$ be given. Then it is enough to perform two operations on it: "], []], "input_specification": [["The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the input."], ["The descriptions of the test cases follow."], ["The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 30$$$)."], ["The second line of each test case contains exactly $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 2 \\cdot 10^9$$$)."]], "output_specification": [["For each test case, print a single number on a separate line — the minimum number of operations to perform on the sequence to make it strictly increasing. If a strictly increasing sequence cannot be obtained, print \"", "-1", "\"."]], "sample_test_input": ["7\n3\n3 6 5\n4\n5 3 2 1\n5\n1 2 3 4 5\n1\n1000000000\n4\n2 8 7 5\n5\n8 26 5 21 10\n2\n5 14\n"], "sample_test_output": ["2\n-1\n0\n0\n4\n11\n0\n"], "note": [["The first test case is analyzed in the statement."], ["In the second test case, it is impossible to obtain a strictly increasing sequence."], ["In the third test case, the sequence is already strictly increasing."]]}
{"title": ["G. Eligible Segments"], "time_limit": ["time limit per test", "3 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Find the number of pairs of indices $$$(i, j)$$$ such that $$$1 \\le i < j \\le n$$$, and for every possible $$$k$$$ ($$$1 \\le k \\le n$$$) the distance from the point $$$p_k$$$ to the ", "segment", " between points $$$p_i$$$ and $$$p_j$$$ is at most $$$R$$$."], []], "input_specification": [["The first line contains two integers $$$n$$$, $$$R$$$ ($$$1 \\le n \\le 3000$$$, $$$1 \\le R \\le 10^5$$$) — the number of points and the maximum distance between a point and a segment."], ["Each of the next $$$n$$$ lines contains two integers $$$x_i$$$, $$$y_i$$$ ($$$-10^5 \\le x_i, y_i \\le 10^5$$$) that define the $$$i$$$-th point $$$p_i=(x_i, y_i)$$$. All points are distinct."], ["It is guaranteed that the answer does not change if the parameter $$$R$$$ is changed by at most $$$10^{-2}$$$."]], "output_specification": [["Print the number of suitable pairs $$$(i, j)$$$."]], "sample_test_input": ["4 2\n0 1\n0 -1\n3 0\n-3 0\n"], "sample_test_output": ["1"], "note": [["In the first example, the only pair of points $$$(-3, 0)$$$, $$$(3, 0)$$$ is suitable. The distance to the segment between these points from the points $$$(0, 1)$$$ and $$$(0, -1)$$$ is equal to $$$1$$$, which is less than $$$R=2$$$."], ["In the second example, all possible pairs of points are eligible."]]}
{"title": ["D. String"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Let's define the function of two strings ", "F", "(", "x", ", ", "y", ")", " like this. We'll find a list of such pairs of numbers for which the corresponding substrings of string ", "x", " are equal to string ", "y", ". Let's sort this list of pairs according to the pair's first number's increasing. The value of function ", "F", "(", "x", ", ", "y", ")", " equals the number of non-empty continuous sequences in the list."], ["For example: ", "F", "(", "babbabbababbab", ", ", "babb", ") = 6", ". The list of pairs is as follows:"], ["(1, 4), (4, 7), (9, 12)"], ["Its continuous sequences are: "], [], ["Your task is to calculate for the given string ", "s", " the sum ", "F", "(", "s", ", ", "x", ")", " for all ", "x", ", that ", "x", " belongs to the set of all substrings of a string ", "s", "."]], "input_specification": [["The only line contains the given string ", "s", ", consisting only of small Latin letters (", "1 ≤ |", "s", "| ≤ 10", "5", ")."]], "output_specification": [["Print the single number — the sought sum."], ["Please do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator."]], "sample_test_input": ["aaaa"], "sample_test_output": ["20"], "note": [["In the first sample the function values at ", "x", " equal to \"a\", \"aa\", \"aaa\" and \"aaaa\" equal 10, 6, 3 and 1 correspondingly."], ["In the second sample for any satisfying ", "x", " the function value is 1."]]}
{"title": ["E. Porcelain"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The collection of porcelain is arranged neatly on ", "n", " shelves. Within each shelf the items are placed in one row, so that one can access only the outermost items — the leftmost or the rightmost item, not the ones in the middle of the shelf. Once an item is taken, the next item on that side of the shelf can be accessed (see example). Once an item is taken, it can't be returned to the shelves."], ["You are given the values of all items. Your task is to find the maximal damage the princess' tantrum of ", "m", " shrieks can inflict on the collection of porcelain."], []], "input_specification": [["The first line of input data contains two integers ", "n", " (", "1 ≤ ", "n", " ≤ 100", ") and ", "m", " (", "1 ≤ ", "m", " ≤ 10000", "). The next ", "n", " lines contain the values of the items on the shelves: the first number gives the number of items on this shelf (an integer between ", "1", " and ", "100", ", inclusive), followed by the values of the items (integers between ", "1", " and ", "100", ", inclusive), in the order in which they appear on the shelf (the first number corresponds to the leftmost item, the last one — to the rightmost one). The total number of items is guaranteed to be at least ", "m", "."]], "output_specification": [["Output the maximal total value of a tantrum of ", "m", " shrieks."]], "sample_test_input": ["2 3", "3 3 7 2", "3 4 1 5"], "sample_test_output": ["15"], "note": [["In the first case there are two shelves, each with three items. To maximize the total value of the items chosen, one can take two items from the left side of the first shelf and one item from the right side of the second shelf."], ["In the second case there is only one shelf, so all three items are taken from it — two from the left side and one from the right side."]]}
{"title": ["A. Life of a Flower"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The flower grows as follows: "], [], ["At the beginning of the $$$1$$$-st day the flower is $$$1$$$ centimeter tall. What is its height after $$$n$$$ days?"]], "input_specification": [["Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows."], ["The first line of each test case contains the only integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$)."], ["The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$a_i = 0$$$ or $$$a_i = 1$$$). If $$$a_i = 1$$$, the flower is watered in the $$$i$$$-th day, otherwise it is not watered."]], "output_specification": [["For each test case print a single integer $$$k$$$ — the flower's height after $$$n$$$ days, or $$$-1$$$, if the flower dies."]], "sample_test_input": ["4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n"], "sample_test_output": ["3\n7\n-1\n1\n"], "note": []}
{"title": ["C. Terse princess"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The princess intends to choose the most worthy groom, this is, the richest one. Whenever she sees a groom who is more rich than each of the previous ones, she says a measured «Oh...». Whenever the groom is richer than all previous ones added together, she exclaims «Wow!» (no «Oh...» in this case). At the sight of the first groom the princess stays calm and says nothing."], ["The fortune of each groom is described with an integer between 1 and 50000. You know that during the day the princess saw ", "n", " grooms, said «Oh...» exactly ", "a", " times and exclaimed «Wow!» exactly ", "b", " times. Your task is to output a sequence of ", "n", " integers ", "t", "1", ", ", "t", "2", ", ..., ", "t", "n", ", where ", "t", "i", " describes the fortune of ", "i", "-th groom. If several sequences are possible, output any of them. If no sequence exists that would satisfy all the requirements, output a single number ", "-1", "."], []], "input_specification": [["The only line of input data contains three integer numbers ", "n", ", ", "a", " and ", "b", " (", "1 ≤ ", "n", " ≤ 100, 0 ≤ ", "a", ", ", "b", " ≤ 15, ", "n", " > ", "a", " + ", "b", "), separated with single spaces."]], "output_specification": [["Output any sequence of integers ", "t", "1", ", ", "t", "2", ", ..., ", "t", "n", ", where ", "t", "i", " (", "1 ≤ ", "t", "i", " ≤ 50000", ") is the fortune of ", "i", "-th groom, that satisfies the given constraints. If no sequence exists that would satisfy all the requirements, output a single number ", "-1", "."]], "sample_test_input": ["10 2 3"], "sample_test_output": ["5 1 3 6 16 35 46 4 200 99"], "note": [["Let's have a closer look at the answer for the first sample test. "]]}
{"title": ["B. Escape"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The princess runs at ", "v", "p", " miles per hour, and the dragon flies at ", "v", "d", " miles per hour. The dragon will discover the escape after ", "t", " hours and will chase the princess immediately. Looks like there's no chance to success, but the princess noticed that the dragon is very greedy and not too smart. To delay him, the princess decides to borrow a couple of bijous from his treasury. Once the dragon overtakes the princess, she will drop one bijou to distract him. In this case he will stop, pick up the item, return to the cave and spend ", "f", " hours to straighten the things out in the treasury. Only after this will he resume the chase again from the very beginning."], ["The princess is going to run on the straight. The distance between the cave and the king's castle she's aiming for is ", "c", " miles. How many bijous will she need to take from the treasury to be able to reach the castle? If the dragon overtakes the princess at exactly the same moment she has reached the castle, we assume that she reached the castle before the dragon reached her, and doesn't need an extra bijou to hold him off."], []], "input_specification": [["The input data contains integers ", "v", "p", ", ", "v", "d", ", ", "t", ", ", "f", " and ", "c", ", one per line (", "1 ≤ ", "v", "p", ", ", "v", "d", " ≤ 100", ", ", "1 ≤ ", "t", ", ", "f", " ≤ 10", ", ", "1 ≤ ", "c", " ≤ 1000", ")."]], "output_specification": [["Output the minimal number of bijous required for the escape to succeed."]], "sample_test_input": ["1", "2", "1", "1", "10"], "sample_test_output": ["2"], "note": [["In the first case one hour after the escape the dragon will discover it, and the princess will be 1 mile away from the cave. In two hours the dragon will overtake the princess 2 miles away from the cave, and she will need to drop the first bijou. Return to the cave and fixing the treasury will take the dragon two more hours; meanwhile the princess will be 4 miles away from the cave. Next time the dragon will overtake the princess 8 miles away from the cave, and she will need the second bijou, but after this she will reach the castle without any further trouble."], ["The second case is similar to the first one, but the second time the dragon overtakes the princess when she has reached the castle, and she won't need the second bijou."]]}
{"title": ["A. Business trip"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Today Petya opened the cupboard and found a scary note there. His parents had left him with duties: he should water their favourite flower all year, each day, in the morning, in the afternoon and in the evening. \"Wait a second!\" — thought Petya. He know for a fact that if he fulfills the parents' task in the ", "i", "-th (", "1 ≤ ", "i", " ≤ 12", ") month of the year, then the flower will grow by ", "a", "i", " centimeters, and if he doesn't water the flower in the ", "i", "-th month, then the flower won't grow this month. Petya also knows that try as he might, his parents won't believe that he has been watering the flower if it grows strictly less than by ", "k", " centimeters. "], ["Help Petya choose the minimum number of months when he will water the flower, given that the flower should grow no less than by ", "k", " centimeters."], []], "input_specification": [["The first line contains exactly one integer ", "k", " (", "0 ≤ ", "k", " ≤ 100", "). The next line contains twelve space-separated integers: the ", "i", "-th (", "1 ≤ ", "i", " ≤ 12", ") number in the line represents ", "a", "i", " (", "0 ≤ ", "a", "i", " ≤ 100", "). "]], "output_specification": [["Print the only integer — the minimum number of months when Petya has to water the flower so that the flower grows no less than by ", "k", " centimeters. If the flower can't grow by ", "k", " centimeters in a year, print ", "-1", "."]], "sample_test_input": ["5", "1 1 1 1 2 2 3 2 2 1 1 1"], "sample_test_output": ["2"], "note": [["Let's consider the first sample test. There it is enough to water the flower during the seventh and the ninth month. Then the flower grows by exactly five centimeters."], ["In the second sample Petya's parents will believe him even if the flower doesn't grow at all (", "k", " = 0", "). So, it is possible for Petya not to water the flower at all."]]}
{"title": ["D. World of Mouth"], "time_limit": ["time limit per test", "5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["She asked ", "n", " of her friends to help her. They all formed a circle and Aida told the person to her right a piece of news which was just a simple string. Then each person told the string to the person on his/her right. But they didn't tell the string exactly as they'd heard it. Each person made ", "at most", " one of these two types of changes: "], [], ["Finally when the rumor passed exactly ", "n", " moves (a complete cycle), Aida heard something quite different from what she expected from the person on her left. She thinks someone has cheated and made some changes other than those explained above. Now she wants you to write a ", "Pike", " piece of code which gets the initial and final strings and tells Aida whether it's possible to get to the final string from the initial one, by the rules described above."]], "input_specification": [["The first line contains a single integer ", "n", " (", "2 ≤ ", "n", " ≤ 8 × 10", "6", "), the number of Aida's friends. The following two lines contain a ", "non-empty", " string each — initial and final strings. The lengths of strings are at most ", "10", "7", " and they only contain English alphabet letters."]], "output_specification": [["Write a single ", "YES", " or ", "NO", ". Write ", "YES", " only if it's possible to get to the final string from the initial string."]], "sample_test_input": ["100", "Codeforces", "MMIODPC"], "sample_test_output": ["Yes"], "note": [["The input is case-sensitive, while the output is not."]]}
{"title": ["E. Lamps in a Line"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For two integer numbers ", "a", " and ", "b", ", we say ", "a", "|", "b", " if and only if there exists an integer ", "c", " such that ", "a", " × ", "c", " = ", "b", "."], ["Amirali likes to play with the keys. He randomly pressed ", "k", " keys and wants to know the final state of the lamps. Help him by writing a ", "Pike", " piece of code to solve this task."], []], "input_specification": [["The first line of input contains a single integer ", "n", ", the number of lamps (", "1 ≤ ", "n", " ≤ 10", "5", ")."], ["The following line contains ", "n", " words. The ", "i", "-th word describes the initial state of lamp number ", "i", " (see samples for details)."], ["The following line contains a single integer ", "k", " (", "1 ≤ ", "k", " ≤ 10", "4", "), the number of times a key is pressed. Then in the next line come ", "k", " integers in range ", "[1, ", "n", "]", " which are the numbers of the pressed keys."]], "output_specification": [["Write ", "n", " words to output. Describe the final state of the lamps. See samples for more details."]], "sample_test_input": ["2", "off off", "2", "1 2"], "sample_test_output": ["on off "], "note": []}
{"title": ["F. Polynom"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Please, write the polynom in the shortest way, so you should skip unnecessary terms: some terms «", "C*X^K", "» should be reduced or even omitted. Look for the samples for clarification."], []], "input_specification": [["The first line of the input contains ", "n", " (", "1 ≤ ", "n", " ≤ 9", "). The following ", "n", " lines contain integer ", "a", "i", " (", " - 10 ≤ ", "a", "i", " ≤ 10", ")."]], "output_specification": [["Print the given polynom in a standard way. Note, that the answer in this problem response uniquely determined."]], "sample_test_input": ["2", "-1", "1"], "sample_test_output": ["X^2-1"], "note": []}
{"title": ["B. Simple XML"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Tegs can be nested into each other: in this case one opening and closing tag pair is located inside another pair."], ["Let's define the notion of a ", "XML-text", ": "], [], ["You are given a XML-text (it is guaranteed that the text is valid), your task is to print in the following form: "]], "input_specification": [["The input data consists on the only non-empty string — the XML-text, its length does not exceed 1000 characters. It is guaranteed that the text is valid. The text contains no spaces."]], "output_specification": [["Print the given XML-text according to the above-given rules."]], "sample_test_input": ["<a><b><c></c></b></a>"], "sample_test_output": ["<a>", "  <b>", "    <c>", "    </c>", "  </b>", "</a>"], "note": []}
{"title": ["H. Battleship"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["The ships should not 'bend', touch each other or overlap in any way. Each ship can be oriented horizontaly or verticaly. Your task is to check whether the given set of boards meets the given conditions."]], "input_specification": [["The first line contains number ", "n", " (", "1 ≤ ", "n", " ≤ 10", ") — the number of boards. Each board is described by 10 lines containing 10 characters each. The symbol \"0\" stands for an empty square and the symbol \"*\" stands for a square occupied by a ship. The descriptions of boards are separated with empty lines."]], "output_specification": [["Print ", "n", " lines YES or NO. Print the first word if the board meets the given conditions; otherwise print the second word."]], "sample_test_input": ["2", "****000000", "0000000000", "***00***00", "0000000000", "00000000**", "000**00000", "00000000**", "000*000000", "00000*00*0", "0*00000000", "****000000", "0000000000", "***00***00", "0000000000", "00000000**", "000**00000", "00000000**", "0000*00000", "00000*00*0", "0*00000000"], "sample_test_output": ["YES", "NO"], "note": []}
{"title": ["B. Friendly Numbers"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A group of non-zero integers is called friendly, if each pair of its integers form a friend pair."], ["You are given a group of non-zero integers. See if they're friendly."], []], "input_specification": [["The first line contains ", "n", " (", "1 ≤ ", "n", " ≤ 1000", "), where ", "n", " — the number of integers in the group."], ["The next line contains the elements, sorted in the non-decreasing order. The numbers are comma separated, they have at most 7 digits in their decimal notation and do not have any leading zeros."]], "output_specification": [["If the group is friendly write \"", "FRIENDS", "\", else write \"", "NOT FRIENDS", "\"."]], "sample_test_input": ["4", "1,3,6,12"], "sample_test_output": ["FRIENDS"], "note": []}
{"title": ["C. Brackets"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A two dimensional array whose size equals ", "n", " × ", "m", " is called a ", "correct bracket", " array, if any string formed by writing out the brackets on some monotonous way from cell ", "(1, 1)", " to cell ", "(", "n", ", ", "m", ")", " forms a correct bracket sequence. "], ["Let's define the operation of comparing two correct bracket arrays of equal size (", "a", " and ", "b", ") like that. Let's consider a given two dimensional array of priorities (", "c", ") — a two dimensional array of same size, containing different integers from ", "1", " to ", "nm", ". Let's find such position ", "(", "i", ", ", "j", ")", " in the two dimensional array, that ", "a", "i", ", ", "j", " ≠ ", "b", "i", ", ", "j", ". If there are several such positions, let's choose the one where number ", "c", "i", ", ", "j", " is minimum. If ", "a", "i", ", ", "j", " = ", "\"(\", then ", "a", " < ", "b", ", otherwise ", "a", " > ", "b", ". If the position ", "(", "i", ", ", "j", ")", " is not found, then the arrays are considered equal."], ["Your task is to find a ", "k", "-th two dimensional correct bracket array. It is guaranteed that for the given sizes of ", "n", " and ", "m", " there will be no less than ", "k", " two dimensional correct bracket arrays."], []], "input_specification": [["The first line contains integers ", "n", ", ", "m", " and ", "k", " — the sizes of the array and the number of the sought correct bracket array (", "1 ≤ ", "n", ", ", "m", " ≤ 100", ", ", "1 ≤ ", "k", " ≤ 10", "18", "). Then an array of priorities is given, ", "n", " lines each containing ", "m", " numbers, number ", "p", "i", ", ", "j", " shows the priority of character ", "j", " in line ", "i", " (", "1 ≤ ", "p", "i", ", ", "j", " ≤ ", "nm", ", all ", "p", "i", ", ", "j", " are different)."], ["Please do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator."]], "output_specification": [["Print the ", "k", "-th two dimensional correct bracket array."]], "sample_test_input": ["1 2 1", "1 2"], "sample_test_output": ["()"], "note": [["In the first sample exists only one correct two-dimensional bracket array."], ["In the second and in the third samples two arrays exist."], ["A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters «", "+", "» and «", "1", "» into this sequence. For example, sequences «", "(())()", "», «", "()", "» and «", "(()(()))", "» are regular, while «", ")(", "», «", "(()", "» and «", "(()))(", "» are not."]]}
{"title": ["C. A+B"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["For example they never write a code to sum two integers, because their languages have the ability to do the sum. But can they use it? Can an experienced coder who has attended more than 100 contests, sum two integers?"], ["Bijan is not sure about this. What's your opinion?"], []], "input_specification": [["You are given two integers ", "a", " and ", "b", ", one per line (", "1 ≤ ", "a", ", ", "b", " < 10", "500", "). These numbers will not have any leading zeros."]], "output_specification": [["Write sum of the two integers. ", "Do not put any leading zeros."]], "sample_test_input": ["2", "3"], "sample_test_output": ["5"], "note": []}
{"title": ["C. Division into Teams"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The key in football is to divide into teams fairly before the game begins. There are ", "n", " boys playing football in the yard (including Petya), each boy's football playing skill is expressed with a non-negative characteristic ", "a", "i", " (the larger it is, the better the boy plays). "], ["Let's denote the number of players in the first team as ", "x", ", the number of players in the second team as ", "y", ", the individual numbers of boys who play for the first team as ", "p", "i", " and the individual numbers of boys who play for the second team as ", "q", "i", ". Division ", "n", " boys into two teams is considered fair if three conditions are fulfilled:"], [], ["Your task is to help guys divide into two teams fairly. It is guaranteed that a fair division into two teams always exists."]], "input_specification": [["The first line contains the only integer ", "n", " (", "2 ≤ ", "n", " ≤ 10", "5", ") which represents the number of guys in the yard. The next line contains ", "n", " positive space-separated integers, ", "a", "i", " (", "1 ≤ ", "a", "i", " ≤ 10", "4", "), the ", "i", "-th number represents the ", "i", "-th boy's playing skills. "]], "output_specification": [["On the first line print an integer ", "x", " — the number of boys playing for the first team. On the second line print ", "x", " integers — the individual numbers of boys playing for the first team. On the third line print an integer ", "y", " — the number of boys playing for the second team, on the fourth line print ", "y", " integers — the individual numbers of boys playing for the second team. Don't forget that you should fulfil all three conditions: ", "x", " + ", "y", " = ", "n", ", ", "|", "x", " - ", "y", "| ≤ 1", ", and the condition that limits the total skills."], ["If there are multiple ways to solve the problem, print any of them."], ["The boys are numbered starting from one in the order in which their skills are given in the input data. You are allowed to print individual numbers of boys who belong to the same team in any order."]], "sample_test_input": ["3", "1 2 1"], "sample_test_output": ["2", "1 2 ", "1", "3 "], "note": [["Let's consider the first sample test. There we send the first and the second boy to the first team and the third boy to the second team. Let's check all three conditions of a fair division. The first limitation is fulfilled (all boys play), the second limitation on the sizes of groups (", "|2 - 1| = 1 ≤ 1", ") is fulfilled, the third limitation on the difference in skills (", "(2 + 1) - (1) = 2 ≤ 2", ") is fulfilled."]]}
{"title": ["G. Name the album"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "64 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Unfortunately these days, there are many albums, Aryo wants to choose a new name for his album, a name that has not been used or at least has not been used recently."], ["He has a list of all used album names together with the year the albums were published. He also has a list of suitable names for his album."], ["If he finds a suitable name which has not been used before, he'll use it. Otherwise he will use the name which was used as long ago as possible. If two such names are found (that haven't been used or were used at the same year), he uses the name that is alphabetically latest."], ["Help him name his album."], []], "input_specification": [["The first line contains a single integer ", "n", " (", "0 ≤ ", "n", " ≤ 10", "5", "), the number of used names. "], ["The following ", "n", " lines each contain a string (the album name) and an integer (the year album was published). Album names are made of lowercase Latin letters and contain at most ", "14", " letters. The year is in range ", "[1900, 2011]", "."], ["The following line contains a single integer ", "m", " (", "1 ≤ ", "m", " ≤ 10", "4", "), the number of suitable album names."], ["The following ", "m", " lines each contain a string — a suitable name. It contains at most ", "14", " lowercase Latin letters."], ["All album names and suitable names are ", "non-empty", "."]], "output_specification": [["Write a single string. The name of the new album."]], "sample_test_input": ["3", "eyesonme 2008", "anewdayhascome 2002", "oneheart 2003", "2", "oneheart", "bienbien"], "sample_test_output": ["bienbien"], "note": []}
{"title": ["C. Beaver Game"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["There are ", "n", " logs, each of exactly ", "m", " meters in length. The beavers move in turns. For each move a beaver chooses a log and gnaws it into some number (more than one) of ", "equal", " parts, the length of each one is expressed by an integer and is no less than ", "k", " meters. Each resulting part is also a log which can be gnawed in future by any beaver. The beaver that can't make a move loses. Thus, the other beaver wins."], ["Timur makes the first move. The players play in the optimal way. Determine the winner."], []], "input_specification": [["The first line contains three integers ", "n", ", ", "m", ", ", "k", " (", "1 ≤ ", "n", ", ", "m", ", ", "k", " ≤ 10", "9", ")."]], "output_specification": [["Print \"", "Timur", "\", if Timur wins, or \"", "Marsel", "\", if Marsel wins. You should print everything without the quotes. "]], "sample_test_input": ["1 15 4"], "sample_test_output": ["Timur"], "note": [["In the first sample the beavers only have one log, of ", "15", " meters in length. Timur moves first. The only move he can do is to split the log into ", "3", " parts each ", "5", " meters in length. Then Marsel moves but he can't split any of the resulting logs, as ", "k", " = 4", ". Thus, the winner is Timur."], ["In the second example the beavers have ", "4", " logs ", "9", " meters in length. Timur can't split any of them, so that the resulting parts possessed the length of not less than ", "5", " meters, that's why he loses instantly."]]}
{"title": ["A. Haiku"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["A haiku poem consists of 17 syllables split into three phrases, containing 5, 7 and 5 syllables correspondingly (the first phrase should contain exactly 5 syllables, the second phrase should contain exactly 7 syllables, and the third phrase should contain exactly 5 syllables). A haiku masterpiece contains a description of a moment in those three phrases. Every word is important in a small poem, which is why haiku are rich with symbols. Each word has a special meaning, a special role. The main principle of haiku is to say much using a few words."], ["To simplify the matter, in the given problem we will consider that the number of syllable in the phrase is equal to the number of vowel letters there. Only the following letters are regarded as vowel letters: \"", "a", "\", \"", "e", "\", \"", "i", "\", \"", "o", "\" and \"", "u", "\"."], ["Three phases from a certain poem are given. Determine whether it is haiku or not."], []], "input_specification": [["The input data consists of three lines. The length of each line is between ", "1", " and ", "100", ", inclusive. The ", "i", "-th line contains the ", "i", "-th phrase of the poem. Each phrase consists of one or more words, which are separated by one or more spaces. A word is a non-empty sequence of lowercase Latin letters. Leading and/or trailing spaces in phrases are allowed. Every phrase has at least one non-space character. See the example for clarification."]], "output_specification": [["Print \"", "YES", "\" (without the quotes) if the poem is a haiku. Otherwise, print \"", "NO", "\" (also without the quotes)."]], "sample_test_input": ["on  codeforces ", "beta round is running", "   a rustling of keys "], "sample_test_output": ["YES"], "note": []}
{"title": ["D. Archer's Shot"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The playing area in the game is split into congruent cells that are regular hexagons. The side of each cell is equal to 1. Each unit occupies exactly one cell of the playing field. The field can be considered infinite. "], ["Let's take a look at the battle unit called an \"Archer\". Each archer has a parameter \"shot range\". It's a positive integer that determines the radius of the circle in which the archer can hit a target. The center of the circle coincides with the center of the cell in which the archer stays. A cell is considered to be under the archer’s fire if and only if all points of this cell, including border points are located inside the circle or on its border."], ["The picture below shows the borders for shot ranges equal to ", "3", ", ", "4", " and ", "5", ". The archer is depicted as ", "A", ". "], [], ["Find the number of cells that are under fire for some archer."]], "input_specification": [["The first and only line of input contains a single positive integer ", "k", " — the archer's shot range (", "1 ≤ ", "k", " ≤ 10", "6", ")."]], "output_specification": [["Print the single number, the number of cells that are under fire."], ["Please do not use the ", "%lld", " specificator to read or write 64-bit integers in C++. It is preferred to use the ", "cout", " stream (also you may use the ", "%I64d", " specificator)."]], "sample_test_input": ["3"], "sample_test_output": ["7"], "note": []}
{"title": ["C. Old Berland Language"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Help the scientists determine whether all the words of the Old Berland language can be reconstructed and if they can, output the words themselves."], []], "input_specification": [["The first line contains one integer ", "N", " (", "1 ≤ ", "N", " ≤ 1000", ") — the number of words in Old Berland language. The second line contains ", "N", " space-separated integers — the lengths of these words. All the lengths are natural numbers not exceeding ", "1000", "."]], "output_specification": [["If there’s no such set of words, in the single line output ", "NO", ". Otherwise, in the first line output ", "YES", ", and in the next ", "N", " lines output the words themselves in the order their lengths were given in the input file. If the answer is not unique, output any."]], "sample_test_input": ["3", "1 2 3"], "sample_test_output": ["YES", "0", "10", "110"], "note": []}
{"title": ["B. Easter Eggs"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["Each egg should be painted one color out of 7: red, orange, yellow, green, blue, indigo or violet. Also, the following conditions should be satisfied:"], [], ["Help the Easter Rabbit paint the eggs in the required manner. We know that it is always possible."]], "input_specification": [["The only line contains an integer ", "n", " — the amount of eggs (", "7 ≤ ", "n", " ≤ 100", ")."]], "output_specification": [["Print one line consisting of ", "n", " characters. The ", "i", "-th character should describe the color of the ", "i", "-th egg in the order they lie in the circle. The colors should be represented as follows: \"", "R", "\" stands for red, \"", "O", "\" stands for orange, \"", "Y", "\" stands for yellow, \"", "G", "\" stands for green, \"", "B", "\" stands for blue, \"", "I", "\" stands for indigo, \"", "V", "\" stands for violet."], ["If there are several answers, print any of them."]], "sample_test_input": ["8"], "sample_test_output": ["ROYGRBIV"], "note": [["The way the eggs will be painted in the first sample is shown on the picture: "]]}
{"title": ["E. Trial for Chief"], "time_limit": ["time limit per test", "2 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["As soon as enough pretenders was picked, the following test took place among them: the chief of the tribe took a slab divided by horizontal and vertical stripes into identical squares (the slab consisted of ", "N", " lines and ", "M", " columns) and painted every square black or white. Then every pretender was given a slab of the same size but painted entirely white. Within a day a pretender could paint any side-linked set of the squares of the slab some color. The set is called linked if for any two squares belonging to the set there is a path belonging the set on which any two neighboring squares share a side. The aim of each pretender is to paint his slab in the exactly the same way as the chief’s slab is painted. The one who paints a slab like that first becomes the new chief."], ["Scientists found the slab painted by the ancient Berland tribe chief. Help them to determine the minimal amount of days needed to find a new chief if he had to paint his slab in the given way."], []], "input_specification": [["The first line contains two integers ", "N", " and ", "M", " (", "1 ≤ ", "N", ", ", "M", " ≤ 50", ") — the number of lines and columns on the slab. The next ", "N", " lines contain ", "M", " symbols each — the final coloration of the slab. ", "W", " stands for the square that should be painted white and ", "B", " — for the square that should be painted black."]], "output_specification": [["In the single line output the minimal number of repaintings of side-linked areas needed to get the required coloration of the slab."]], "sample_test_input": ["3 3", "WBW", "BWB", "WBW"], "sample_test_output": ["2"], "note": []}
{"title": ["C. Circular RMQ"], "time_limit": ["time limit per test", "1.5 seconds"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [[], ["Assume segments to be circular, so if ", "n", " = 5", " and ", "lf", " = 3, ", "rg", " = 1", ", it means the index sequence: ", "3, 4, 0, 1", "."], ["Write program to process given sequence of operations."]], "input_specification": [["The first line contains integer ", "n", " (", "1 ≤ ", "n", " ≤ 200000", "). The next line contains initial state of the array: ", "a", "0", ", ", "a", "1", ", ..., ", "a", "n", " - 1", " (", " - 10", "6", " ≤ ", "a", "i", " ≤ 10", "6", "), ", "a", "i", " are integer. The third line contains integer ", "m", " (", "0 ≤ ", "m", " ≤ 200000", "), ", "m", " — the number of operartons. Next ", "m", " lines contain one operation each. If line contains two integer ", "lf", ", ", "rg", " (", "0 ≤ ", "lf", ", ", "rg", " ≤ ", "n", " - 1", ") it means ", "rmq", " operation, it contains three integers ", "lf", ", ", "rg", ", ", "v", " (", "0 ≤ ", "lf", ", ", "rg", " ≤ ", "n", " - 1; - 10", "6", " ≤ ", "v", " ≤ 10", "6", ") — ", "inc", " operation."]], "output_specification": [["For each ", "rmq", " operation write result for it. Please, do not use ", "%lld", " specificator to read or write 64-bit integers in C++. It is preffered to use ", "cout", " (also you may use ", "%I64d", ")."]], "sample_test_input": ["4", "1 2 3 4", "4", "3 0", "3 0 -1", "0 1", "2 1"], "sample_test_output": ["1", "0", "0"], "note": []}
{"title": ["B. Computer Game"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["While playing the game Petya found spell scrolls and now he is about to use them. Let’s describe the way fighting goes on this level:"], ["1) The boss has two parameters: ", "max", " — the initial amount of health and ", "reg", " — regeneration rate per second."], ["2) Every scroll also has two parameters: ", "pow", "i", " — spell power measured in percents — the maximal amount of health counted off the initial one, which allows to use the scroll (i.e. if the boss has more than ", "pow", "i", " percent of health the scroll cannot be used); and ", "dmg", "i", " the damage per second inflicted upon the boss if the scroll is used. As soon as a scroll is used it disappears and another spell is cast upon the boss that inflicts ", "dmg", "i", " of damage per second upon him until the end of the game."], ["During the battle the actions per second are performed in the following order: first the boss gets the damage from all the spells cast upon him, then he regenerates ", "reg", " of health (at the same time he can’t have more than ", "max", " of health), then the player may use another scroll (no more than one per second)."], ["The boss is considered to be defeated if at the end of a second he has nonpositive (", " ≤ 0", ") amount of health."], ["Help Petya to determine whether he can win with the set of scrolls available to him and if he can, determine the minimal number of seconds he needs to do it."], []], "input_specification": [["The first line contains three integers ", "N", ", ", "max", " and ", "reg", " (", "1 ≤ ", "N", ", ", "max", ", ", "reg", " ≤ 1000", ") –– the amount of scrolls and the parameters of the boss. The next ", "N", " lines contain two integers ", "pow", "i", " and ", "dmg", "i", " each — the parameters of the ", "i", "-th scroll (", "0 ≤ ", "pow", "i", " ≤ 100", ", ", "1 ≤ ", "dmg", "i", " ≤ 2000", "). "]], "output_specification": [["In case Petya can’t complete this level, output in the single line ", "NO", "."], ["Otherwise, output on the first line ", "YES", ". On the second line output the minimal time after which the boss can be defeated and the number of used scrolls. In the next lines for each used scroll output space-separated number of seconds passed from the start of the battle to the moment the scroll was used and the number of the scroll. Scrolls are numbered starting from 1 in the input order. The first scroll is considered to be available to be used after ", "0", " seconds."], ["Output scrolls in the order they were used. It is not allowed to use scrolls after the boss is defeated."]], "sample_test_input": ["2 10 3", "100 3", "99 1"], "sample_test_output": ["NO"], "note": []}
{"title": ["D. Lesson Timetable"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["All the students of Petya’s year are divided into ", "N", " groups. Petya has noticed recently that these groups’ timetable has the following peculiarity: the number of the classroom where the first lesson of a group takes place does not exceed the number of the classroom where the second lesson of this group takes place. "], ["Once Petya decided to count the number of ways in which one can make a lesson timetable for all these groups. The timetable is a set of ", "2", "N", " numbers: for each group the number of the rooms where the first and the second lessons take place. Unfortunately, he quickly lost the track of his calculations and decided to count only the timetables that satisfy the following conditions:"], ["1) On the first lesson in classroom ", "i", " exactly ", "X", "i", " groups must be present."], ["2) In classroom ", "i", " no more than ", "Y", "i", " groups may be placed."], ["Help Petya count the number of timetables satisfying all those conditionsю As there can be a lot of such timetables, output modulo ", "10", "9", " + 7", "."], []], "input_specification": [["The first line contains one integer ", "M", " (", "1 ≤ ", "M", " ≤ 100", ") — the number of classrooms."], ["The second line contains ", "M", " space-separated integers — ", "X", "i", " (", "0 ≤ ", "X", "i", " ≤ 100", ") the amount of groups present in classroom ", "i", " during the first lesson."], ["The third line contains ", "M", " space-separated integers — ", "Y", "i", " (", "0 ≤ ", "Y", "i", " ≤ 100", ") the maximal amount of groups that can be present in classroom ", "i", " at the same time."], ["It is guaranteed that all the ", "X", "i", " ≤ ", "Y", "i", ", and that the sum of all the ", "X", "i", " is positive and does not exceed ", "1000", "."]], "output_specification": [["In the single line output the answer to the problem modulo ", "10", "9", " + 7", "."]], "sample_test_input": ["3", "1 1 1", "1 2 3"], "sample_test_output": ["36"], "note": [["In the second sample test the first and the second lessons of each group must take place in the same classroom, that’s why the timetables will only be different in the rearrangement of the classrooms’ numbers for each group, e.g. ", "3! = 6", "."]]}
{"title": ["E. Evacuation"], "time_limit": ["time limit per test", "1 second"], "memory_limit": ["memory limit per test", "256 megabytes"], "input_file": ["input", "standard input"], "output_file": ["output", "standard output"], "problem_statement": [["The station is represented by a square ", "n", " × ", "n", " divided into ", "1 × 1", " blocks. Each block is either a reactor or a laboratory. There can be several reactors and exactly one of them will explode soon. The reactors can be considered impassable blocks, but one can move through laboratories. Between any two laboratories, which are in adjacent blocks, there is a corridor. Blocks are considered adjacent if they have a common edge."], ["In each laboratory there is some number of scientists and some number of rescue capsules. Once the scientist climbs into a capsule, he is considered to be saved. Each capsule has room for not more than one scientist."], ["The reactor, which is about to explode, is damaged and a toxic coolant trickles from it into the neighboring blocks. The block, which contains the reactor, is considered infected. Every minute the coolant spreads over the laboratories through corridors. If at some moment one of the blocks is infected, then the next minute all the neighboring laboratories also become infected. Once a lab is infected, all the scientists there that are not in rescue capsules die. The coolant does not spread through reactor blocks."], ["There are exactly ", "t", " minutes to the explosion. Any scientist in a minute can move down the corridor to the next lab, if it is not infected. On any corridor an unlimited number of scientists can simultaneously move in both directions. It is believed that the scientists inside a lab moves without consuming time. Moreover, any scientist could get into the rescue capsule instantly. It is also believed that any scientist at any given moment always has the time to perform their actions (move from the given laboratory into the next one, or climb into the rescue capsule) before the laboratory will be infected."], ["Find the maximum number of scientists who will be able to escape."], []], "input_specification": [["The first line contains two integers ", "n", " and ", "t", " (", "2 ≤ ", "n", " ≤ 10", ", ", "1 ≤ ", "t", " ≤ 60", "). Each of the next ", "n", " lines contains ", "n", " characters. These lines describe the scientists' locations. Then exactly one empty line follows. Each of the next ", "n", " more lines contains ", "n", " characters. These lines describe the rescue capsules' locations."], ["In the description of the scientists' and the rescue capsules' locations the character \"", "Y", "\" stands for a properly functioning reactor, \"", "Z", "\" stands for the malfunctioning reactor. The reactors' positions in both descriptions coincide. There is exactly one malfunctioning reactor on the station. The digits \"", "0", "\" - \"", "9", "\" stand for the laboratories. In the description of the scientists' locations those numbers stand for the number of scientists in the corresponding laboratories. In the rescue capsules' descriptions they stand for the number of such capsules in each laboratory."]], "output_specification": [["Print a single number — the maximum number of scientists who will manage to save themselves."]], "sample_test_input": ["3 3", "1YZ", "1YY", "100", "0YZ", "0YY", "003"], "sample_test_output": ["2"], "note": [["In the second sample the events could take place as follows: "]]}
